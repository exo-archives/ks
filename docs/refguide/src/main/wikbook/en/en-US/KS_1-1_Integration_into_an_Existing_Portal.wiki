h1. KS h2. Integration into an Existing Portal   




h2. Overview

We are introducing two ways to integrate KS with an existing portal: 
* Binary integration : for those who just want to deploy KS in their portal
* Source integration : for those building a custom product

{info}
This tutorial shows how to deploy KS h2. applications into an eXo product based on portal 2.5. If you need to deploy on another basis, the steps should be similar, provided you take care of [KS:Dependencies]
{info}


h2. Binaries Integration

If you don't want to build KS from sources, you can simply get the binaries and integrate to your existing portal installation.

h3. Prerequisites
Make sure your portal installation is binary compatible with your version of KS.
KS h2. is based on Portal 2.5 So any product based on portal 2.5 should be compatible with KS 1.1.

h3. Deploy KS Artifacts
- Copy war files from KS to {{.../webapp}} in your bunble : 
-- forum.war
-- faq.war 
-- ksResources.war 

- Copy jar files from KS to {{../lib}} in your bundle : 
-- exo.ks.eXoApplication.common-1.1.jar
-- exo.ks.eXoApplication.faq.service-1.1.jar
-- exo.ks.eXoApplication.forum.service-1.1.jar
-- exo.ks.web.webservice-1.1.jar

h3. Add KS Configuration
- Copy ks folder from {{.../webapp/portal/WEB-INF/conf}} in KS to the same place in your bundle
- Import KS configuration into {{.../webapp/portal/WEB-INF/conf/configuration.xml}} in your bunle
{code: xml}
  <import>war:/conf/ks/jcr-component-plugins-configuration.xml</import>
  <import>war:/conf/ks/ks-plugins-configuration.xml</import>
{code}

Alternatively, you can externalize these files as explained in [this article_Kernel.Service Configuration for Beginners]

h3. Add apps

Now you can add the apps to your portal pages :
* Import apps in Application Registry
* Install them on any page of your portal



h3. Restart
Restart tomcat.


h2. Sources Integration

If you have a custom product built from eXo sources, you may want to add KS applications to your product.

h3. Prerequisites

The idea here is to use [Main.ExoBuild] to build and deploy a custom product.
So, make sure you have a working ExoBuild environment. Read [Main.Building from sources] to learn how to setup  eXoBuild.

#info("The KS version used for this tutorial is 1.1, but maybe work for the earlier versions")


h3. Update Product Build

You need to add the following KS artifacts in your product exbuild descriptors : 
- forum.war
- faq.war
- ksResources.war
- webservice.jar
- common.jar

In tools project, add to your <tt>modules/XXX/YYY/module.js</tt> file, where <tt>XXX</tt> is your project and <tt>YYY</tt> is the version as the following code:

{code:js}

  var ksversion = "1.1" ;
  module.eXoApplication = {};
  
  module.eXoApplication.common = new Project("org.exoplatform.ks", exo.ks.eXoApplication.common","jar",module.version) ; 
  
  module.eXoApplication.faq = 
    new Project("org.exoplatform.ks", "exo.ks.eXoApplication.faq.webapp", "war", module.version).
      addDependency(new Project("rome", "rome", "jar", "0.8")).
	  addDependency(new Project("jdom", "jdom", "jar", "1.0")).
	  addDependency(new Project("org.exoplatform.ks", "exo.ks.eXoApplication.faq.service", "jar", module.version));
	  
  module.eXoApplication.faq.deployName = "faq";

  module.eXoApplication.forum = 
    new Project("org.exoplatform.ks", "exo.ks.eXoApplication.forum.webapp", "war", module.version).       
			addDependency(new Project("org.exoplatform.ws", "exo.ws.frameworks.json", "jar", "1.3.1")).
	    addDependency(ws.frameworks.cometd).
      addDependency(new Project("org.exoplatform.ks", "exo.ks.eXoApplication.forum.service", "jar",  module.version));
  module.eXoApplication.forum.deployName = "forum";

  module.web = {}
  module.web.ksResources = 
    new Project("org.exoplatform.ks", "exo.ks.web.ksResources", "war", module.version) ;

  module.web.webservice = 
    new Project("org.exoplatform.ks", "exo.ks.web.webservice", "jar",  module.version);

{code}
 
 
Then declare deployment dependencies to your product assembly descriptor \{\{products/XXX/YYY.js}}
 
{code:xml}
  var ks = Module.GetModule("ks/tags/1.1", \{kernel : kernel, core : core, ws : ws, eXoPortletContainer : eXoPortletContainer, eXoJcr : eXoJcr, portal : portal});
  product.addDependencies(ks.eXoApplication.forum) ;
  product.addDependencies(ks.eXoApplication.faq) ;
  product.addDependencies(ks.eXoApplication.common) ;
  product.addDependencies(ks.web.ksResources) ;
  product.addDependencies(ks.web.webservice) ;

{code}


h3. Adjust Your Pom

To make sure KS product is compiled with your project, add the following to your project's <tt>pom.xml</tt> :

{code:xml}
  <org.exoplatform.ks.version>1.1</org.exoplatform.ks.version>
{code}


h3. Add KS Configuration

- Copy KS configuration files to your portal project's {{WEB-INF}} folder.

Copy the KS folder from {{KS/tags/1.2/web/ksportal/src/main/webapp/WEB-INF/conf/ks}} to {{XXX/YYY/web/portal/src/main/webapp/WEB-INF/conf/ks}}

- Import KS configuration files in {{WEB-INF/conf/configuration.xml}} : 
{code:xml}
  <import>war:/conf/ks/jcr-component-plugins-configuration.xml</import>
  <import>war:/conf/ks/ks-plugins-configuration.xml</import>
{code}
 

h3. Edit Portal Configuration
This step is not mandatory as you can very well do it manually as described in [binary integration_#HEditPortalconfiguration].

You may want to add a page for each application and add those pages in your navigation. 
For exemple, to add the apps to the classic portal public pages, you should complete the following steps:

- Add pages in <tt>XXX/YYY/web/portal/src/main/webapp/WEB-INF/conf/portal/portal/classic/pages.xml</tt>
{code:xml}
  <page>
    <page-id>portal::classic::forum</page-id>
    <owner-type>portal</owner-type>
    <owner-id>classic</owner-id>
    <name>forum</name>
    <access-permissions>Everyone</access-permissions>
    <edit-permission>*:/platform/administrators</edit-permission>
    <application>
      <instance-id>portal#classic:/forum/ForumPortlet/forum</instance-id>
      <title>Forum Portlet</title>
      <show-info-bar>false</show-info-bar>
      <show-application-state>false</show-application-state>
      <show-application-mode>false</show-application-mode>
    </application>
  </page>
  <page>
    <page-id>portal::classic::faq</page-id>
    <owner-type>portal</owner-type>
    <owner-id>classic</owner-id>
    <name>faq</name>
    <access-permissions>Everyone</access-permissions>
    <edit-permission>*:/platform/administrators</edit-permission>
    <application>
      <instance-id>portal#classic:/faq/FAQPortlet/faq</instance-id>
      <title>FAQ Portlet</title>
      <show-info-bar>false</show-info-bar>
      <show-application-state>false</show-application-state>
      <show-application-mode>false</show-application-mode>
    </application>
  </page>
{code}
  

- Add navigations in {{XXX/YYY/web/portal/src/main/webapp/WEB-INF/conf/portal/portal/classic/navigation.xml}}
{code:xml}
    <node>
      <uri>forum</uri>
      <name>forum</name>
      <label>#\{portal.classic.forum}</label>
      <page-reference>portal::classic::forum</page-reference>
    </node>
    <node>
      <uri>faq</uri>
      <name>faq</name>
      <label>#\{portal.classic.faq}</label>
      <page-reference>portal::classic::faq</page-reference>
    </node>

{code}

- Edit menu labels in resource bundles in <tt>XXX/YYY/web/portal/src/main/webapp/WEB-INF/classes/locale/navigation/portal/classic_en.properties</tt>

{code:xml}
portal.classic.forum=Forum
portal.classic.faq=Faq
{code}
 

h3. Customize FCKEditor Configuration

- Copy FCKeditor configuration files to your portal project's {{webapp}}
Copy the exo folder from {{ks/tags/1.1/web/ksportal/src/main/webapp/fckeditor/exo}} to {{XXX/YYY/web/portal/src/main/webapp/fckeditor/}}

- Edit your fckconfig.js file and add:
{code:xml}
FCKConfig.CustomConfigurationsPath =  '../exo/exoconfig.js' ;
{code}

h3. Build and Deploy

{code}
exobuild -product=XXX -version=YYY -update -build --deploy
{code}

Now start from {{exo-tomcat/bin}}

