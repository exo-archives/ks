
h1. KS 1.2 Integration into an Existing Portal






h1. Overview

We are introducing two ways to integrate KS with an existing portal: 

{info}
This tutorial shows how to deploy KS 1.2 applications into CS 1.2.1 on tomcat. If you need to deploy on another basis, the steps should be similar, provided you take care of [KS:Dependencies]
{info}


h1.  Binaries Integration

If you don't want to build KS from sources, you can simply get the binaries and integrate to your existing portal installation.

h2. Prerequisites
Make sure your portal installation is binary compatible with your version of KS.
KS 1.2 is based on Portal 2.5.3 So any product based on portal 2.5.3 should be compatible with KS 1.2.

h2. Deploy KS Artifacts
- Copy war files from KS to {{.../webapp}} in CS : 
-- forum.war
-- faq.war 
-- ksResources.war 

- Copy jar files from KS to {{../lib}} in CS : 
-- exo.ks.eXoApplication.common-1.2.jar
-- exo.ks.eXoApplication.faq.service-1.2.jar
-- exo.ks.eXoApplication.forum.service-1.2.jar
-- exo.ks.web.webservice-1.2.jar

h2.  Add KS Configuration
- Copy ks folder from {{.../webapp/portal/WEB-INF/conf}} in KS to the same place in CS
- Import KS configuration into {{.../webapp/portal/WEB-INF/conf/configuration.xml}} in CS
{code: xml}
  <import>war:/conf/ks/jcr-component-plugins-configuration.xml</import>
  <import>war:/conf/ks/ks-plugins-configuration.xml</import>
{code}

1.1 Edit Portal Configuration

You may want to add a page for each application and add those pages in your navigation. 
For exemple, to add the apps to the classic portal public pages, you should complete the following steps:

- Add pages in <tt>webapps/portal/WEB-INF/conf/portal/portal/classic/pages.xml</tt>
{code:xml}
  <page>
    <page-id>portal::classic::forum</page-id>
    <owner-type>portal</owner-type>
    <owner-id>classic</owner-id>
    <name>forum</name>
    <access-permissions>Everyone</access-permissions>
    <edit-permission>*:/platform/administrators</edit-permission>
    <application>
      <instance-id>portal#classic:/forum/ForumPortlet/forum</instance-id>
      <title>Forum Portlet</title>
      <show-info-bar>false</show-info-bar>
      <show-application-state>false</show-application-state>
      <show-application-mode>false</show-application-mode>
    </application>
  </page>
  <page>
    <page-id>portal::classic::faq</page-id>
    <owner-type>portal</owner-type>
    <owner-id>classic</owner-id>
    <name>faq</name>
    <access-permissions>Everyone</access-permissions>
    <edit-permission>*:/platform/administrators</edit-permission>
    <application>
      <instance-id>portal#classic:/faq/FAQPortlet/faq</instance-id>
      <title>FAQ Portlet</title>
      <show-info-bar>false</show-info-bar>
      <show-application-state>false</show-application-state>
      <show-application-mode>false</show-application-mode>
    </application>
  </page>
{code}
  

- Add navigations in {{WEB-INF/conf/portal/portal/classic/navigation.xml}}
{code:xml}
    <node>
      <uri>forum</uri>
      <name>forum</name>
      <label>{{portal.classic.forum}</label>
      <page-reference>portal::classic::forum</page-reference>
    </node>
    <node>
      <uri>faq</uri>
      <name>faq</name>
      <label>#\{portal.classic.faq}</label>
      <page-reference>portal::classic::faq</page-reference>
    </node>

{code}

- Edit menu labels in resource bundles in <tt>WEB-INF/classes/locale/navigation/portal/classic_en.properties</tt>

{code:xml}
portal.classic.forum=Forum
portal.classic.faq=Faq
{code}

h2.  Restart
Restart tomcat.




h1. Sources Integration

If you have a custom product built from eXo sources, you may want to add KS applications to your product.

h2. Prerequisites

The idea here is to use [Main:ExoBuild] to build and deploy a custom product.
So, make sure you have a working ExoBuild environment. Read [Main:Building from sources] to learn how to setup  eXoBuild.

#info}
The KS version used for this tutorial is 1.2, but maybe work for the before versions
{{portal.classic.forum}</label>
      <page-reference>portal::classic::forum</page-reference>
    </node>
    <node>
      <uri>faq</uri>
      <name>faq</name>
      <label>#\{portal.classic.faq}</label>
      <page-reference>portal::classic::faq</page-reference>
    </node>

{code}

- Edit menu labels in resource bundles in <tt>WEB-INF/classes/locale/navigation/portal/classic_en.properties</tt>

{code:xml}
portal.classic.forum=Forum
portal.classic.faq=Faq
{code}

h2.  Restart
Restart tomcat.




h1. Sources Integration

If you have a custom product built from eXo sources, you may want to add KS applications to your product.

h2. Prerequisites

The idea here is to use [Main:ExoBuild] to build and deploy a custom product.
So, make sure you have a working ExoBuild environment. Read [Main:Building from sources] to learn how to setup  eXoBuild.

#info}


h2.  Update Product Build

You need to add the following KS artifacts in your product exbuild descriptors : 
- forum.war
- faq.war
- ksResources.war
- webservice.jar
- common.jar

In tools project, add to your {{modules/XXX/YYY/module.js}} file, where {{XXX}} is your project and {{YYY}} is the version as the following code:

{code:js}

  var ksversion = "1.2" ;
  module.eXoApplication = {};
  
  module.eXoApplication.common = new Project("org.exoplatform.ks", exo.ks.eXoApplication.common","jar",module.version) ; 
  
  module.eXoApplication.faq = 
    new Project("org.exoplatform.ks", "exo.ks.eXoApplication.faq.webapp", "war", module.version).
      addDependency(new Project("rome", "rome", "jar", "0.8")).
	  addDependency(new Project("jdom", "jdom", "jar", "1.0")).
	  addDependency(new Project("org.exoplatform.ks", "exo.ks.eXoApplication.faq.service", "jar", module.version));
	  
  module.eXoApplication.faq.deployName = "faq";

  module.eXoApplication.forum = 
    new Project("org.exoplatform.ks", "exo.ks.eXoApplication.forum.webapp", "war", module.version).       
			addDependency(new Project("org.exoplatform.ws", "exo.ws.frameworks.json", "jar", "1.3.1")).
	    addDependency(ws.frameworks.cometd).
      addDependency(new Project("org.exoplatform.ks", "exo.ks.eXoApplication.forum.service", "jar",  module.version));
  module.eXoApplication.forum.deployName = "forum";

  module.web = {}
  module.web.ksResources = 
    new Project("org.exoplatform.ks", "exo.ks.web.ksResources", "war", module.version) ;

  module.web.webservice = 
    new Project("org.exoplatform.ks", "exo.ks.web.webservice", "jar",  module.version);

{code}
 
 
Then declare deployment dependencies to your product assembly descriptor <tt>products/XXX/YYY.js</tt>
 
{code:xml}
  var ks = Module.GetModule("ks/tags/1.2", \{kernel : kernel, core : core, ws : ws, eXoPortletContainer : eXoPortletContainer, eXoJcr : eXoJcr, portal : portal});
  product.addDependencies(ks.eXoApplication.forum) ;
  product.addDependencies(ks.eXoApplication.faq) ;
  product.addDependencies(ks.eXoApplication.common) ;
  product.addDependencies(ks.web.ksResources) ;
  product.addDependencies(ks.web.webservice) ;

{code}


h2. Adjust Your Pom

To make sure KS product is compiled with your project, add the following to your project's {{pom.xml}} :

{code:xml}
  <org.exoplatform.ks.version>1.2</org.exoplatform.ks.version>
{code}


1.1 Add KS Configuration

- Copy KS configuration files to your portal project's <tt>WEB-INF</tt> folder.

Copy the KS folder from <tt>KS/tags/1.2/web/ksportal/src/main/webapp/WEB-INF/conf/ks</tt> to <tt>XXX/YYY/web/portal/src/main/webapp/WEB-INF/conf/ks</tt>

- Import KS configuration files in <tt>WEB-INF/conf/configuration.xml</tt> : 
{code:xml}
  <import>war:/conf/ks/jcr-component-plugins-configuration.xml</import>
  <import>war:/conf/ks/ks-plugins-configuration.xml</import>
{code}
 

h2. Edit Portal Configuration
The steps are the same as for [binary integration|#EditPortalconfiguration] but directly under {{XXX/YYY/web/portal/src/main/webapp/}}.
 

h2.  Customize FCKEditor Configuration

- Copy FCKeditor configuration files to your portal project's {{webapp}}
Copy the exo folder from {{ks/tags/1.2/web/ksportal/src/main/webapp/fckeditor/exo}} to {{XXX/YYY/web/portal/src/main/webapp/fckeditor/}}

- Edit your fckconfig.js file and add:
{code:xml}
FCKConfig.CustomConfigurationsPath =  '../exo/exoconfig.js' ;
{code}

1.1  Build and Deploy

{code}
exobuild -product=XXX -version=YYY -update -build --deploy
{code}

Now start from {{exo-tomcat/bin}}

