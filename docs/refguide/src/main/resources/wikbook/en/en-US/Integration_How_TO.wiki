
h1. How to deploy KS to an existing Portal ?

We are introducing two ways to integrate KS with an existing portal: 


 


{info}
This tutorial shows how to deploy KS 1.0 applications into ECM 2.1 on tomcat. If you need to deploy on another basis, the steps should be similar, provided you take care of [KS:Dependencies]
{info}


h2. Integrating from binaries
If you don't want to build KS from sources you can simply get the binaries and integrate to your existing portal installation.

h3. Prerequisites
Make sure your portal install is binary compatible with your version of KS.
KS 1.0 is based on Portal 2.2. So any product based on portal 2.2.x should be compatible with KS 1.0

h3. Deploy KS artifacts
- Copy war files from KS to {{.../webapp}} in ECM : 
-- forum.war
-- faq.war 
-- ksResources.war 

- Copy jar files from KS to {{../lib}} in ECM : 
-- exo.ks.component.providers-1.0.jar
-- exo.ks.eXoApplication.faq.service-1.0.jar
-- exo.ks.eXoApplication.forum.service-1.0.jar

h3. Add KS configuration
- Copy ks folder from {{.../webapp/portal/WEB-INF/conf}} in KS to the same place in ECM
- Import KS configuration into {{.../webapp/portal/WEB-INF/conf/configuration.xml}} in ECM
{code: xml}
  <import>war:/conf/ks/jcr-component-plugins-configuration.xml</import>
  <import>war:/conf/ks/ks-plugins-configuration.xml</import>
{code}

1.1.1 Edit Portal configuration
You may want to add a page for each application and add those pages in your navigation. 
For exemple, to add the apps to the classic portal public pages, you would proceed like this :

- Add pages in <tt>webapps/portal/WEB-INF/conf/portal/portal/classic/pages.xml</tt>
{code:xml}
  <page>
    <page-id>portal::classic::forum</page-id>
    <owner-type>portal</owner-type>
    <owner-id>classic</owner-id>
    <name>forum</name>
    <access-permissions>Everyone</access-permissions>
    <edit-permission>*:/platform/administrators</edit-permission>
    <application>
      <instance-id>portal#classic:/forum/ForumPortlet/forum</instance-id>
      <title>Forum Portlet</title>
      <show-info-bar>false</show-info-bar>
      <show-application-state>false</show-application-state>
      <show-application-mode>false</show-application-mode>
    </application>
  </page>
  <page>
    <page-id>portal::classic::faq</page-id>
    <owner-type>portal</owner-type>
    <owner-id>classic</owner-id>
    <name>faq</name>
    <access-permissions>Everyone</access-permissions>
    <edit-permission>*:/platform/administrators</edit-permission>
    <application>
      <instance-id>portal#classic:/faq/FAQPortlet/faq</instance-id>
      <title>FAQ Portlet</title>
      <show-info-bar>false</show-info-bar>
      <show-application-state>false</show-application-state>
      <show-application-mode>false</show-application-mode>
    </application>
  </page>
{code}
  

- Add navigations in {{WEB-INF/conf/portal/portal/classic/navigation.xml}}
{code:xml}
    <node>
      <uri>forum</uri>
      <name>Forum</name>
      <label>#\{portal.classic.forum}</label>
      <page-reference>portal::classic::forum</page-reference>
    </node>
    <node>
      <uri>faq</uri>
      <name>FAQ</name>
      <label>#\{portal.classic.faq}</label>
      <page-reference>portal::classic::faq</page-reference>
    </node>

{code}

- Edit menu labels in resource bundles in <tt>WEB-INF/classes/locale/navigation/portal/classic_en.properties</tt>

{code:xml}
portal.classic.forum=Forum
portal.classic.faq=Faq
{code}

h3. Restart
Restart tomcat.


h2. Integrate from sources

If you have a custom product built from eXo sources, you may want to add KS applications to your product.

h3. Prerequisites
The idea here is to use [Main:ExoBuild] to build and deploy a custom product.
So, make sure you have a working ExoBuild encironment. Read [Main:Building from sources] to learn how to setup  eXoBuild.

#info}
The KS version used for this tutorial is 1.0-RC5, but will work for 1.0 similarly
{{portal.classic.forum}</label>
      <page-reference>portal::classic::forum</page-reference>
    </node>
    <node>
      <uri>faq</uri>
      <name>FAQ</name>
      <label>#\{portal.classic.faq}</label>
      <page-reference>portal::classic::faq</page-reference>
    </node>

{code}

- Edit menu labels in resource bundles in <tt>WEB-INF/classes/locale/navigation/portal/classic_en.properties</tt>

{code:xml}
portal.classic.forum=Forum
portal.classic.faq=Faq
{code}

h3. Restart
Restart tomcat.


h2. Integrate from sources

If you have a custom product built from eXo sources, you may want to add KS applications to your product.

h3. Prerequisites
The idea here is to use [Main:ExoBuild] to build and deploy a custom product.
So, make sure you have a working ExoBuild encironment. Read [Main:Building from sources] to learn how to setup  eXoBuild.

#info}


h3. Update product build

You need to add the following KS artifacts in your product exbuild descriptors : 
- forum.war
- faq.war
- ksResources.war

In tools project, add to your {{modules/XXX/YYY/module.js}} file, where {{XXX}} is your project and {{YYY}} the
version the following:

{code:js}

  var ksversion = "1.0-RC5" ;
  module.eXoApplication = {};
  
  module.eXoApplication.faq = new Project("org.exoplatform.ks", "exo.ks.eXoApplication.faq.webapp", "war", ksversion).
   addDependency(new Project("org.exoplatform.ks", "exo.ks.eXoApplication.faq.service", "jar", ksversion));
  module.eXoApplication.faq.deployName = "faq";

  module.eXoApplication.forum = new Project("org.exoplatform.ks", "exo.ks.eXoApplication.forum.webapp", "war", ksversion).
    addDependency(new Project("org.exoplatform.ks", "exo.ks.eXoApplication.forum.service", "jar",  ksversion).
    addDependency(new Project("org.exoplatform.ks", "exo.ks.component.providers", "jar", ksversion)));
  module.eXoApplication.forum.deployName = "forum";                     
  
  module.web = {}
  module.web.ksResources = 
    new Project("org.exoplatform.ks", "exo.ks.web.ksResources", "war", ksversion) ; 
{code}
 
 
Then declare deployment dependencies to your product assembly descriptor <tt>products/XXX/YYY.js</tt>
 
{code:xml}
  var ks = Module.GetModule("ks/tags/rc5", \{kernel : kernel, core : core, ws : ws, eXoPortletContainer : eXoPortletContainer, eXoJcr : eXoJcr, portal : portal});
  product.addDependencies(ks.eXoApplication.forum) ;
  product.addDependencies(ks.eXoApplication.faq) ;
  product.addDependencies(ks.web.ksResources) ;
{code}


h3. Adjust your pom
To make sure KS product is compiled with your project, add the following to your project's {{pom.xml}} :

{code:xml}
  <org.exoplatform.ks.version>1.0-RC5</org.exoplatform.ks.version>
{code}


1.1.1 Add KS configuration

- Copy KS configuration files to your portal project's <tt>WEB-INF</tt> folder.

Copy the KS folder from <tt>KS/tags/rc5/web/ksportal/src/main/webapp/WEB-INF/conf/ks</tt> to <tt>XXX/YYY/web/portal/src/main/webapp/WEB-INF/conf/ks</tt>

- Import KS configuration files in <tt>WEB-INF/conf/configuration.xml</tt> : 
{code:xml}
  <import>war:/conf/ks/jcr-component-plugins-configuration.xml</import>
  <import>war:/conf/ks/ks-plugins-configuration.xml</import>
{code}
 

h3. Edit Portal configuration
The steps are the same as for [binary integration|#Edit Portal configuration] but directly under {{XXX/YYY/web/portal/src/main/webapp/}}.
 

h3. Customize FCKEditor configuration

- Copy FCKeditor configuration files to your portal project's {{webapp}}
Copy the exo folder from {{KS/tags/1.0/web/ksportal/src/main/webapp/fckeditor/exo}} to {{XXX/YYY/web/portal/src/main/webapp/fckeditor/}}

- Edit your fckconfig.js file and add:
{code:xml}
FCKConfig.CustomConfigurationsPath =  '../exo/exoconfig.js' ;
{code}

1.1.1 Build and deploy

{code}
exobuild -product=XXX -version=YYY -update -build --deploy
{code}

Now start from {{exo-tomcat/bin}}





