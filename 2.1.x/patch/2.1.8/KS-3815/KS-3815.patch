Index: eXoApplication/forum/service/src/test/java/org/exoplatform/forum/service/TestForumServiceUtils.java
===================================================================
--- eXoApplication/forum/service/src/test/java/org/exoplatform/forum/service/TestForumServiceUtils.java	(revision 79461)
+++ eXoApplication/forum/service/src/test/java/org/exoplatform/forum/service/TestForumServiceUtils.java	(working copy)
@@ -5,6 +5,7 @@
 import static org.testng.AssertJUnit.assertNotNull;
 import static org.testng.AssertJUnit.assertTrue;
 
+import java.util.ArrayList;
 import java.util.List;
 
 import org.exoplatform.commons.testing.AbstractExoContainerTestCase;
@@ -76,18 +77,16 @@
 
  @Test
 	public void testGetPermissionByGroup() throws Exception {
-//		organizationService.addMemberships("user1", "*:/platform/users");	
-//		organizationService.addMemberships("user2", "*:/platform/users");
-//		organizationService.addMemberships("user3", "*:/platform");
-//		
-//		assertEquals(2, ForumServiceUtils.getUserPermission(new String [] {"/platform/users"}).size());
-//		AssertUtils.assertContains(ForumServiceUtils.getUserPermission(new String [] {"/platform/users"}), "user1", "user2");
-//		AssertUtils.assertNotContains(ForumServiceUtils.getUserPermission(new String [] {"/platform/users"}), "user3");	
-//		AssertUtils.assertContains(ForumServiceUtils.getUserPermission(new String [] {"/platform/users", "/platform"}), "user1", "user2", "user3");	
+		organizationService.addMemberships("user1", "*:/platform/users");	
+		organizationService.addMemberships("user2", "*:/platform/users");
+		organizationService.addMemberships("user3", "*:/platform");
 		
-		
+		assertEquals(2, ForumServiceUtils.getUserPermission(new String [] {"/platform/users"}).size());
+		AssertUtils.assertContains(ForumServiceUtils.getUserPermission(new String [] {"/platform/users"}), "user1", "user2");
+		AssertUtils.assertNotContains(ForumServiceUtils.getUserPermission(new String [] {"/platform/users"}), "user3");	
+		AssertUtils.assertContains(ForumServiceUtils.getUserPermission(new String [] {"/platform/users", "/platform"}), "user1", "user2", "user3");	
 	}
-	
+
  @Test
 	public void testGetPermissionByUser() throws Exception {
 		organizationService.addMemberships("user1", "*:/platform/users");	
@@ -108,7 +107,43 @@
 	
  @Test
 	public void testGetPermissionByMembership() throws Exception {
-		organizationService.addMemberships("user1", "*:/platform/users");
+    // add user/group/membership
+		organizationService.addMemberships("user1", "user:/platform/users");
+		organizationService.addMemberships("user2", "user:/platform/users");
+		organizationService.addMemberships("user3", "manager:/platform/users");
+		
+		
+		organizationService.addMemberships("user1", "manager:/space/space_user1");
+		organizationService.addMemberships("user2", "member:/space/space_user1");
+		
+		organizationService.addMemberships("user2", "manager:/space/space_user2");
+		organizationService.addMemberships("user1", "member:/space/space_user2");
+		
+		List<String> allUsers = new ArrayList<String>();
+		allUsers.add("user1");
+		// only user1 is manager of group /space/space_user1
+		AssertUtils.assertContainsAll("Not only user1 is manager of group /space/space_user1.", 
+		                              ForumServiceUtils.getUserPermission(new String [] {"manager:/space/space_user1"}), allUsers);
+		// only user1 is member of group /space/space_user2
+		AssertUtils.assertContainsAll("Not only user1 is member of group /space/space_user2.", 
+		                              ForumServiceUtils.getUserPermission(new String [] {"member:/space/space_user2"}), allUsers);
+		
+		allUsers = new ArrayList<String>();
+		allUsers.add("user2");
+		// only user2 is manager of group /space/space_user2
+		AssertUtils.assertContainsAll("Not only user2 is manager of group /space/space_user2.", 
+		                              ForumServiceUtils.getUserPermission(new String [] {"manager:/space/space_user2"}), allUsers);
+		// only user2 is member of group /space/space_user1
+		AssertUtils.assertContainsAll("Not only user2 is member of group /space/space_user1.", 
+		                              ForumServiceUtils.getUserPermission(new String [] {"member:/space/space_user1"}), allUsers);
+
+		allUsers.add("user1");
+		// user1 and user2 is join group /space/space_user1
+		AssertUtils.assertContainsAll("The group /space/space_user1 not contains user1 and user2 ", 
+		                              ForumServiceUtils.getUserPermission(new String [] {"*:/space/space_user1"}), allUsers);
+		// user1 and user2 is join group /space/space_user2
+		AssertUtils.assertContainsAll("The group /space/space_user2 not contains user1 and user2", 
+		                              ForumServiceUtils.getUserPermission(new String [] {"*:/space/space_user2"}), allUsers);
 	}
 
  
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/impl/JCRDataStorage.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/impl/JCRDataStorage.java	(revision 79461)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/impl/JCRDataStorage.java	(working copy)
@@ -681,7 +681,7 @@
 
 	
 	public void initDefaultData() throws Exception {
-		SessionProvider sProvider = ForumServiceUtils.getSessionProvider();
+		SessionProvider sProvider = CommonUtils.createSystemProvider();
 		Set<String> set = new HashSet<String>();
 		try {
 			Node categoryHome = getCategoryHome(sProvider);
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/ForumServiceUtils.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/ForumServiceUtils.java	(revision 79461)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/ForumServiceUtils.java	(working copy)
@@ -8,7 +8,7 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
@@ -19,14 +19,13 @@
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Iterator;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import javax.jcr.Node;
 
-import org.exoplatform.commons.utils.PageList;
 import org.exoplatform.container.ExoContainerContext;
-import org.exoplatform.ks.common.CommonUtils;
 import org.exoplatform.ks.common.jcr.KSDataLocation;
 import org.exoplatform.ks.common.jcr.SessionManager;
 import org.exoplatform.services.cache.CacheService;
@@ -34,9 +33,6 @@
 import org.exoplatform.services.jcr.access.AccessControlEntry;
 import org.exoplatform.services.jcr.access.PermissionType;
 import org.exoplatform.services.jcr.core.ExtendedNode;
-import org.exoplatform.services.jcr.ext.common.SessionProvider;
-import org.exoplatform.services.log.ExoLogger;
-import org.exoplatform.services.log.Log;
 import org.exoplatform.services.organization.Membership;
 import org.exoplatform.services.organization.OrganizationService;
 import org.exoplatform.services.organization.User;
@@ -47,255 +43,245 @@
 /**
  * Created by The eXo Platform SAS
  * Author : Vu Duy Tu
- *					tu.duy@exoplatform.com
+ *          tu.duy@exoplatform.com
  */
 
 public class ForumServiceUtils {
-	
-	private static final Log                          log                          = ExoLogger.getLogger(ForumServiceUtils.class);
-	
-	/**
-	 * 
-	 * Verify if a user match user, group, membership expressions
-	 * @param userGroupMembership ist that may contain usernames or group names or membership expressions in the form MEMBERSHIPTYPE:GROUP
-	 * @param userId username to match against the expressions
-	 * @return true if the user match at least one of the expressions
-	 * @throws Exception
-	 */
-	public static boolean hasPermission(String[] userGroupMembership, String userId) throws Exception {
-		IdentityRegistry identityRegistry = (IdentityRegistry) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(IdentityRegistry.class);
-		Identity identity = identityRegistry.getIdentity(userId);
-		if (identity == null) {
-		  OrganizationService oService = (OrganizationService) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(OrganizationService.class);
-		  Collection<MembershipEntry> memberships = oService.getMembershipHandler().findMembershipsByUser(userId) ;
-			identity = new Identity(userId, memberships) ;
-		}
-		
-		if(userGroupMembership == null || userGroupMembership.length <= 0 || userGroupMembership[0].equals(" ")) return false;
-		
-		for (String item : userGroupMembership) {
-			String expr = item.trim();
-			
-			if (isMembershipExpression(expr)) {
-				String[] array = expr.split(":") ;
-				String membershipType = array[0];
-				String group = array[1];
-				if (identity.isMemberOf(group, membershipType)) {
-					return true;
-				}
-			} else if (isGroupExpression(expr)) {
-				String group = expr;
-				if (identity.isMemberOf(group)) {
-					return true;
-				}
-			} else {
-				String username = expr;
-				if (username.equals(userId)) {
-					return true;
-				}
-			}
-			
-		}
-		return false; // no match found
-	}
-	
-	/**
-	 * Is the expression a group expression
-	 * @param expr
-	 * @return
-	 */
-	private static boolean isGroupExpression(String expr) {
-		return ((expr.indexOf("/") >= 0)  && !(expr.indexOf(":") >= 0));
-	}
 
-	/**
-	 * Is the expression a membership expression (MEMBERSHIPTYPE:GROUP)
-	 * @param expr
-	 * @return
-	 */
-	private static boolean isMembershipExpression(String expr) {
-		return ((expr.indexOf("/") >= 0)  && (expr.indexOf(":") >= 0));
-	}
+  private static final String                         ANY      = "*".intern();
 
-	/**
-	 * Find usernames matching user, group or membership expressions
-	 * @param userGroupMembership list that may contain usernames or group names or membership expressions in the form MEMBERSHIPTYPE:GROUP
-	 * @return list of users that mach at least one of the userGroupMembership
-	 * @throws Exception
-	 */
-	@SuppressWarnings("unchecked")
-	public static List<String> getUserPermission(String[] userGroupMembership) throws Exception {
-		List<String> users = getFromCache(userGroupMembership);
-		if (users != null) {
-			return users;
-		}
-		users = new ArrayList<String> () ;
-		
-		if(userGroupMembership == null || userGroupMembership.length <= 0 || 
-				(userGroupMembership.length == 1 && userGroupMembership[0].equals(" "))) return users ; 
-		OrganizationService organizationService = (OrganizationService) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(OrganizationService.class);
-		for(String str : userGroupMembership) {
-		  
-			str = str.trim();
-			if (isMembershipExpression(str)) {
-				String[] array = str.split(":") ;
-				//List<User> userList = organizationService.getUserHandler().findUsersByGroup(array[1]).getAll() ;
-				PageList pageList = organizationService.getUserHandler().findUsersByGroup(array[1]) ;
-				if(array[0].length() > 1){
-				  List<User> userList = new ArrayList<User>() ;
-			    for(int i = 1; i <= pageList.getAvailablePage(); i++) {
-			      userList.clear() ;
-			      userList.addAll(pageList.getPage(i)) ;
-			      for (User user : userList) {
-			        if(!users.contains(user.getUserName())){
-	              Collection<Membership> memberships = organizationService.getMembershipHandler().findMembershipsByUser(user.getUserName()) ;
-	              for(Membership member : memberships){
-	                if(member.getMembershipType().equals(array[0])) {
-	                  users.add(user.getUserName()) ;
-	                  break ;
-	                }
-	              }           
-	            }
-			      }
-			    }
-					/*for(User user: userList) {
-						if(!users.contains(user.getUserName())){
-							Collection<Membership> memberships = organizationService.getMembershipHandler().findMembershipsByUser(user.getUserName()) ;
-							for(Membership member : memberships){
-								if(member.getMembershipType().equals(array[0])) {
-									users.add(user.getUserName()) ;
-									break ;
-								}
-							}						
-						}
-					}*/
-				}else {
-					if(array[0].charAt(0)== 42) {
-					  pageList = organizationService.getUserHandler().findUsersByGroup(array[1]) ;
-					  List<User> userList = new ArrayList<User>() ;					  
-	          for(int i = 1; i <= pageList.getAvailablePage(); i++) {
-	            userList.clear() ;
-	            userList.addAll(pageList.getPage(i)) ;
-	            for (User user : userList) {
-	              if(!users.contains(user.getUserName())){
-	                users.add(user.getUserName()) ;
-	              }
-	            }
-	          }
-						/*for(User user: userList) {
-							if(!users.contains(user.getUserName())){
-								users.add(user.getUserName()) ;
-							}
-						}*/
-					}
-				}			
+  private static final String                         COLON    = ":".intern();
 
-			} else if (isGroupExpression(str)) {
-			  PageList pageList = organizationService.getUserHandler().findUsersByGroup(str) ;
-			  List<User> userList = new ArrayList<User>() ;
-			  for(int i = 1; i <= pageList.getAvailablePage(); i++) {
-          userList.clear() ;
-          userList.addAll(pageList.getPage(i)) ;
-          for (User user : userList) {
-            if(!users.contains(user.getUserName())){
-              users.add(user.getUserName()) ;
+  private static final String                         SLASH    = "/".intern();
+
+  private static ExoCache<Serializable, List<String>> exoCache = null;
+
+  /**
+   * 
+   * Verify if a user match user, group, membership expressions
+   * @param userGroupMembership ist that may contain usernames or group names or membership expressions in the form MEMBERSHIPTYPE:GROUP
+   * @param userId username to match against the expressions
+   * @return true if the user match at least one of the expressions
+   * @throws Exception
+   */
+  @SuppressWarnings("unchecked")
+  public static boolean hasPermission(String[] userGroupMembership, String userId) throws Exception {
+    IdentityRegistry identityRegistry = (IdentityRegistry) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(IdentityRegistry.class);
+    Identity identity = identityRegistry.getIdentity(userId);
+    if (identity == null) {
+      OrganizationService oService = (OrganizationService) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(OrganizationService.class);
+      Collection<MembershipEntry> memberships = oService.getMembershipHandler().findMembershipsByUser(userId);
+      identity = new Identity(userId, memberships);
+    }
+
+    if (userGroupMembership == null || userGroupMembership.length <= 0 || userGroupMembership[0].equals(" "))
+      return false;
+
+    for (String item : userGroupMembership) {
+      String expr = item.trim();
+
+      if (isMembershipExpression(expr)) {
+        String[] array = expr.split(COLON);
+        String membershipType = array[0];
+        String group = array[1];
+        if (identity.isMemberOf(group, membershipType)) {
+          return true;
+        }
+      } else if (isGroupExpression(expr)) {
+        String group = expr;
+        if (identity.isMemberOf(group)) {
+          return true;
+        }
+      } else {
+        String username = expr;
+        if (username.equals(userId)) {
+          return true;
+        }
+      }
+
+    }
+    return false; // no match found
+  }
+
+  /**
+   * Is the expression a group expression
+   * @param expr
+   * @return
+   */
+  private static boolean isGroupExpression(String expr) {
+    return ((expr.indexOf(SLASH) >= 0) && !(expr.indexOf(COLON) >= 0));
+  }
+
+  /**
+   * Is the expression a membership expression (MEMBERSHIPTYPE:GROUP)
+   * @param expr
+   * @return
+   */
+  private static boolean isMembershipExpression(String expr) {
+    return ((expr.indexOf(SLASH) >= 0) && (expr.indexOf(COLON) >= 0));
+  }
+
+  @SuppressWarnings("deprecation")
+  private static List<User> getUserByGroup(OrganizationService organizationService, String group) throws Exception {
+    try {
+      return organizationService.getUserHandler().findUsersByGroup(group).getAll();
+    } catch (Exception e) {
+      return null;
+    }
+  }
+
+  /**
+   * Find usernames matching membership expressions
+   * @param organizationService 
+   * @param memberShip the membership, ex: member:/platform/users , *:/platform/users. 
+   * @return list of users that mach at least one of the membership
+   * @throws Exception
+   */
+
+  @SuppressWarnings("unchecked")
+  private static List<String> getUserByMembershipType(OrganizationService organizationService, String memberShip) throws Exception {
+    List<String> users = getFromCache(new String[] { memberShip });
+    if (users != null) {
+      return users;
+    }
+    users = new ArrayList<String>();
+    String[] array = memberShip.trim().split(COLON);
+    if (array[0].length() > 1) {
+      List<User> userList = getUserByGroup(organizationService, array[1]);
+      if (userList == null) {
+        return users;
+      }
+      for (User user : userList) {
+        String userName = user.getUserName();
+        if (!users.contains(userName)) {
+          Collection<Membership> memberships = organizationService.getMembershipHandler().findMembershipsByUser(userName);
+          for (Membership member : memberships) {
+            if (member.getMembershipType().equals(array[0]) && member.getGroupId().equals(array[1])) {
+              users.add(userName);
+              break;
             }
           }
         }
-				/*for(User user: userList) {
-					if(!users.contains(user.getUserName())){
-						users.add(user.getUserName()) ;
-					}
-				}*/
-			} else {
-			  if(!users.contains(str)){
-					users.add(str) ;
-				}
-			}
-			
-		}
-		storeInCache(userGroupMembership, users);
-		return users ;
-	}
-	
-	/**
-	 * Store the list of user for the permission expressions in cache
-	 * @param userGroupMembership
-	 * @param users
-	 * @throws Exception
-	 */
-	private static void storeInCache(String[] userGroupMembership,
-			List<String> users) throws Exception {
-		ExoCache cache = getCache();
-		Serializable cacheKey = getCacheKey(userGroupMembership);
-		cache.put(cacheKey, users);
-	}
+      }
+    } else {
+      if (ANY.equals(array[0])) {
+        users.addAll(getUserByGroupId(organizationService, array[1]));
+      }
+    }
+    storeInCache(new String[] { memberShip }, users);
+    return users;
+  }
 
-	/**
-	 * Load a list of user for the permission expressions in cache
-	 * @param userGroupMembership
-	 * @return
-	 * @throws Exception
-	 */
-	@SuppressWarnings("unchecked")
-	private static List<String> getFromCache(String[] userGroupMembership) throws Exception{
-		if (userGroupMembership == null || userGroupMembership.length == 0
-				|| (userGroupMembership.length == 1 && userGroupMembership[0].length() == 0)) return null;
-		ExoCache cache = getCache();
-		Serializable cacheKey = getCacheKey(userGroupMembership);
-		return (List<String>) cache.get(cacheKey);
-	}
+  /**
+   * Find usernames matching group id expressions
+   * @param organizationService 
+   * @param groupId the group Id, ex: /platform/users . 
+   * @return list of users that mach at least one of the group id
+   * @throws Exception
+   */
+  private static List<String> getUserByGroupId(OrganizationService organizationService, String groupId) throws Exception {
+    List<String> users = getFromCache(new String[] { groupId });
+    if (users != null) {
+      return users;
+    }
+    users = new ArrayList<String>();
+    List<User> userList = getUserByGroup(organizationService, groupId);
+    if (userList == null) {
+      return users;
+    }
+    for (User user : userList) {
+      users.add(user.getUserName());
+    }
+    storeInCache(new String[] { groupId }, users);
+    return users;
+  }
 
-	private static Serializable getCacheKey(String[] userGroupMembership) {
-		StringBuilder sb = new StringBuilder();
-		for (String item : userGroupMembership) {
-			sb.append("#").append(item);
-		}
-		return sb.toString();
-	}
+  /**
+   * Find usernames matching user, group or membership expressions
+   * @param userGroupMembership list that may contain usernames or group names or membership expressions in the form MEMBERSHIPTYPE:GROUP
+   * @return list of users that mach at least one of the userGroupMembership
+   * @throws Exception
+   */
+  public static List<String> getUserPermission(String[] userGroupMembership) throws Exception {
+    if (userGroupMembership == null || userGroupMembership.length <= 0 || (userGroupMembership.length == 1 && userGroupMembership[0].equals(" "))) {
+      return new ArrayList<String>();
+    }
+    List<String> list = getFromCache(userGroupMembership);
+    if (list != null) {
+      return list;
+    }
+    OrganizationService organizationService = (OrganizationService) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(OrganizationService.class);
+    Set<String> users = new HashSet<String>();
+    for (int j = 0; j < userGroupMembership.length; j++) {
+      String str = userGroupMembership[j].trim();
+      if (isMembershipExpression(str)) {
+        users.addAll(getUserByMembershipType(organizationService, str));
+      } else if (isGroupExpression(str)) {
+        users.addAll(getUserByGroupId(organizationService, str));
+      } else {
+        users.add(str);
+      }
+    }
+    list = new ArrayList<String>(users);
+    storeInCache(userGroupMembership, list);
+    return list;
+  }
 
-	private static ExoCache getCache() throws Exception {
-		CacheService cacheService = (CacheService) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(CacheService.class);
-		return cacheService.getCacheInstance("org.exoplatform.forum.ForumPermissionsUsers");
-	}
+  /**
+   * Store the list of user for the permission expressions in cache
+   * @param userGroupMembership
+   * @param users
+   * @throws Exception
+   */
+  private static void storeInCache(String[] userGroupMembership, List<String> users) throws Exception {
+    ExoCache<Serializable, List<String>> cache = getCache();
+    Serializable cacheKey = getCacheKey(userGroupMembership);
+    cache.put(cacheKey, users);
+  }
 
   /**
-  * @deprecated use {@link #org.exoplatform.ks.common.UserHelper.getAllGroupAndMembershipOfUser(String userId)}
-  */
-  public static List<String> getAllGroupAndMembershipOfUser(String userId) throws Exception {
-    List<String> listOfUser = new ArrayList<String>();
-    listOfUser.add(userId);
-    String groupId = "";
-    Membership membership = null;
+   * Load a list of user for the permission expressions in cache
+   * @param userGroupMembership
+   * @return
+   * @throws Exception
+   */
+  private static List<String> getFromCache(String[] userGroupMembership) throws Exception {
+    ExoCache<Serializable, List<String>> cache = getCache();
+    Serializable cacheKey = getCacheKey(userGroupMembership);
+    return cache.get(cacheKey);
+  }
 
-    OrganizationService organizationService_ = (OrganizationService) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(OrganizationService.class);
-    for (Iterator iterator = organizationService_.getMembershipHandler().findMembershipsByUser(userId).iterator(); iterator.hasNext();) {
-      membership = (Membership) iterator.next();
-      groupId = membership.getGroupId();
-      listOfUser.add(groupId);
-      listOfUser.add(membership.getMembershipType() + ":" + groupId);
+  private static Serializable getCacheKey(String[] userGroupMembership) {
+    StringBuilder sb = new StringBuilder();
+    for (String item : userGroupMembership) {
+      sb.append("#").append(item);
     }
-    return listOfUser;
+    return sb.toString();
   }
-	
-	public static void reparePermissions(Node node, String owner) throws Exception {
-		ExtendedNode extNode = (ExtendedNode)node ;
-		if (extNode.canAddMixin("exo:privilegeable")) extNode.addMixin("exo:privilegeable");
-		String[] arrayPers = {PermissionType.READ, PermissionType.ADD_NODE, PermissionType.SET_PROPERTY, PermissionType.REMOVE};
-		extNode.setPermission(owner, arrayPers) ;
-		List<AccessControlEntry> permsList = extNode.getACL().getPermissionEntries() ;		
-		for(AccessControlEntry accessControlEntry : permsList) {
-			extNode.setPermission(accessControlEntry.getIdentity(), arrayPers) ;			
-		}
-	}
 
-	public static SessionProvider getSessionProvider() {
-		return CommonUtils.createSystemProvider();
-	}
-	
-	
-	public static SessionManager getSessionManager() {
-	  KSDataLocation location =  (KSDataLocation) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(KSDataLocation.class);
-	  return location.getSessionManager();
-	}
+  private static ExoCache<Serializable, List<String>> getCache() throws Exception {
+    if(exoCache == null)  {
+      CacheService cacheService = (CacheService) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(CacheService.class);
+      exoCache = cacheService.getCacheInstance("org.exoplatform.forum.ForumPermissionsUsers");
+      exoCache.setLiveTime(5);
+    }
+    return exoCache;
+  }
+
+  public static void reparePermissions(Node node, String owner) throws Exception {
+    ExtendedNode extNode = (ExtendedNode) node;
+    if (extNode.canAddMixin("exo:privilegeable"))
+      extNode.addMixin("exo:privilegeable");
+    String[] arrayPers = { PermissionType.READ, PermissionType.ADD_NODE, PermissionType.SET_PROPERTY, PermissionType.REMOVE };
+    extNode.setPermission(owner, arrayPers);
+    List<AccessControlEntry> permsList = extNode.getACL().getPermissionEntries();
+    for (AccessControlEntry accessControlEntry : permsList) {
+      extNode.setPermission(accessControlEntry.getIdentity(), arrayPers);
+    }
+  }
+
+  public static SessionManager getSessionManager() {
+    KSDataLocation location = (KSDataLocation) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(KSDataLocation.class);
+    return location.getSessionManager();
+  }
 }
