Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/ws/ForumWebservice.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/ws/ForumWebservice.java	(revision 69849)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/ws/ForumWebservice.java	(working copy)
@@ -2,7 +2,9 @@
  * 
  */
 package org.exoplatform.forum.service.ws;
+
 import java.io.InputStream;
+import java.net.URI;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -11,10 +13,14 @@
 import javax.ws.rs.PathParam;
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.CacheControl;
+import javax.ws.rs.core.Context;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 import javax.ws.rs.core.Response.Status;
+import javax.ws.rs.core.SecurityContext;
+import javax.ws.rs.core.UriInfo;
 
+import org.exoplatform.common.http.HTTPStatus;
 import org.exoplatform.container.ExoContainerContext;
 import org.exoplatform.forum.service.ForumService;
 import org.exoplatform.forum.service.Post;
@@ -23,12 +29,11 @@
 import org.exoplatform.services.rest.resource.ResourceContainer;
 
 
-
-
 /**
- * @author Uoc Nguyen
+ * @author Vu Duy Tu
  * 
  */
+@SuppressWarnings("unchecked")
 @Path("ks/forum")
 public class ForumWebservice implements ResourceContainer {
 
@@ -41,31 +46,88 @@
   
   public ForumWebservice() {}
 
+  private BeanToJsons<MessageBean> getNewPosts(String userName, int maxcount) throws Exception {
+    ForumService forumService = (ForumService) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(ForumService.class);
+    List<Post> list = forumService.getRecentPostsForUser(userName, maxcount);
+    List<MessageBean> lastMessages = new ArrayList<MessageBean>() ;
+    if (list != null) {
+      for (Post post : list) {
+        post.setLink(post.getLink() + "/" + post.getId());
+        lastMessages.add(new MessageBean(post)) ;
+      }
+    }
+    return new BeanToJsons<MessageBean>(lastMessages);
+  }
+  
+  private String getUserId(SecurityContext sc, UriInfo uriInfo) {
+    try {
+      return sc.getUserPrincipal().getName();
+    } catch (NullPointerException e) {
+      return getViewerId(uriInfo);
+    } catch (Exception e) {
+      log.debug("Failed to get user id", e);
+      return null;
+    }
+  }
+  
+  private String getViewerId(UriInfo uriInfo) {
+    URI uri = uriInfo.getRequestUri();
+    String requestString = uri.getQuery();
+    if (requestString == null) return null;
+    String[] queryParts = requestString.split("&");
+    for (String queryPart : queryParts) {
+      if (queryPart.startsWith("opensocial_viewer_id")) {
+        return queryPart.substring(queryPart.indexOf("=") + 1, queryPart.length());
+      }
+    }
+    return null;
+  }
+
+  /**
+   * The rest can gets response is recent posts for user and limited by number post.
+   * 
+   * @param maxcount is max number post for render in gadget
+   * @param sc is SecurityContext for get userId login when we use rest link to render gadget.
+   * @param uriInfo is UriInfo for get userId login when we render gadget via gadgets service
+   * @return the response is json-data content list recent post for user.
+   * @throws Exception the exception
+   */
   @GET
   @Path("getmessage/{maxcount}")
   @Produces(MediaType.APPLICATION_JSON)
-  public Response getMessage(@PathParam("maxcount") String maxcount) throws Exception {
-    int counter = 0 ;
+  public Response getMessage(@PathParam("maxcount") int maxcount, @Context SecurityContext sc,
+                                                                  @Context UriInfo uriInfo) throws Exception {
+    CacheControl cacheControl = new CacheControl();
+    cacheControl.setNoCache(true);
+    cacheControl.setNoStore(true);
     try {
-      counter = Integer.parseInt(maxcount);
+      String userName = getUserId(sc, uriInfo);
+      BeanToJsons<MessageBean> data = getNewPosts(userName, maxcount);
+      return Response.ok(data, MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
     } catch (Exception e) {
+      log.debug("Failed to get new post by user.");
+      return Response.status(HTTPStatus.INTERNAL_ERROR).cacheControl(cacheControl).build();
     }
+  }
+
+  /**
+   * The rest can gets response is recent public post limited by number post.
+   * 
+   * @param maxcount is max number post for render in gadget
+   * @return the response is json-data content list recent public post.
+   * @throws Exception the exception
+   */
+  @GET
+  @Path("getpublicmessage/{maxcount}")
+  @Produces(MediaType.APPLICATION_JSON)
+  public Response getPublicMessage(@PathParam("maxcount") int maxcount) throws Exception {
     CacheControl cacheControl = new CacheControl();
     cacheControl.setNoCache(true);
     cacheControl.setNoStore(true);
-    ForumService forumService = (ForumService) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(ForumService.class);
-    List<Post> list = forumService.getNewPosts(counter) ;
-    List<MessageBean> lastMessages = new ArrayList<MessageBean>() ;
-    if(!list.isEmpty()) {
-      for(Post post : list) {
-        lastMessages.add(new MessageBean(post)) ;
-      }
-    }
-    return Response.ok(new BeanToJsons<MessageBean>(lastMessages), MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
+    BeanToJsons<MessageBean> data = getNewPosts(null, maxcount);
+    return Response.ok(data, MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
   }
 
-
-
   @GET
   @Path("filter/{strIP}")
   @Produces(MediaType.APPLICATION_JSON)
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/ForumService.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/ForumService.java	(revision 69849)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/ForumService.java	(working copy)
@@ -836,12 +836,23 @@
   boolean isAdminRole(String userName) throws Exception;
 
   /**
-   * Select number of lasted public post.
+   * Gets recent public posts limited by number post.
    * 
-   * @param in number number of post
+   * @param number is number of post
+   * @return the list recent public post.
    * @throws Exception the exception
    */
   List<Post> getNewPosts(int number) throws Exception;
+  
+  /**
+   * Gets recent posts for user and limited by number post.
+   * 
+   * @param userName is userId for check permission.
+   * @param number is number of post
+   * @return the list recent post for user.
+   * @throws Exception the exception
+   */
+  List<Post> getRecentPostsForUser(String userName, int number) throws Exception;
 
   NodeIterator search(String queryString) throws Exception;
 
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/Category.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/Category.java	(revision 69849)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/Category.java	(working copy)
@@ -44,12 +44,12 @@
 	private String[] emailNotification;
 	public Category(String id) {
 		this.id = id;
-		userPrivate = new String[] {" "};
-		moderators = new String[] {" "};
+		userPrivate = new String[] {""};
+		moderators = new String[] {""};
 		emailNotification = new String [] {} ;
-		viewer = new String[] {" "};
-		createTopicRole = new String[] {" "};
-		poster = new String[] {" "};
+		viewer = new String[] {""};
+		createTopicRole = new String[] {""};
+		poster = new String[] {""};
 	}
 	public Category(){
 		this(Utils.CATEGORY + IdGenerator.generate());
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/impl/ForumServiceImpl.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/impl/ForumServiceImpl.java	(revision 69849)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/impl/ForumServiceImpl.java	(working copy)
@@ -1022,6 +1022,13 @@
   public List<Post> getNewPosts(int number) throws Exception{
     return storage.getNewPosts(number);
   }
+
+  /**
+   * {@inheritDoc}
+   */
+  public List<Post> getRecentPostsForUser(String userName, int number) throws Exception{
+  	return storage.getRecentPostsForUser(userName, number);
+  }
   
   public NodeIterator search(String queryString) throws Exception {
   	return storage.search(queryString) ;
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/impl/JCRDataStorage.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/impl/JCRDataStorage.java	(revision 69849)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/impl/JCRDataStorage.java	(working copy)
@@ -104,6 +104,7 @@
 import org.exoplatform.forum.service.conf.SendMessageInfo;
 import org.exoplatform.forum.service.conf.StatisticEventListener;
 import org.exoplatform.forum.service.conf.TopicData;
+import org.exoplatform.ks.common.UserHelper;
 import org.exoplatform.ks.common.conf.InitialRSSListener;
 import org.exoplatform.ks.common.conf.RoleRulesPlugin;
 import org.exoplatform.ks.common.jcr.JCRSessionManager;
@@ -118,6 +119,7 @@
 import org.exoplatform.management.jmx.annotations.Property;
 import org.exoplatform.services.jcr.ext.common.SessionProvider;
 import org.exoplatform.services.jcr.impl.core.RepositoryImpl;
+import org.exoplatform.services.jcr.impl.core.query.QueryImpl;
 import org.exoplatform.services.jcr.util.IdGenerator;
 import org.exoplatform.services.log.ExoLogger;
 import org.exoplatform.services.log.Log;
@@ -5538,7 +5540,7 @@
 
 			// If user isn't admin , get all membership of user
 			if(!isAdmin){
-				listOfUser = ForumServiceUtils.getAllGroupAndMembershipOfUser(userId);
+				listOfUser = UserHelper.getAllGroupAndMembershipOfUser(userId);
 				
 				// Get all category & forum that user can view
 				Map<String, List<String>> mapList = getCategoryViewer(categoryHome, listOfUser, listCateIds, listForumIds,"@exo:userPrivate");
@@ -5691,17 +5693,15 @@
 		StringBuilder queryString = new StringBuilder();
 		
 		// select all forum
-		queryString.append(JCR_ROOT).append(categoryHome.getPath()).append("//element(*,exo:forum)");
-		
-		int i = 0;
+		queryString.append(JCR_ROOT).append(categoryHome.getPath()).append("//element(*,exo:forum)[");
 		// where exo:viewer =	'user' -- who belong to the list
+		boolean isOr = false;
 		for (String user : listOfUser) {
-			if(i==0) queryString.append("[(not(@exo:viewer) or @exo:viewer='' or @exo:viewer='").append(user).append("')").append(" or (@exo:moderators='").append(user).append("')");
-			else queryString.append(" or (@exo:viewer='").append(user).append("')").append(" or (@exo:moderators='").append(user).append("')");
-			i = 1;
+		  if(!isOr) queryString.append("(not(@exo:viewer) or @exo:viewer='')");
+			queryString.append(" or (@exo:moderators='").append(user).append("') or ").append("(@exo:viewer='").append(user).append("')");
+			isOr = true;
 		}
-		
-		if(i==1) queryString.append("]");
+		queryString.append("]");
 		Query query = qm.createQuery(queryString.toString(), Query.XPATH);
 		QueryResult result = query.execute();
 		NodeIterator iter = result.getNodes();
@@ -7701,25 +7701,170 @@
 		}finally{sysProvider.close() ;}
 	}
 
+  //get all categories for user can view.
+  private List<String> getCategoriesUserCanview(Node categoryHome, List<String> listOfUser) throws Exception {
+  /*      
+   * cateids = list query cateids = listinput -> public for property (null for view) 
+   * cateids = {cateid} for private --> can not view 
+   * cateids = new array for view --> can not view
+   */
+    List<String> categoryCanView = new ArrayList<String>();
+    Map<String, List<String>> mapPrivate = getCategoryViewer(categoryHome, listOfUser, new ArrayList<String>(), new ArrayList<String>(), "@" + EXO_USER_PRIVATE);
+    // all categoryid public for private user
+    List<String> categoryIds = mapPrivate.get(Utils.CATEGORY);
+    // all categoryid public for Viewer
+    Map<String, List<String>> mapList = getCategoryViewer(categoryHome, listOfUser, null, new ArrayList<String>(), "@" + EXO_VIEWER);
+    List<String> categoryView = mapList.get(Utils.CATEGORY);
+    // user not in restricted audience or can not viewer
+    if (categoryIds.contains("cateId") || (categoryView != null && categoryView.isEmpty())){
+      return null;
+    }
+    if (categoryIds.isEmpty()) {
+      categoryCanView.addAll((categoryView == null ? new ArrayList<String>() : categoryView));
+    } else {
+      for (String string : categoryIds) {
+        if (categoryView == null || categoryView.contains(string)) {
+          categoryCanView.add(string);
+        }
+      }
+    }
+    return categoryCanView;
+  }
 
-	public List<Post> getNewPosts(int number) throws Exception {
-		List<Post> list = null ;
-		SessionProvider sProvider = SessionProvider.createSystemProvider() ;
-		Node forumHomeNode = getForumHomeNode(sProvider) ;
-		QueryManager qm = forumHomeNode.getSession().getWorkspace().getQueryManager();
-		StringBuffer stringBuffer = new StringBuffer();
-		stringBuffer.append(JCR_ROOT).append(forumHomeNode.getPath()).append("//element(*,exo:post) [((@exo:isApproved='true') and (@exo:isHidden='false') and (@exo:isActiveByTopic='true') and (@exo:userPrivate='exoUserPri'))] order by @exo:createdDate descending" );
-		Query query = qm.createQuery(stringBuffer.toString(), Query.XPATH);
-		QueryResult result = query.execute();
-		NodeIterator iter = result.getNodes();
-		int count = 0 ;
-		while(iter.hasNext() && count++ < number){
-			if(list == null) list = new ArrayList<Post>() ;
-			Post p = getPost(iter.nextNode())	;
-			list.add(p) ;
-		}
-		return list;
-	}
+  // check permission for everyone can view the post
+  private boolean postIsPublicByParent(Node postNode) throws Exception {
+    Node node = postNode.getParent();
+    // checking from the topic parent. Check by canView
+    if (!new PropertyReader(node).list(EXO_CAN_VIEW, Collections.EMPTY_LIST).isEmpty())
+      return false;
+    // checking from the forum parent. Check by canView
+    if (!new PropertyReader(node = node.getParent()).list(EXO_VIEWER, Collections.EMPTY_LIST).isEmpty())
+      return false;
+    // checking from the category parent. Check by canView
+    if (!new PropertyReader(node = node.getParent()).list(EXO_VIEWER, Collections.EMPTY_LIST).isEmpty())
+      return false;
+    //  Check by restricted audience  
+    if (!new PropertyReader(node).list(EXO_USER_PRIVATE, Collections.EMPTY_LIST).isEmpty())
+      return false;
+    return true;
+  }
+  // check permssion user can view
+  private boolean checkPermssionCanView(Node postNode, boolean isUserLogin, List<String> categoryCanView, List<String> forumCanView) throws Exception {
+    if(isUserLogin) {
+      String []path = postNode.getPath().split("/");
+      return (categoryCanView.isEmpty() || categoryCanView.contains(path[path.length - 4])) && (forumCanView.isEmpty() || forumCanView.contains(path[path.length - 3]));
+    } else {
+      return postIsPublicByParent(postNode);
+    }
+  }
+  // get post by query.
+  private List<Post> getPostByQuery(Node categoryHome, QueryImpl impl, int number, String userName, boolean isAdmin) throws Exception {
+    List<Post> list = new ArrayList<Post>();
+    List<String> categoryCanView = new ArrayList<String>();
+    List<String> forumCanView = new ArrayList<String>();
+    boolean isUserLogin = false;
+    if (!Utils.isEmpty(userName) && !UserProfile.USER_GUEST.equals(userName)) {
+      isUserLogin = true;
+      if (!isAdmin) {
+        List<String> listOfUser = UserHelper.getAllGroupAndMembershipOfUser(userName);
+        categoryCanView = getCategoriesUserCanview(categoryHome, listOfUser);
+        if (categoryCanView == null){
+          return list;
+        }
+        forumCanView.addAll(getForumUserCanView(categoryHome, listOfUser, new ArrayList<String>()));
+      }
+    }
+
+    int offset = 0, count = 0, limit;
+    QueryResult qr;
+    NodeIterator iter;
+    Node node;
+    while (count < number) {
+      impl.setOffset(offset);
+      limit = number + offset;
+      impl.setLimit(limit);
+      qr = impl.execute();
+      iter = qr.getNodes();
+      if (iter.getSize() <= 0) {
+        return list;
+      }
+      while (iter.hasNext()) {
+        node = iter.nextNode();
+        if (isAdmin || checkPermssionCanView(node, isUserLogin, categoryCanView, forumCanView)) {
+          list.add(getPost(node));
+          count++;
+          if (count == number){
+            break;
+          }
+        }
+      }
+      offset = limit;
+    }
+    return list;
+  }
+
+// the function use to get recent post for user.
+  public List<Post> getRecentPostsForUser(String userName, int number) throws Exception {
+    if (number <= 0){
+      return new ArrayList<Post>();
+    }
+    if (Utils.isEmpty(userName) || UserProfile.USER_GUEST.equals(userName)) {
+      return getNewPosts(number);
+    }
+    List<Post> list = new ArrayList<Post>();
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      boolean isAdmin = isAdminRole(userName);
+      if (!isAdmin) {
+        isAdmin = (new PropertyReader(getUserProfileNode(getUserProfileHome(sProvider), userName)).l(EXO_USER_ROLE, 3) == 0) ? true : false;
+      }
+      Node categoryHome = getCategoryHome(sProvider);
+            
+      StringBuffer stringBuffer = new StringBuffer();
+      stringBuffer.append(JCR_ROOT).append(categoryHome.getPath()).append("//element(*,").append(EXO_POST).append(")[(");
+      if (!isAdmin) stringBuffer.append("(@").append(EXO_IS_APPROVED).append("='true') and (@").append(EXO_IS_HIDDEN).append("='false') and (@")
+                                .append(EXO_IS_ACTIVE_BY_TOPIC).append("='true') and ");
+      stringBuffer.append("(@").append(EXO_USER_PRIVATE).append("='exoUserPri' or @").append(EXO_USER_PRIVATE).append("='").append(userName)
+                  .append("'))]").append(" order by @").append(EXO_CREATED_DATE).append(" descending");
+      
+      QueryManager qm = categoryHome.getSession().getWorkspace().getQueryManager();
+      Query query = qm.createQuery(stringBuffer.toString(), Query.XPATH);
+      // get posts
+      if(query instanceof QueryImpl){
+        list = getPostByQuery(categoryHome, (QueryImpl)query, number, userName, isAdmin);
+      }
+    } catch (Exception e) {
+      log.debug("Failed to get new post.", e);
+    } finally {
+      sProvider.close();
+    }
+    return list;
+  }
+
+//the function use to get recent post for everyone.  
+  public List<Post> getNewPosts(int number) throws Exception {
+    List<Post> list = new ArrayList<Post>();
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      Node categoryHome = getCategoryHome(sProvider);
+      QueryManager qm = categoryHome.getSession().getWorkspace().getQueryManager();
+      StringBuffer stringBuffer = new StringBuffer();
+      stringBuffer.append(JCR_ROOT).append(categoryHome.getPath()).append("//element(*,").append(EXO_POST)
+                  .append(") [((@").append(EXO_IS_APPROVED).append("='true') and (@").append(EXO_IS_HIDDEN).append("='false') and (@")
+                  .append(EXO_IS_ACTIVE_BY_TOPIC).append("='true') and (@").append(EXO_USER_PRIVATE).append("='exoUserPri'))] order by @")
+                  .append(EXO_CREATED_DATE).append(" descending");
+      Query query = qm.createQuery(stringBuffer.toString(), Query.XPATH);
+      // get posts
+      if(query instanceof QueryImpl){
+        list = getPostByQuery(categoryHome, (QueryImpl)query, number, "", false);
+      }
+    } catch (Exception e) {
+      log.debug("Failed to get new post.", e);
+    } finally {
+      sProvider.close();
+    }
+    return list;
+  }
 	
 	public boolean deleteUserProfile(String userId) throws Exception {
 		SessionProvider sProvider = SessionProvider.createSystemProvider();
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/DataStorage.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/DataStorage.java	(revision 69849)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/DataStorage.java	(working copy)
@@ -406,6 +406,7 @@
   String getLatestUser() throws Exception;
   
   List<Post> getNewPosts(int number) throws Exception;
+  List<Post> getRecentPostsForUser(String userName, int number) throws Exception;
 
   Map<String, String> getServerConfig();
 
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/Forum.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/Forum.java	(revision 69849)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/Forum.java	(working copy)
@@ -58,10 +58,10 @@
 	public Forum() {
 		notifyWhenAddTopic = new String[] {};
 		notifyWhenAddPost = new String[] {};
-		viewer = new String[] {};
-		createTopicRole = new String[] {};
-		moderators = new String[] {};
-		poster = new String[] {};
+		viewer = new String[] {""};
+		createTopicRole = new String[] {""};
+		moderators = new String[] {""};
+		poster = new String[] {""};
 		emailNotification = new String[] {};
 		id = Utils.FORUM + IdGenerator.generate() ;
 	}
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/ForumServiceUtils.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/ForumServiceUtils.java	(revision 69849)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/ForumServiceUtils.java	(working copy)
@@ -26,7 +26,6 @@
 
 import org.exoplatform.commons.utils.PageList;
 import org.exoplatform.container.ExoContainerContext;
-import org.exoplatform.ks.common.jcr.JCRSessionManager;
 import org.exoplatform.ks.common.jcr.KSDataLocation;
 import org.exoplatform.ks.common.jcr.SessionManager;
 import org.exoplatform.services.cache.CacheService;
@@ -259,23 +258,24 @@
 		return cacheService.getCacheInstance("org.exoplatform.forum.ForumPermissionsUsers");
 	}
 
-	public static List<String> getAllGroupAndMembershipOfUser(String userId) throws Exception{
+  /**
+  * @deprecated use {@link #org.exoplatform.ks.common.UserHelper.getAllGroupAndMembershipOfUser(String userId)}
+  */
+  public static List<String> getAllGroupAndMembershipOfUser(String userId) throws Exception {
     List<String> listOfUser = new ArrayList<String>();
     listOfUser.add(userId);
     String groupId = "";
-    String type = "";
     Membership membership = null;
 
     OrganizationService organizationService_ = (OrganizationService) ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(OrganizationService.class);
     for (Iterator iterator = organizationService_.getMembershipHandler().findMembershipsByUser(userId).iterator(); iterator.hasNext();) {
-      membership = (Membership)iterator.next();
+      membership = (Membership) iterator.next();
       groupId = membership.getGroupId();
       listOfUser.add(groupId);
-      type = membership.getMembershipType() + ":" + type;
-      listOfUser.add(type);
+      listOfUser.add(membership.getMembershipType() + ":" + groupId);
     }
-		return listOfUser;
-	}
+    return listOfUser;
+  }
 	
 	public static void reparePermissions(Node node, String owner) throws Exception {
 		ExtendedNode extNode = (ExtendedNode)node ;
Index: eXoApplication/forum/webapp/src/test/java/org/exoplatform/forum/service/FakeForumService.java
===================================================================
--- eXoApplication/forum/webapp/src/test/java/org/exoplatform/forum/service/FakeForumService.java	(revision 69849)
+++ eXoApplication/forum/webapp/src/test/java/org/exoplatform/forum/service/FakeForumService.java	(working copy)
@@ -751,4 +751,9 @@
 		return null;
 	}
 
+	@Override
+	public List<Post> getRecentPostsForUser(String userName, int number) throws Exception {
+		return null;
+	}
+
 }
