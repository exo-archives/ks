Index: eXoApplication/poll/service/src/test/java/org/exoplatform/poll/service/TestUtils.java
===================================================================
--- eXoApplication/poll/service/src/test/java/org/exoplatform/poll/service/TestUtils.java	(revision 0)
+++ eXoApplication/poll/service/src/test/java/org/exoplatform/poll/service/TestUtils.java	(revision 0)
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2003-2011 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.poll.service;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import junit.framework.TestCase;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : Vu Duy Tu
+ *          tu.duy@exoplatform.com
+ * Apr 28, 2011  
+ */
+public class TestUtils extends TestCase {
+  public TestUtils() {
+    super();
+  }
+
+  protected void setUp() throws Exception {
+    super.setUp();
+  }
+
+  public void testIsEmpty() {
+    assertEquals(true, Utils.isEmpty(null));
+    assertEquals(true, Utils.isEmpty(""));
+    assertEquals(true, Utils.isEmpty(" "));
+    assertEquals(false, Utils.isEmpty("abc"));
+  }
+
+  public void testIsListEmpty() {
+    List<String> list = null;
+    assertEquals(true, Utils.isListEmpty(list));
+    list = new ArrayList<String>();
+    assertEquals(true, Utils.isListEmpty(list));
+    list.add("");
+    list.add(" ");
+    list.add("");
+    assertEquals(true, Utils.isListEmpty(list));
+    list.add("");
+    list.add("foo");
+    list.add("");
+    assertEquals(false, Utils.isListEmpty(list));
+  }
+
+}
Index: eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/Utils.java
===================================================================
--- eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/Utils.java	(revision 0)
+++ eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/Utils.java	(revision 0)
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2003-2011 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.poll.service;
+
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+import java.util.List;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : Vu Duy Tu
+ *          tu.duy@exoplatform.com
+ * Apr 28, 2011  
+ */
+public class Utils {
+
+  public static Calendar getGreenwichMeanTime() {
+    Calendar calendar = GregorianCalendar.getInstance();
+    calendar.setLenient(false);
+    int gmtoffset = calendar.get(Calendar.DST_OFFSET) + calendar.get(Calendar.ZONE_OFFSET);
+    calendar.setTimeInMillis(System.currentTimeMillis() - gmtoffset);
+    return calendar;
+  }
+
+  public static boolean isEmpty(String s) {
+    return (s == null || s.trim().length() <= 0) ? true : false;
+  }
+
+  public static boolean isListEmpty(List<String> list) {
+    if (list == null || list.size() == 0) {
+      return true;
+    }
+    for (String string : list) {
+      if (!isEmpty(string)) {
+        return false;
+      }
+    }
+    return true;
+  }
+}
Index: eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/impl/PollServiceImpl.java
===================================================================
--- eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/impl/PollServiceImpl.java	(revision 68901)
+++ eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/impl/PollServiceImpl.java	(working copy)
@@ -21,13 +21,11 @@
 
 import org.exoplatform.container.xml.InitParams;
 import org.exoplatform.ks.common.jcr.KSDataLocation;
-import org.exoplatform.ks.common.jcr.SessionManager;
 import org.exoplatform.management.jmx.annotations.NameTemplate;
 import org.exoplatform.management.jmx.annotations.Property;
 import org.exoplatform.poll.service.Poll;
 import org.exoplatform.poll.service.PollService;
 import org.exoplatform.poll.service.PollSummary;
-import org.exoplatform.services.jcr.RepositoryService;
 import org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator;
 import org.picocontainer.Startable;
 
@@ -35,11 +33,9 @@
 public class PollServiceImpl implements Startable, PollService {
 	private JCRDataStorage            storage_;
 	private KSDataLocation dataLocator;
-	private SessionManager sessionManager;
 	
   public PollServiceImpl(InitParams params, KSDataLocation locator, NodeHierarchyCreator nodeHierarchyCreator) throws Exception {
   	this.dataLocator = locator;
-  	this.sessionManager = dataLocator.getSessionManager();
   	storage_ = new JCRDataStorage(nodeHierarchyCreator, dataLocator);
   }
   
@@ -71,6 +67,10 @@
 		return storage_.getPagePoll();
 	}
 
+  public boolean hasPermissionInForum(String pollPath, List<String> allInfoOfUser) throws Exception {
+    return storage_.hasPermissionInForum(pollPath, allInfoOfUser);
+  }
+	
 	public PollSummary getPollSummary(List<String> groupOfUser) throws Exception {
 		return storage_.getPollSummary(groupOfUser);
 	}
Index: eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/impl/JCRDataStorage.java
===================================================================
--- eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/impl/JCRDataStorage.java	(revision 68901)
+++ eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/impl/JCRDataStorage.java	(working copy)
@@ -17,16 +17,15 @@
 package org.exoplatform.poll.service.impl;
 
 import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.GregorianCalendar;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import javax.jcr.Node;
 import javax.jcr.NodeIterator;
 import javax.jcr.PathNotFoundException;
 import javax.jcr.RepositoryException;
 import javax.jcr.Session;
-import javax.jcr.Value;
 import javax.jcr.query.Query;
 import javax.jcr.query.QueryManager;
 import javax.jcr.query.QueryResult;
@@ -37,6 +36,7 @@
 import org.exoplatform.poll.service.DataStorage;
 import org.exoplatform.poll.service.Poll;
 import org.exoplatform.poll.service.PollSummary;
+import org.exoplatform.poll.service.Utils;
 import org.exoplatform.services.jcr.ext.common.SessionProvider;
 import org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator;
 import org.exoplatform.services.log.ExoLogger;
@@ -177,46 +177,143 @@
 		return result.getNodes();
 	}
 	
-	public PollSummary getPollSummary(List<String> groupOfUser) throws Exception {
-		SessionProvider sProvider = SessionProvider.createSystemProvider();
-		PollSummary poll = new PollSummary();
-		try {
-			NodeIterator iter = getIterNodePoll(sProvider);
-			List<String> pollId = new ArrayList<String>();
-			List<String> pollName = new ArrayList<String>();
-			List<String> groupPrivate = new ArrayList<String>();
-			String path;
-			boolean isAdd = false;
-			while (iter.hasNext()) {
-				Node node = iter.nextNode();
-				path = node.getPath();
-				if(path.indexOf(APPLICATION_DATA) > 0 && groupOfUser != null){
-					isAdd = false;
-					for (String group : groupOfUser) {
-						if(group.indexOf(path.substring(path.indexOf(GROUPS + "/") + GROUPS.length(), path.indexOf("/" + APPLICATION_DATA))) == 0){
-							isAdd = true;
-							break;
-						}
-					}
-					if(!isAdd) continue;
-				}
-				pollId.add(node.getName());
-				pollName.add(node.getProperty(EXO_QUESTION).getString());
-				groupPrivate.add(path);
-			}
-			poll.setPollId(pollId);
-			poll.setPollName(pollName);
-			poll.setGroupPrivate(groupPrivate);
-		} catch (Exception e) {
-			log.error("Failed to get poll summary", e);
-		} finally {
-			sProvider.close();
-		}
-		return poll;
-		
-	}
+  
+  private long getUserRoleOfForum(SessionProvider sProvider, String userName) {
+    if (Utils.isEmpty(userName))
+      return 3;
+    try {
+      String userPatch = "/" + dataLocator.getUserProfilesLocation() + "/" + userName;
+      Node userNode = getNodeByPath(userPatch, sProvider);
+      return new PropertyReader(userNode).l("exo:userRole", 3);
+    } catch (Exception e) {
+      log.debug("Failed to get user role of forum.", e);
+    }
+    return 3;
+  }
+
+  public boolean hasPermissionInForum(String pollPath, List<String> allInfoOfUser) throws Exception {
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    try {
+      Node pollNode = getNodeByPath(pollPath, sProvider);
+      return hasPermissionInForum(sProvider, pollNode, allInfoOfUser);
+    } catch (Exception e) {
+      log.error("Failed to checking has permission in poll from forum", e);
+    } finally {
+      sProvider.close();
+    }
+    return false;
+  }
+
+  private boolean hasPermissionInForum(SessionProvider sProvider, Node pollNode, List<String> allInfoOfUser) throws Exception {
+    try {
+      long userRole = getUserRoleOfForum(sProvider, (allInfoOfUser.size() > 0) ? allInfoOfUser.get(0) : "");
+      // check for administrators. If is admin --> return true;
+      if (userRole == 0)
+        return true;
+      Node topicNode = pollNode.getParent();
+      Node forumNode = topicNode.getParent();
+      Node categoryNode = forumNode.getParent();
+      PropertyReader reader = new PropertyReader(topicNode);
+
+      // permission in topic
+      Set<String> viewers = reader.set("exo:canView", new HashSet<String>());
+      // user's permission of the topic content this poll.
+      boolean hasNotPremissionByTopic = (reader.bool("exo:isClosed") || !reader.bool("exo:isApproved") || reader.bool("exo:isWaiting") || !reader.bool("exo:isActive"));
+
+      // permission in forum
+      reader = new PropertyReader(forumNode);
+      viewers.addAll(reader.set("exo:viewer", new HashSet<String>()));
+      // forum is closed --> return false;
+      if (reader.bool("exo:isClosed"))
+        return false;
+      // check for moderators
+      if (userRole == 1) {
+        List<String> moderators = reader.list("exo:moderators", new ArrayList<String>());
+        if (!Utils.isListEmpty(allInfoOfUser)) {
+          for (String string : moderators) {
+            // user's moderator of the forum content the poll.
+            if (allInfoOfUser.contains(string))
+              return true;
+          }
+        }
+      }
+      // checking when user has not moderator of the forum content the poll.
+      if (hasNotPremissionByTopic)
+        return false;
+
+      // permission in category
+      reader = new PropertyReader(categoryNode);
+      // check viewer
+      viewers.addAll(reader.set("exo:viewer", new HashSet<String>()));
+      // check user private.
+      viewers.addAll(reader.set("exo:userPrivate", new HashSet<String>()));
+      // if viewer is empty then poll public.
+      if (Utils.isListEmpty(new ArrayList<String>(viewers))) {
+        return true;
+      }
+      // if user login and viewer list not empty.
+      if (!Utils.isListEmpty(allInfoOfUser)) {
+        for (String string : viewers) {
+          if (allInfoOfUser.contains(string.trim()))
+            return true;
+        }
+      }
+    } catch (Exception e) {
+      log.debug("Failed to checking has premission viewing poll add in forum.");
+    }
+    return false;
+  }
+
+  public PollSummary getPollSummary(List<String> allInfoOfUser) throws Exception {
+    SessionProvider sProvider = SessionProvider.createSystemProvider();
+    PollSummary poll = new PollSummary();
+    try {
+      NodeIterator iter = getIterNodePoll(sProvider);
+      List<String> pollId = new ArrayList<String>();
+      List<String> pollName = new ArrayList<String>();
+      List<String> groupPrivate = new ArrayList<String>();
+      String path;
+      boolean isAdd = false;
+      while (iter.hasNext()) {
+        Node node = iter.nextNode();
+        path = node.getPath();
+        isAdd = false;
+        // check permission for poll of forum
+        if (path.indexOf(dataLocator.getForumCategoriesLocation()) >= 0) {
+          isAdd = hasPermissionInForum(sProvider, node, allInfoOfUser);
+        } else {
+          // check permission for poll private.
+          if (path.indexOf(APPLICATION_DATA) > 0) {
+            path = path.substring(path.indexOf(GROUPS + "/") + GROUPS.length(), path.indexOf("/" + APPLICATION_DATA));
+            for (String group : allInfoOfUser) {
+              if (group.indexOf(":") < 0) {
+                if (group.indexOf(path) == 0) {
+                  isAdd = true;
+                  break;
+                }
+              }
+            }
+          } else {
+            isAdd = true;
+          }
+        }
+        if (isAdd) {
+          pollId.add(node.getName());
+          pollName.add(node.getProperty(EXO_QUESTION).getString());
+          groupPrivate.add(path);
+        }
+      }
+      poll.setPollId(pollId);
+      poll.setPollName(pollName);
+      poll.setGroupPrivate(groupPrivate);
+    } catch (Exception e) {
+      log.error("Failed to get poll summary", e);
+    } finally {
+      sProvider.close();
+    }
+    return poll;
+  }
 	
-	
 	public Poll removePoll(String pollId) throws Exception {
 		SessionProvider sProvider = SessionProvider.createSystemProvider();
 		Poll poll = null;
@@ -273,7 +370,7 @@
 				pollNode.setProperty(EXO_VOTE, poll.getVote());
 				pollNode.setProperty(EXO_USER_VOTE, poll.getUserVote());
 				try {
-					pollNode.setProperty(EXO_LASTVOTE, getGreenwichMeanTime());// new property 2.0 to 2.1
+					pollNode.setProperty(EXO_LASTVOTE, Utils.getGreenwichMeanTime());// new property 2.0 to 2.1
 				} catch (RepositoryException e) {
 				}
 			} else {
@@ -283,13 +380,13 @@
 					pollNode.setProperty(EXO_ID, pollId);
 					pollNode.setProperty(EXO_OWNER, poll.getOwner());
 					pollNode.setProperty(EXO_USER_VOTE, new String[] {});
-					pollNode.setProperty(EXO_CREATED_DATE, getGreenwichMeanTime());
-					pollNode.setProperty(EXO_MODIFIED_DATE, getGreenwichMeanTime());
+					pollNode.setProperty(EXO_CREATED_DATE, Utils.getGreenwichMeanTime());
+					pollNode.setProperty(EXO_MODIFIED_DATE, Utils.getGreenwichMeanTime());
 					if(parentNode.hasProperty(EXO_IS_POLL)){
 						parentNode.setProperty(EXO_IS_POLL, true);
 					}
 				} else {
-					if(!isEmpty(poll.getOldParentPath()) && !parentNode.getPath().equals(poll.getOldParentPath())) {
+					if(!Utils.isEmpty(poll.getOldParentPath()) && !parentNode.getPath().equals(poll.getOldParentPath())) {
 						Session session = getSession(sProvider);
 						session.move(poll.getOldParentPath()+"/"+pollId, parentNode.getPath()+"/"+pollId);
 						session.save();
@@ -305,7 +402,7 @@
 				
 				if (!isNew) {
 					if(pollNode.getProperty(EXO_TIME_OUT).getLong() != poll.getTimeOut())
-						pollNode.setProperty(EXO_MODIFIED_DATE, getGreenwichMeanTime());
+						pollNode.setProperty(EXO_MODIFIED_DATE, Utils.getGreenwichMeanTime());
 				}
 				pollNode.setProperty(EXO_TIME_OUT, poll.getTimeOut());
 				pollNode.setProperty(EXO_QUESTION, poll.getQuestion());
@@ -331,7 +428,7 @@
 			Node pollNode = appNode.getNode(poll.getId());
 			pollNode.setProperty(EXO_IS_CLOSED, poll.getIsClosed());
 			if (poll.getTimeOut() == 0) {
-				pollNode.setProperty(EXO_MODIFIED_DATE, getGreenwichMeanTime());
+				pollNode.setProperty(EXO_MODIFIED_DATE, Utils.getGreenwichMeanTime());
 				pollNode.setProperty(EXO_TIME_OUT, 0);
 			}
 			appNode.save();
@@ -341,40 +438,4 @@
 			sProvider.close();
 		}
 	}
-	
-	public static Calendar getGreenwichMeanTime() {
-		Calendar calendar = GregorianCalendar.getInstance();
-		calendar.setLenient(false);
-		int gmtoffset = calendar.get(Calendar.DST_OFFSET) + calendar.get(Calendar.ZONE_OFFSET);
-		calendar.setTimeInMillis(System.currentTimeMillis() - gmtoffset);
-		return calendar;
-	}
-	
-	public static boolean isEmpty(String s) {
-		return (s == null || s.trim().length() <= 0)?true:false;
-  }
-	
-	public String[] valuesToArray(Value[] Val) throws Exception {
-    if (Val.length < 1) return new String[] {};
-    List<String> list = new ArrayList<String>();
-    String s;
-    for (int i = 0; i < Val.length; ++i) {
-    	 s = Val[i].getString();
-    	 if(!isEmpty(s)) list.add(s);
-    }
-    return list.toArray(new String[list.size()]);
-  }
-	
-	public List<String> valuesToList(Value[] values) throws Exception {
-    List<String> list = new ArrayList<String>();
-    if (values.length < 1) return list;
-    String s;
-    for (int i = 0; i < values.length; ++i) {
-			s = values[i].getString();
-			if (!isEmpty(s)) list.add(s);
-    }
-    return list;
-  }
-
-  
 }
Index: eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/PollService.java
===================================================================
--- eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/PollService.java	(revision 68901)
+++ eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/PollService.java	(working copy)
@@ -69,5 +69,15 @@
   
   public List<Poll>getPagePoll() throws Exception ;
   
+  /**
+   * check has permission of user viewer the poll in the forum.
+   * 
+   * @param allInfoOfUser user, group and membership of the user.
+   * @param pollPath the path of the poll.
+   * @return boolean
+   * @throws Exception the exception
+   */
+  public boolean hasPermissionInForum(String pollPath, List<String> allInfoOfUser) throws Exception;
+
   public PollSummary getPollSummary(List<String> groupOfUser) throws Exception ;
 }
Index: eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/ws/PollWebservice.java
===================================================================
--- eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/ws/PollWebservice.java	(revision 68901)
+++ eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/ws/PollWebservice.java	(working copy)
@@ -4,7 +4,9 @@
 package org.exoplatform.poll.service.ws;
 import java.util.ArrayList;
 import java.util.Date;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
@@ -19,7 +21,7 @@
 import org.exoplatform.poll.service.Poll;
 import org.exoplatform.poll.service.PollService;
 import org.exoplatform.poll.service.PollSummary;
-import org.exoplatform.poll.service.impl.JCRDataStorage;
+import org.exoplatform.poll.service.Utils;
 import org.exoplatform.poll.service.impl.PollNodeTypes;
 import org.exoplatform.portal.config.UserACL;
 import org.exoplatform.services.log.ExoLogger;
@@ -27,12 +29,10 @@
 import org.exoplatform.services.rest.resource.ResourceContainer;
 import org.exoplatform.services.security.ConversationState;
 import org.exoplatform.services.security.Identity;
+import org.exoplatform.services.security.MembershipEntry;
 
-
-
-
 /**
- * @author Uoc Nguyen
+ * @author Vu Duy Tu
  * 
  */
 @Path("private/ks/poll")
@@ -49,36 +49,40 @@
     cacheControl.setNoCache(true);
     cacheControl.setNoStore(true);
     PollService pollService = (PollService)ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(PollService.class);
-    if(!JCRDataStorage.isEmpty(pollId)) {
-	    try {
-	    	Poll poll = pollService.getPoll(pollId);
-	    	if(poll != null) {
-//	    		poll.setIsAdmin(String.valueOf(hasGroupAdminOfGatein()));
-	    		poll.setIsAdmin("true");
-	    		String group = poll.getParentPath();
-	    		if(group.indexOf(PollNodeTypes.APPLICATION_DATA) > 0 && poll.getIsAdmin().equals("false")) {
-	    			group = group.substring(group.indexOf(PollNodeTypes.GROUPS + "/") + PollNodeTypes.GROUPS.length(), group.indexOf("/" + PollNodeTypes.APPLICATION_DATA));
-	    			boolean hasPerminsion = false;
-						for (String group_ : getGroupsOfUser()) {
-							if(group_.indexOf(group) == 0){
-								hasPerminsion = true;
-								break;
-							}
-						}
-						if(!hasPerminsion) {
-	    				poll = new Poll();
-	    				poll.setId("DoNotPermission");
-	    				return Response.ok(poll, MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
-	    			}
-	    		}
-	    		poll.setVotes();
-	    		poll.setInfoVote();
-	    		poll.setShowVote(isGuestPermission(poll));
-		      return Response.ok(poll, MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
-	    	}
-	    } catch (Exception e) {
-	    	log.error("Can not get poll by id: " + pollId, e);
-	    }
+    if (!Utils.isEmpty(pollId)) {
+      try {
+        Poll poll = pollService.getPoll(pollId);
+        if (poll != null) {
+          // poll.setIsAdmin(String.valueOf(hasGroupAdminOfGatein()));
+          poll.setIsAdmin("true");
+          String group = poll.getParentPath();
+          boolean hasPerminsion = false;
+          if (group.indexOf(PollNodeTypes.APPLICATION_DATA) > 0 && poll.getIsAdmin().equals("false")) {
+            group = group.substring(group.indexOf(PollNodeTypes.GROUPS + "/") + PollNodeTypes.GROUPS.length(), group.indexOf("/" + PollNodeTypes.APPLICATION_DATA));
+            for (String group_ : getGroupsOfUser()) {
+              if (group_.indexOf(group) >= 0) {
+                hasPerminsion = true;
+                break;
+              }
+            }
+          } else if(group.indexOf(PollNodeTypes.POLLS) < 0){
+            hasPerminsion = pollService.hasPermissionInForum(group+"/"+poll.getId(), getAllGroupAndMembershipOfUser()) ;
+          } else {
+            hasPerminsion = true;
+          }
+          if (!hasPerminsion) {
+            poll = new Poll();
+            poll.setId("DoNotPermission");
+            return Response.ok(poll, MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
+          }
+          poll.setVotes();
+          poll.setInfoVote();
+          poll.setShowVote(isGuestPermission(poll));
+          return Response.ok(poll, MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
+        }
+      } catch (Exception e) {
+        log.error("Can not get poll by id: " + pollId, e);
+      }
     }
     PollSummary pollSummary = new PollSummary();
     /*if(hasGroupAdminOfGatein()) {
@@ -87,7 +91,7 @@
     } else {
     	pollSummary.setId("DoNotPermission");
     }*/
-    pollSummary = pollService.getPollSummary(getGroupsOfUser());
+    pollSummary = pollService.getPollSummary(getAllGroupAndMembershipOfUser());
     pollSummary.setIsAdmin("true");
     return Response.ok(pollSummary, MediaType.APPLICATION_JSON).cacheControl(cacheControl).build();
   }
@@ -99,7 +103,7 @@
   	CacheControl cacheControl = new CacheControl();
   	cacheControl.setNoCache(true);
   	cacheControl.setNoStore(true);
-  	if(!JCRDataStorage.isEmpty(pollId) && !JCRDataStorage.isEmpty(indexVote)) {
+  	if(!Utils.isEmpty(pollId) && !Utils.isEmpty(indexVote)) {
   		try {
   			PollService pollService = (PollService)ExoContainerContext.getCurrentContainer().getComponentInstanceOfType(PollService.class);
   			Poll poll = pollService.getPoll(pollId.trim());
@@ -187,7 +191,7 @@
 			String[] posHaveVoted = (setUserVote[pos].substring(setUserVote[pos].indexOf(":"))).split(":") ;
 			setUserVote[pos] = setUserVote[pos].substring(0, setUserVote[pos].indexOf(":")) ;
 			for(String posVoted : posHaveVoted) {
-				if(JCRDataStorage.isEmpty(posVoted)) {
+				if(Utils.isEmpty(posVoted)) {
 					doubleVote[Integer.parseInt(posVoted)] -= 1 ;
 					totalVote -= 1 ;
 				}
@@ -220,11 +224,11 @@
 	private boolean isGuestPermission(Poll poll_) throws Exception {
 		if(poll_.getIsClosed()) return true ;
 		if(poll_.getTimeOut() > 0) {
-			Date today = JCRDataStorage.getGreenwichMeanTime().getTime() ;
+			Date today = Utils.getGreenwichMeanTime().getTime() ;
 			if((today.getTime() - poll_.getCreatedDate().getTime()) >= poll_.getTimeOut()*86400000) return true ;
 		}
 		String username = getUserId() ;
-		if(JCRDataStorage.isEmpty(username)) return true ;
+		if(Utils.isEmpty(username)) return true ;
 		String[] userVotes = poll_.getUserVote() ;
 		for (String string : userVotes) {
 			string = string.substring(0, string.indexOf(":")) ;
@@ -256,6 +260,26 @@
 		} catch (Exception e) {}
 		return username;
   }
+  
+  private List<String> getAllGroupAndMembershipOfUser() {
+    List<String> listOfUser = new ArrayList<String>();
+    try {
+      Identity identity = ConversationState.getCurrent().getIdentity();
+      listOfUser.add(identity.getUserId());
+      Set<String> list = new HashSet<String>();
+      list.addAll(identity.getGroups());
+      for (MembershipEntry membership : identity.getMemberships()) {
+        String value = membership.getGroup();
+        list.add(value); // its groups
+        value = membership.getMembershipType() + ":" + value;
+        list.add(value);
+      }
+      listOfUser.addAll(list);
+    } catch (Exception e) {
+      log.warn("Failed to add all info of user.");
+    }
+    return listOfUser;
+  }
 
   private List<String> getGroupsOfUser() {
   	try {
Index: eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/DataStorage.java
===================================================================
--- eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/DataStorage.java	(revision 68901)
+++ eXoApplication/poll/service/src/main/java/org/exoplatform/poll/service/DataStorage.java	(working copy)
@@ -14,5 +14,8 @@
   void setClosedPoll(Poll poll) throws Exception;
   
   List<Poll>getPagePoll() throws Exception;
+  
+  boolean hasPermissionInForum(String pollPath, List<String> allInfoOfUser) throws Exception;
+  
   PollSummary getPollSummary(List<String> groupOfUser) throws Exception;
 }
