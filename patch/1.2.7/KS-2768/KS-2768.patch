Index: eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/impl/JCRDataStorage.java
===================================================================
--- eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/impl/JCRDataStorage.java	(revision 61892)
+++ eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/impl/JCRDataStorage.java	(working copy)
@@ -359,18 +359,24 @@
 	}*/
 	
 	public NodeIterator getQuestionsIterator() throws Exception {
-		SessionProvider sProvider = SessionProvider.createSystemProvider() ;
+		SessionProvider sProvider = SessionProvider.createSystemProvider();
 		try {
-			Node faqHome = getFAQServiceHome(sProvider) ;
-			StringBuffer queryString = new StringBuffer("/jcr:root").append(faqHome.getPath()).append("//element(*,exo:faqQuestion)");
-			QueryManager qm = faqHome.getSession().getWorkspace().getQueryManager();
-			Query query = qm.createQuery(queryString.toString(), Query.XPATH);
-			QueryResult result = query.execute();
-			return result.getNodes() ;
-		}catch(Exception e) {
-			log.debug("Failed to get questions iterator.", e);
-		}finally {sProvider.close() ;}
-		return null ;
+			Node faqHome = getFAQServiceHome(sProvider);
+			return getQuestionsIterator(faqHome, "", true);
+		} catch (Exception e) {
+			log.error("Failed to get question iterator: ", e);
+		} finally {
+			sProvider.close();
+		}
+		return null;
+	}
+
+	private NodeIterator getQuestionsIterator(Node parentNode, String strQuery, boolean isAll) throws Exception {
+		StringBuffer queryString = new StringBuffer("/jcr:root").append(parentNode.getPath()).append((isAll)?"//":"/").append("element(*,exo:faqQuestion)").append(strQuery);
+		QueryManager qm = parentNode.getSession().getWorkspace().getQueryManager();
+		Query query = qm.createQuery(queryString.toString(), Query.XPATH);
+		QueryResult result = query.execute();
+		return result.getNodes();
 	}	
 	
 	protected void addRSSListener(Node node) throws Exception{
@@ -3328,7 +3334,7 @@
 		try{
 			Node node = getFAQServiceHome(sProvider).getNode(id) ;
 			if(node.isNodeType("exo:faqQuestion")) node = node.getParent().getParent() ;
-			return node.getProperty("exo:isModerateAnswers").getBoolean() ;
+			return node.hasProperty("exo:isModerateAnswers")?node.getProperty("exo:isModerateAnswers").getBoolean():false ;
 		}catch(Exception e) {
 			log.error("Failed to check moderate ansers",e);
 		}finally { sProvider.close() ;}
@@ -3338,6 +3344,7 @@
 	public boolean isModerateQuestion(String id) throws Exception {
 		SessionProvider sProvider = SessionProvider.createSystemProvider() ;
 		try{
+			id = (id == null || id.length() == 0)?Utils.CATEGORY_HOME:id;
 			Node node = getFAQServiceHome(sProvider).getNode(id) ;
 			if(node.isNodeType("exo:faqQuestion")) node = node.getParent().getParent() ;
 			return new PropertyReader(node).bool("exo:isModerateQuestions", false);
@@ -3537,11 +3544,20 @@
 		return subList ;
 	}
 	
+	private NodeIterator getNodeIteratorAnswerAccess(Node answerHome) throws Exception {
+		StringBuffer queryString = new StringBuffer("/jcr:root").append(answerHome.getPath()).append("/element(*,exo:answer)[@exo:approveResponses='true' and @exo:activateResponses='true']");
+		QueryManager qm = answerHome.getSession().getWorkspace().getQueryManager();
+		Query query = qm.createQuery(queryString.toString(), Query.XPATH);
+		QueryResult result = query.execute();
+		return result.getNodes();
+	}
+	
 	private List<QuestionInfo> getQuestionInfo(Node categoryNode) throws Exception {
 		List<QuestionInfo> questionInfoList = new ArrayList<QuestionInfo>() ;
 		if(categoryNode.hasNode(Utils.QUESTION_HOME)) {			
 			QuestionInfo questionInfo ;
-			NodeIterator iter = categoryNode.getNode(Utils.QUESTION_HOME).getNodes() ;
+			String strQuery = "[@exo:isActivated='true' and @exo:isApproved='true']";
+			NodeIterator iter = getQuestionsIterator(categoryNode.getNode(Utils.QUESTION_HOME), strQuery, false);
 			Node question ;
 			while(iter.hasNext()) {
 				question = iter.nextNode() ;
@@ -3551,7 +3567,7 @@
 					questionInfo.setId(question.getName()) ;
 					if(question.hasNode(Utils.ANSWER_HOME)) {
 						List<String> answers = new ArrayList<String> () ;
-						NodeIterator ansIter = question.getNode(Utils.ANSWER_HOME).getNodes() ;
+						NodeIterator ansIter = getNodeIteratorAnswerAccess(question.getNode(Utils.ANSWER_HOME)) ;
 						while(ansIter.hasNext()) {
 							answers.add(ansIter.nextNode().getProperty("exo:responses").getString()) ;
 						}
