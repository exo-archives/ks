Index: eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/Question.java
===================================================================
--- eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/Question.java	(revision 79503)
+++ eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/Question.java	(working copy)
@@ -30,6 +30,8 @@
  */
 
 public class Question {
+
+  public static final String QUESTION_ID = "Question";
   
   /** The id. */
   private String id ;
Index: eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/Category.java
===================================================================
--- eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/Category.java	(revision 79503)
+++ eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/Category.java	(working copy)
@@ -32,6 +32,7 @@
  * Jul 11, 2007  
  */
 public class Category {
+  public static final String CATEGORY_ID = "Category";
   private String id ;
   private long index;
   private String name ;
@@ -50,7 +51,7 @@
    * Class constructor specifying id of object is created
    */
   public Category() {
-    id = "Category" + IdGenerator.generate() ;
+    id = CATEGORY_ID + IdGenerator.generate() ;
     //userPrivate = new String[] {" "};
   }
   
Index: eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/impl/JCRDataStorage.java
===================================================================
--- eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/impl/JCRDataStorage.java	(revision 79503)
+++ eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/impl/JCRDataStorage.java	(working copy)
@@ -1065,7 +1065,7 @@
     if(isNew){
       GregorianCalendar cal = new GregorianCalendar() ;
       cal.setTime(question.getCreatedDate()) ;
-      questionNode.setProperty("exo:createdDate", cal.getInstance()) ;
+      questionNode.setProperty("exo:createdDate", cal) ;
       questionNode.setProperty("exo:language", question.getLanguage()) ;
     } 
     String catId = question.getCategoryId() ;
@@ -2297,9 +2297,11 @@
   }
 
 	private boolean hasAnswerInQuestion(QueryManager qm, Node questionNode) throws Exception {
-		StringBuffer queryString = new StringBuffer("/jcr:root").append(questionNode.getPath()).append("//element(*,exo:answer)[(@exo:approveResponses='true') and (@exo:activateResponses='true')]");
-		Query query = qm.createQuery(queryString.toString(), Query.XPATH);
-		QueryResult result = query.execute();
+		StringBuffer queryString = new StringBuffer("/jcr:root").append(questionNode.getPath()).append("//element(*,exo:answer)[(@exo:approveResponses='true') and (@exo:activateResponses='true')] order by @exo:dateResponse ascending");
+	    QueryImpl impl = (QueryImpl) qm.createQuery(queryString.toString(), Query.XPATH);
+	    impl.setOffset(0);
+	    impl.setLimit(1);
+	    QueryResult result = impl.execute();
 		NodeIterator iter = result.getNodes();
 		return (iter.getSize() > 0)?true:false;
 	}
Index: eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/Answer.java
===================================================================
--- eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/Answer.java	(revision 79503)
+++ eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/Answer.java	(working copy)
@@ -27,6 +27,7 @@
  * Jan 16, 2009, 9:25:29 AM
  */
 public class Answer {
+	public static final String ANSWER_ID = "Answer";
 	
 	/** The id. */
 	private String id;
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/ForumDataInitializer.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/ForumDataInitializer.java	(revision 79503)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/ForumDataInitializer.java	(working copy)
@@ -1,131 +0,0 @@
-package org.exoplatform.forum.bench;
-
-import java.text.MessageFormat;
-import java.util.List;
-
-import org.exoplatform.container.xml.InitParams;
-import org.exoplatform.forum.service.Category;
-import org.exoplatform.forum.service.Forum;
-import org.exoplatform.forum.service.ForumService;
-import org.exoplatform.forum.service.Post;
-import org.exoplatform.forum.service.Topic;
-import org.exoplatform.services.log.ExoLogger;
-import org.exoplatform.services.log.Log;
-import org.picocontainer.Startable;
-
-public class ForumDataInitializer implements Startable {
-
-	private static Log log = ExoLogger.getLogger(ForumDataInitializer.class);
-	
-	private ForumService forumService;
-	private ForumDataProvider provider;
-	
-	public ForumDataInitializer(InitParams initParams, ForumService forumService,ForumDataProvider provider) {
-
-		this.provider = provider;
-		this.forumService = forumService;
-
-	}
-
-
-
-	public void start() {
-		log.info("Initializing Forum data loader...");
-		try {
-			initCategories();
-		} catch (Exception e) {
-			log.error("Failed to init : ", e);
-		}
-		log.info("Forum data loaded!");
-	}
-
-
-
-	private void initCategories() throws Exception {
-		if (provider.isInitialized()) {
-			log.info("Categories seem to be already initialized. Skipping.");
-			return;
-		}
-		
-		
-		
-		long topicsCount = 0;
-		long forumsCount = 0;
-		long postCount = 0;
-		long categoriesWeight = 0;
-		List<Category> categories = provider.findCategories();
-		long categoriesCount = 0;
-		
-		for (Category category : categories) {
-			forumService.saveCategory( category, true);
-			
-			categoriesCount++;
-			String categoryId = category.getId();
-			List<Forum> forums = provider.findForumsByCategory(categoryId);
-			log.info("Category " + categoriesCount + "/" + categories.size()+" with " +forums.size()+ " forums");			
-			long forumsWeight = 0;
-			forumsCount += forums.size();
-			int forumNum=0;
-			for (Forum forum : forums) {
-		
-				forumService.saveForum(categoryId, forum, true);
-
-				
-				String forumId = forum.getId();
-				long topicsWeight = 0;
-
-				List<Topic> topics = provider.findTopicsByForum(forum);
-				log.info("\tForum "+ (++forumNum) + "/"+ forums.size() + " with " + topics.size()+ " topics");
-				int topicNum = 0;
-				for (Topic topic : topics) {
-		
-					forumService.saveTopic(categoryId, forumId, topic, true, false, "");
-					//log.info("Created topic " + topic.getTopicName());
-					
-					String topicId = topic.getId();
-					List<Post> posts = provider.fingPostsByTopic(topic);
-					//log.info("Initializing new topic with "+ posts.size()+ " posts");
-					postCount += posts.size();
-					long postsWeight = 0;
-					long t1 = System.currentTimeMillis();
-					for (Post post : posts) {
-		
-						forumService.savePost(categoryId, forumId, topicId, post, true, "");
-						long messageWeight = post.getMessage().length()*2; // in bytes
-						postsWeight += messageWeight;
-	
-					}
-					double elapsed = (System.currentTimeMillis() - t1);
-					double rate = ((postsWeight/1024) / (elapsed/1000));
-					String srate = MessageFormat.format("({0,number,#.#} K/s)", rate);
-					log.info("\t\tTopic "+ (++topicNum) + "/" + topics.size() + "\t" + posts.size()+ " posts in "+ elapsed + "ms " + srate  );
-					
-					topicsWeight+=postsWeight;
-	
-				} // end topics loop
-
-				
-				log.info("\t\t "+topics.size()+" topics " +  MessageFormat.format("({0,number,#.#} K)", (topicsWeight/1024)) + " total posts="  + postCount);
-				forumsWeight+= topicsWeight;
-				topicsCount+=topics.size();
-			
-			}
-			log.info("\t"+forums.size()+" forums " +  MessageFormat.format("({0,number,#.#} K)", (forumsWeight/1024)) + " total posts="  + postCount);
-			categoriesWeight+=forumsWeight;
-
-		}
-
-		log.info("INITIALIZED : categories=" + categories.size() + " / forums=" + forumsCount + " / topics=" + topicsCount + " / posts=" + postCount + MessageFormat.format(" ({0,number,#.#} K)", (categoriesWeight/1024)));
-	
-	}
-
-
-
-
-
-	public void stop() {
-		// TODO Auto-generated method stub
-
-	}
-
-}
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/PhpBBForumDataProvider.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/PhpBBForumDataProvider.java	(revision 79503)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/PhpBBForumDataProvider.java	(working copy)
@@ -1,164 +0,0 @@
-package org.exoplatform.forum.bench;
-
-import java.sql.Connection;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.Statement;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-
-import javax.naming.InitialContext;
-import javax.sql.DataSource;
-
-import org.exoplatform.forum.service.Category;
-import org.exoplatform.forum.service.Forum;
-import org.exoplatform.forum.service.Post;
-import org.exoplatform.forum.service.Topic;
-
-public class PhpBBForumDataProvider implements ForumDataProvider {
-	DataSource ds;
-
-	PhpBBForumDataProvider() throws Exception {
-		InitialContext ctx = new InitialContext();
-		this.ds = (DataSource) ctx.lookup("phpBBDS");
-
-	}
-
-	public List<Category> findCategories() {
-		SimpleMapper<Category> mapper = new SimpleMapper<Category>() {
-			public Category mapResult(ResultSet rs) throws SQLException {
-				Category cat = newCategory(rs.getString("cat_title"), rs.getLong("cat_order"));
-				return cat;
-			}
-		};
-		SimpleJDBCTemplate<Category> template = new SimpleJDBCTemplate<Category>(mapper);
-		List<Category> result = template
-				.execute("SELECT * FROM phpbb_categories");
-		return result;
-	}
-
-	protected Category newCategory(String name, long order) {
-
-		Category category = new Category();
-		category.setCategoryName(name);
-		category.setCategoryOrder(order);
-		category.setCreatedDate(new Date());
-		category.setDescription("");
-		category.setModifiedBy("root");
-		category.setModifiedDate(new Date());
-		category.setOwner("root");
-		return category;
-	}
-
-	private interface SimpleMapper<T> {
-		public T mapResult(ResultSet rs) throws SQLException;
-	}
-
-	private class SimpleJDBCTemplate<T> {
-		SimpleMapper<T> mapper;
-
-		public SimpleJDBCTemplate(SimpleMapper<T> mapper) {
-			this.mapper = mapper;
-		}
-
-		public List<T> execute(String query) {
-			List<T> result = new ArrayList<T>();
-			Connection conn = null;
-			try {
-				conn = ds.getConnection();
-				Statement stmt = conn.createStatement();
-				ResultSet rs = stmt.executeQuery(query);
-				while (rs.next()) {
-					T obj = mapper.mapResult(rs);
-					result.add(obj);
-				}
-
-				return result;
-			} catch (Exception e) {
-				throw new RuntimeException(e);
-			} finally {
-				if (conn != null) {
-					try {
-						conn.close();
-					} catch (SQLException e) {
-						// so what ?
-					}
-				}
-			}
-		}
-	}
-
-	public List<Forum> findForumsByCategory(String categoryId) {
-		SimpleMapper<Forum> mapper = new SimpleMapper<Forum>() {
-			public Forum mapResult(ResultSet rs) throws SQLException {
-				Forum forum = newForum(rs.getString("forum_name"), rs.getString("forum_desc"), rs.getInt("forum_order"));
-				return forum;
-			}
-		};
-		SimpleJDBCTemplate<Forum> template = new SimpleJDBCTemplate<Forum>(mapper);
-		List<Forum> result = template.execute("SELECT * FROM phpbb_forums WHERE cat_id=" + categoryId);
-		return result;
-	}
-
-	protected Forum newForum(String name, String desc, int order) {
-		Forum forum = new Forum();
-		forum.setCreatedDate(new Date());
-		forum.setDescription(desc);
-		forum.setForumName(name);
-		forum.setForumOrder(order);
-		forum.setOwner("root");
-		return forum;
-	}
-
-	public List<Post> fingPostsByTopic(Topic topic) {
-		String forumId = topic.getForumId();
-		SimpleMapper<Post> mapper = new SimpleMapper<Post>() {
-			public Post mapResult(ResultSet rs) throws SQLException {
-				Post post = newPost(rs.getString("post_subject"), rs.getString("post_text"));
-				return post;
-			}
-		};
-		SimpleJDBCTemplate<Post> template = new SimpleJDBCTemplate<Post>(mapper);
-		List<Post> result = template.execute("SELECT t.post_subject, t.post_text  FROM phpbb_posts p, phpbb_posts_text t WHERE p.post_id=t.post_id AND p.forum_id=" + forumId);
-		return result;
-	}
-
-	protected Post newPost(String subject, String text) {
-		Post post = new Post();
-		post.setName(subject);
-		post.setMessage(text);
-		post.setOwner("root");
-		post.setIcon("Shield");
-		return post;
-	}
-
-	public List<Topic> findTopicsByForum(Forum forum) {
-		String forumId = forum.getId();
-		SimpleMapper<Topic> mapper = new SimpleMapper<Topic>() {
-			public Topic mapResult(ResultSet rs) throws SQLException {
-				Topic topic = newTopic(rs.getString("post_subject"), rs.getString("post_text"));
-				return topic;
-			}
-		};
-		SimpleJDBCTemplate<Topic> template = new SimpleJDBCTemplate<Topic>(mapper);
-		List<Topic> result = template.execute("SELECT t.post_subject, t.post_text FROM phpbb_topics topics, phpbb_posts p, phpbb_posts_text t WHERE topics.topic_first_post_id = p.post_id AND p.post_id=t.post_id  AND forum_id=" + forumId);
-		return result;		
-	}
-
-	protected Topic newTopic(String name, String text) {
-		Topic topic = new Topic();
-		topic.setCreatedDate(new Date());
-		topic.setDescription(text);
-		topic.setOwner("root"); 
-		topic.setTopicName(name);
-		topic.setIcon("Shield");
-		return topic;
-	}
-
-	public boolean isInitialized() {
-		// TODO Auto-generated method stub
-		return false;
-	}
-
-}
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/LoremIpsum4J.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/LoremIpsum4J.java	(revision 79503)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/LoremIpsum4J.java	(working copy)
@@ -1,244 +0,0 @@
-/* Copyright (c) 2008 Sven Jacobs
-
-
-
-   Permission is hereby granted, free of charge, to any person obtaining a copy
-
-   of this software and associated documentation files (the "Software"), to deal
-
-   in the Software without restriction, including without limitation the rights
-
-   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-
-   copies of the Software, and to permit persons to whom the Software is
-
-   furnished to do so, subject to the following conditions:
-
-
-
-   The above copyright notice and this permission notice shall be included in
-
-   all copies or substantial portions of the Software.
-
-
-
-   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-
-   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-
-   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-
-   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-
-   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-
-   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-
-   THE SOFTWARE. 
-
-*/
-
-
-
-package org.exoplatform.forum.bench;
-
-
-
-/**
-
- * Simple lorem ipsum text generator.
-
- * 
-
- * <p>
-
- *   Suitable for creating sample data for test cases and performance tests.
-
- * </p>
-
- *
-
- * @author Sven Jacobs
-
- * @version 1.0
-
- */
-
-public class LoremIpsum4J {
-
-  public static final String LOREM_IPSUM = "Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.";
-
-  private String[] loremIpsumWords;
-
- 
-
-  public LoremIpsum4J() {
-
-    this.loremIpsumWords = LOREM_IPSUM.split( "\\s" );
-
-  }
-
-  
-
-  /**
-
-   * Returns one sentence (50 words) of the lorem ipsum text.
-
-   *
-
-   * @return 50 words of lorem ipsum text
-
-   */
-
-  public String getWords() {
-
-    return getWords( 50 );
-
-  }
-
-  
-
-  /**
-
-   * Returns words from the lorem ipsum text.
-
-   *
-
-   * @param amount Amount of words
-
-   * @return Lorem ipsum text
-
-   */
-
-  public String getWords( int amount ) {
-
-    return getWords( amount, 0 );
-
-  }
-
-  
-
-  /**
-
-   * Returns words from the lorem ipsum text.
-
-   *
-
-   * @param amount Amount of words
-
-   * @param startIndex Start index of word to begin with (must be >= 0 and < 50)
-
-   * @return Lorem ipsum text
-
-   * @throws IndexOutOfBoundsException If startIndex is < 0 or > 49
-
-   */
-
-  public String getWords( int amount, int startIndex ) {
-
-    if ( startIndex < 0 || startIndex > 49 ) {
-
-      throw new IndexOutOfBoundsException( "startIndex must be >= 0 and < 50" );
-
-    }
-
-  
-
-    int word = startIndex;
-
-    StringBuilder lorem = new StringBuilder();
-
-  
-
-    for( int i = 0; i < amount; i++ ) {
-
-      if ( word == 50 ) {
-
-        word = 0;
-
-      }
-
-
-
-      lorem.append( loremIpsumWords[ word ] );
-
-      
-
-      if ( i < amount - 1 ) {
-
-        lorem.append( ' ' );
-
-      }
-
-
-
-      word++;
-
-    }
-
-    
-
-    return lorem.toString();  
-
-  }
-
-  
-
-  /**
-
-   * Returns two paragraphs of lorem ipsum.
-
-   *
-
-   * @return Lorem ipsum paragraphs
-
-   */
-
-  public String getParagraphs() {
-
-    return getParagraphs( 2 );
-
-  }
-
-  
-
-  /**
-
-   * Returns paragraphs of lorem ipsum.
-
-   *
-
-   * @param amount Amount of paragraphs
-
-   * @return Lorem ipsum paragraphs
-
-   */
-
-  public String getParagraphs( int amount ) {
-
-    StringBuilder lorem = new StringBuilder();
-
-  
-
-    for( int i = 0; i < amount; i++ ) {
-
-      lorem.append( LOREM_IPSUM );
-
-      
-
-      if ( i < amount - 1 ) {
-
-        lorem.append( "\n\n" );
-
-      }
-
-    }
-
-    
-
-    return lorem.toString();
-
-  }
-
-}
-
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/ForumDataProvider.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/ForumDataProvider.java	(revision 79503)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/ForumDataProvider.java	(working copy)
@@ -1,22 +0,0 @@
-package org.exoplatform.forum.bench;
-
-import java.util.List;
-
-import org.exoplatform.forum.service.Category;
-import org.exoplatform.forum.service.Forum;
-import org.exoplatform.forum.service.Post;
-import org.exoplatform.forum.service.Topic;
-
-public interface ForumDataProvider {
-	
-	public boolean isInitialized();
-
-	public List<Category> findCategories();
-
-	public List<Forum> findForumsByCategory(String categoryId);
-
-	public List<Topic> findTopicsByForum(Forum forum);
-
-	public List<Post> fingPostsByTopic(Topic topic);
-
-}
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/RandomForumDataProvider.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/RandomForumDataProvider.java	(revision 79503)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/bench/RandomForumDataProvider.java	(working copy)
@@ -1,243 +0,0 @@
-package org.exoplatform.forum.bench;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-import java.util.Random;
-
-import org.exoplatform.container.xml.InitParams;
-import org.exoplatform.forum.service.Category;
-import org.exoplatform.forum.service.Forum;
-import org.exoplatform.forum.service.ForumService;
-import org.exoplatform.forum.service.Post;
-import org.exoplatform.forum.service.Topic;
-import org.exoplatform.forum.service.Utils;
-import org.exoplatform.services.idgenerator.IDGeneratorService;
-import org.exoplatform.services.log.ExoLogger;
-import org.exoplatform.services.log.Log;
-import org.exoplatform.services.organization.OrganizationService;
-
-public class RandomForumDataProvider implements ForumDataProvider {
-
-	private static Log log = ExoLogger.getLogger(RandomForumDataProvider.class);
-	private LoremIpsum4J textGen;
-	private Random rand;
-	private List<String> users;
-	private int maxCategories = 10;
-	private int maxForums = 5;
-	private int maxTopics = 20;
-	private int maxPosts = 20;
-	private String fistCategoryId = Utils.CATEGORY + "randomId412849127491";
-	private boolean randomize = false;
-	private ForumService forumService;
-
-	public RandomForumDataProvider(InitParams initParams,
-			ForumService forumService, IDGeneratorService uidGenerator,
-			OrganizationService organizationService) {
-		this.forumService = forumService;
-		initRandomizers();
-		initParams(initParams);
-
-	}
-
-	private void initParams(InitParams initParams) {
-		try {
-			maxCategories = Integer.parseInt(initParams.getValueParam(
-					"maxCategories").getValue());
-			maxForums = Integer.parseInt(initParams.getValueParam("maxForums")
-					.getValue());
-			maxTopics = Integer.parseInt(initParams.getValueParam("maxTopics")
-					.getValue());
-			maxPosts = Integer.parseInt(initParams.getValueParam("maxPosts")
-					.getValue());
-			randomize = Boolean.parseBoolean(initParams.getValueParam("randomize")
-					.getValue());
-			log.debug("initializing : " + initParams);
-		} catch (Exception e) {
-			throw new RuntimeException(
-					"Could not initialize " , e);
-		}
-	}
-
-	private void initRandomizers() {
-		textGen = new LoremIpsum4J();
-		rand = new Random();
-	}
-
-	private String randomWords(int i) {
-		int wordCount = rand.nextInt(i + 1) + 1;
-		String words = textGen.getWords(wordCount);
-		return words;
-
-	}
-	
-	private String randomUser() {
-		users = Arrays.asList(new String[]{"root", "demo", "mary", "john"});
-		return users.get(rand.nextInt(4));
-	}
-
-	private String randomParagraphs(int i) {
-		int paragraphCount = rand.nextInt(i + 1) + 1;
-		String  paragraphs = textGen.getParagraphs(paragraphCount);
-		return paragraphs.replaceAll("\\n\\n","<br/><br/>");
-	}	
-	
-
-	public List<Category> findCategories() {
-
-		List<Category> result = new ArrayList<Category>();
-		try {
-			// init marker
-			Category init = newCategory(null);
-			init.setId(fistCategoryId);
-			result.add(init);
-			Category previous = init;
-
-			for (int i = 0; i < (getMaxCategory()); i++) {
-				Category category = newCategory(previous);
-				result.add(category);
-				previous = category;
-			}
-		} catch (Exception e) {
-			throw new RuntimeException(e);
-		}
-		return result;
-	}
-
-	private int getMaxCategory() {
-		return (randomize)?rand.nextInt(maxCategories):maxCategories;
-	}
-
-	private Forum newForum(Forum previous) {
-		if (previous == null) {
-			previous = new Forum();
-		}
-		Forum forum = new Forum();
-		forum.setCreatedDate(new Date());
-		forum.setDescription(randomWords(10));
-		forum.setForumName(randomWords(5));
-		forum.setForumOrder(previous.getForumOrder() + 1);
-		forum.setOwner(randomUser());
-		return forum;
-	}
-
-	private Category newCategory(Category previous) {
-		if (previous == null) {
-			previous = new Category();
-		}
-		Category category = new Category();
-		category.setCategoryName(randomWords(10));
-		category.setCategoryOrder(previous.getCategoryOrder() + 1);
-		category.setCreatedDate(new Date());
-		category.setDescription(randomWords(10));
-		category.setModifiedBy(randomUser());
-		category.setModifiedDate(new Date());
-		category.setOwner(randomUser());
-		return category;
-	}
-
-	public List<Forum> findForumsByCategory(String categoryId) {
-
-		List<Forum> result = new ArrayList<Forum>();
-		try {
-			Forum previous = null;
-			int forumCount = maxForums();
-
-			for (int i = 0; i < forumCount; i++) {
-				Forum forum = newForum(previous);
-
-				result.add(forum);
-			}
-		} catch (Exception e) {
-			throw new RuntimeException(e);
-		}
-		return result;
-	}
-
-	private int maxForums() {
-		return (randomize)?(rand.nextInt(maxForums) + 1):maxForums;
-	}
-
-	public boolean isInitialized() {
-		try {
-			Category initialized = forumService.getCategory(fistCategoryId);
-			return (initialized != null);
-		} catch (Exception e) {
-			throw new RuntimeException(e);
-		}
-	}
-
-	public List<Topic> findTopicsByForum(Forum forum) {
-		List<Topic> result = new ArrayList<Topic>();
-		try {
-			Topic previous = null;
-			int topicCount = maxTopics();
-
-			for (int i = 0; i < topicCount; i++) {
-				Topic topic = newTopic(previous);
-
-				result.add(topic);
-			}
-			return result;
-		} catch (Exception e) {
-			throw new RuntimeException(e);
-		}
-
-	}
-
-	private int maxTopics() {
-		return (randomize)?(rand.nextInt(maxTopics) + 1):maxTopics;
-	}
-
-	private Topic newTopic(Topic previous) {
-		if (previous == null) {
-			previous = new Topic();
-		}
-		Topic topic = new Topic();
-		topic.setCreatedDate(new Date());
-		topic.setDescription(randomWords(10));
-		topic.setOwner(randomUser()); // todo use random user
-		topic.setTopicName(randomWords(5));
-		topic.setIcon("Shield");
-		return topic;
-	}
-	public List<Post> fingPostsByTopic(Topic topic) {
-		List<Post> result = new ArrayList<Post>();
-		try {
-			Post previous = null;
-			int postCount = maxPosts();
-
-			for (int i = 0; i < postCount; i++) {
-				Post post = newPost(previous);
-
-				result.add(post);
-
-			}
-			return result;
-		} catch (Exception e) {
-			throw new RuntimeException(e);
-		}
-	}
-
-	private int maxPosts() {
-		return (randomize)?(rand.nextInt(maxPosts) + 1):maxPosts;
-	}
-
-	private Post newPost(Post previous) {
-		if (previous == null) {
-			previous = new Post();
-		}
-		Post post = new Post();
-		post.setName(randomWords(10));
-		String content = randomParagraphs(5);
-		
-		post.setMessage(content);
-		post.setOwner(randomUser());
-		post.setIcon("Shield");
-		return post;
-	}
-
-
-
-}
Index: eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/Utils.java
===================================================================
--- eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/Utils.java	(revision 79503)
+++ eXoApplication/forum/service/src/main/java/org/exoplatform/forum/service/Utils.java	(working copy)
@@ -54,6 +54,7 @@
 	public final static String TOPIC = "topic".intern() ;
 	public final static String POST = "post".intern() ;
 	public final static String POLL = "poll".intern() ;
+	public final static String ATTACHMENT = "attachment";
 	public final static String TAG = "tag".intern() ;
 	public final static String TOPICTYPE = "topicType".intern() ;
 	
Index: component/pom.xml
===================================================================
--- component/pom.xml	(revision 79503)
+++ component/pom.xml	(working copy)
@@ -13,5 +13,6 @@
     <module>common</module>
     <module>rendering</module>
     <module>bbcode</module>
+    <module>injector</module>
   </modules>
 </project>
Index: component/injector/src/main/java/org/exoplatform/ks/bench/ForumDataInjector.java
===================================================================
--- component/injector/src/main/java/org/exoplatform/ks/bench/ForumDataInjector.java	(revision 0)
+++ component/injector/src/main/java/org/exoplatform/ks/bench/ForumDataInjector.java	(revision 0)
@@ -0,0 +1,494 @@
+/*
+ * Copyright (C) 2003-2011 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.ks.bench;
+
+import java.io.ByteArrayInputStream;
+import java.text.MessageFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
+
+import javax.jcr.NodeIterator;
+
+import org.apache.commons.collections.ListUtils;
+import org.exoplatform.forum.service.BufferAttachment;
+import org.exoplatform.forum.service.Category;
+import org.exoplatform.forum.service.Forum;
+import org.exoplatform.forum.service.ForumAttachment;
+import org.exoplatform.forum.service.ForumService;
+import org.exoplatform.forum.service.Post;
+import org.exoplatform.forum.service.Topic;
+import org.exoplatform.forum.service.Utils;
+import org.exoplatform.ks.common.jcr.KSDataLocation;
+import org.exoplatform.services.bench.DataInjector;
+import org.exoplatform.services.log.ExoLogger;
+import org.exoplatform.services.log.Log;
+
+/**
+ * <p>
+ * Plugin for injecting Forum data.
+ * </p>
+ * 
+ * Created by The eXo Platform SAS
+ * @Author : <a href="mailto:quanglt@exoplatform.com">Le Thanh Quang</a>
+ * Jul 21, 2011  
+ */
+public class ForumDataInjector extends DataInjector {
+
+  private static Log         log         = ExoLogger.getLogger(ForumDataInjector.class);
+
+  private static final String ARRAY_SPLIT = ",";
+  
+  private static final String UNDER_SCORE = "_";
+  
+  private static final String SIXTEEN_CHARACTERS = "asdfghjklzxcvbnm";
+
+  private ForumService       forumService;
+  
+  private KSDataLocation     dataLocation;
+  
+  private enum ENTITY{
+    CATEGORY, FORUM, TOPIC, POST, ATTACHMENT
+  }
+
+  public ForumDataInjector(ForumService forumService, KSDataLocation dataLocation) {
+    this.forumService = forumService;
+    this.dataLocation = dataLocation;
+  }
+  
+  @Override
+  public Log getLog() {
+    return log;
+  }
+  
+  @Override
+  public void inject(HashMap<String, String> queryParams) throws Exception {
+    String type = queryParams.get("type");
+    if ("data".equals(type)) {
+      log.info("Injecting data ...");
+      injectData(queryParams);
+    } else if ("perm".equals(type)) {
+      log.info("Injecting permissions ...");
+      injectPermission(queryParams);
+    } else {
+      log.info(String.format("Do not support type %s for injector...", type));
+    }
+  }
+  
+  
+  public void injectData(HashMap<String, String> queryParams) throws Exception {
+    long categoriesCount = 0;
+    long forumsCount = 0;
+    long topicsCount = 0;
+    long postCount = 0;
+    long categoriesWeight = 0;
+    List<Integer> itemsQu = readQuantities(queryParams);
+    List<String> itemsPre = readPrefixes(queryParams);    
+    if (itemsPre.size() == 0 || itemsQu.size() == 0) {
+      throw new RuntimeException("The size of parametes is zero");
+    }
+    // itemsQu = getTotalItemQu(itemsPre, itemsQu);
+    List<Category> categories = generatesCategories(itemsPre.get(0), itemsQu.get(0));
+    for (Category category : categories) {
+      if (forumService.getCategory(category.getId()) == null) {
+        forumService.saveCategory(category, true);
+        categoriesCount++;
+      }
+      String categoryId = category.getId();
+      long forumsWeight = 0;
+      int forumNum = 0;
+      if (itemsQu.size() > 1) {
+        List<Forum> forums = generateForums(itemsPre.get(1), itemsQu.get(1));
+        log.info("Category " + categoriesCount + "/" + categories.size() + " with " + forums.size() + " forums");
+        for (Forum forum : forums) {
+          if (forumService.getForum(categoryId, forum.getId()) == null) {
+            forumService.saveForum(categoryId, forum, true);
+            forumsCount++;
+          }
+          String forumId = forum.getId();
+          long topicsWeight = 0;
+          int topicNum = 0;
+          if (itemsQu.size() > 2) {
+
+            List<Topic> topics = generateTopics(itemsPre.get(2), itemsQu.get(2));
+            log.info("\tForum " + (++forumNum) + "/" + forums.size() + " with " + topics.size() + " topics");
+            for (Topic topic : topics) {
+              if (forumService.getTopic(categoryId, forumId, topic.getId(), "root") == null) {
+                forumService.saveTopic(categoryId, forumId, topic, true, false, "");
+                // log.info("Created topic " + topic.getTopicName());
+                topicsCount++;
+              }
+              String topicId = topic.getId();
+              long postsWeight = 0;
+              long t1 = System.currentTimeMillis();
+              if (itemsQu.size() > 3) {
+                List<Post> posts = generatePosts(itemsPre.get(3), itemsQu.get(3));
+                // log.info("Initializing new topic with "+ posts.size()+
+                // " posts");
+
+                for (Post post : posts) {
+                  if (forumService.getPost(categoryId, forumId, topicId, post.getId()) == null) {
+                    forumService.savePost(categoryId, forumId, topicId, post, true, "");
+                    long messageWeight = post.getMessage().length() * 2; // in
+                    postCount++;
+                    postsWeight += messageWeight;                   
+                  }
+                  if (itemsQu.size() > 4) {
+                    int attSize = Integer.parseInt(queryParams.get("attSize"));
+                    List<ForumAttachment> atts = generateAttachments(itemsPre.get(4), itemsQu.get(4), attSize);
+                    post.setAttachments(atts);
+                    forumService.savePost(categoryId, forumId, topicId, post, false, "");
+                  }
+                }
+                double elapsed = (System.currentTimeMillis() - t1);
+                double rate = ((postsWeight / 1024) / (elapsed / 1000));
+                String srate = MessageFormat.format("({0,number,#.#} KB/s)", rate);
+                log.info("\t\tTopic " + (++topicNum) + "/" + topics.size() + "\t" + posts.size() + " posts in " + elapsed + "ms "
+                    + srate);
+
+                topicsWeight += postsWeight;
+              }
+            } // end topics loop
+
+            log.info("\t\t " + topics.size() + " topics " + MessageFormat.format("({0,number,#.#} KB)", (topicsWeight / 1024))
+                + " total posts=" + postCount);
+            forumsWeight += topicsWeight;
+
+          }
+        }
+        log.info("\t" + forums.size() + " forums " + MessageFormat.format("({0,number,#.#} K)", (forumsWeight / 1024))
+            + " total posts=" + postCount);
+        categoriesWeight += forumsWeight;
+      }
+    }
+    log.info("INITIALIZED : categories=" + categories.size() + " / forums=" + forumsCount + " / topics=" + topicsCount
+        + " / posts=" + postCount + MessageFormat.format(" ({0,number,#.#} KB)", (categoriesWeight / 1024)));
+  }
+  
+  @SuppressWarnings("unchecked")
+  public void injectPermission(HashMap<String, String> queryParams) throws Exception {
+    List<String> prefixes = readPrefixes(queryParams);
+    if (prefixes.size() == 3) {
+      boolean isCanView = false;
+      boolean isCanPost = false;
+      String permString = queryParams.get("perm");
+      List<String> member = readUsersIfExist(queryParams);
+      List<String> groups = readGroupsIfExist(queryParams);
+      List<String> memberships = readMembershipIfExist(queryParams);
+      List<String> mergeMembers = ListUtils.union(ListUtils.union(member, groups), memberships);
+      String[] memberArray = new String[mergeMembers.size()];
+      for (int i = 0; i < mergeMembers.size(); i++) {
+        memberArray[i] = mergeMembers.get(i);
+      }
+      List<String> itemIds = search(prefixes.get(2), ENTITY.TOPIC);
+      if (Integer.parseInt(permString.substring(0, 1)) > 0) {
+        isCanView = true;
+      }
+      if (Integer.parseInt(permString.substring(1, 2)) > 0) {
+        isCanPost = true;
+      }
+      for (int i = 0; i < itemIds.size(); i++) {
+        String[] ids = itemIds.get(i).split("/");
+        int l = ids.length;
+        Topic topic = forumService.getTopic(ids[l - 3], ids[l - 2], ids[l - 1], "root");
+        if (isCanView) {
+          topic.setCanView(memberArray);
+        }
+        if (isCanPost) {
+          topic.setCanPost(memberArray);
+        }
+        forumService.saveTopic(ids[l - 3], ids[l - 2], topic, false, false, "");
+      }
+    } else {
+      throw new IllegalArgumentException("Prefix item is not a topic prefix. It should be [category_prefix],[forum_prefix],[topic_prefix]");
+    }
+  }
+
+  @SuppressWarnings("unchecked")
+  @Override
+  public void reject(HashMap<String, String> queryParams) throws Exception {
+    List<String> prefixes = readPrefixes(queryParams);
+    List<String> itemIds = new ArrayList<String>();
+    switch (prefixes.size()) {
+    case 5:
+      itemIds = search(prefixes.get(prefixes.size()-1), ENTITY.ATTACHMENT);
+      for (int i = 0; i < itemIds.size(); i++) {
+        String[] ids = itemIds.get(i).split("/");
+        int l = ids.length;
+        Post post = forumService.getPost(ids[l - 6], ids[l - 5], ids[l - 4], ids[l - 3]);
+        List<ForumAttachment> atts = post.getAttachments();
+        List<ForumAttachment> toRemoveAtts = new ArrayList<ForumAttachment>();
+        for (ForumAttachment att : atts) {
+          if (att.getId().equals(ids[l - 2]))
+            toRemoveAtts.add(att);
+        }
+        atts = ListUtils.subtract(atts, toRemoveAtts);
+        post.setAttachments(atts);
+        forumService.savePost(ids[l - 6], ids[l - 5], ids[l - 4], post, false, "");
+      }
+      break;
+    case 4:
+      itemIds = search(prefixes.get(prefixes.size()-1), ENTITY.POST);
+      for (int i = 0; i < itemIds.size(); i++) {
+        String[] ids = itemIds.get(i).split("/");
+        int l = ids.length;
+        forumService.removePost(ids[l - 4], ids[l - 3], ids[l - 2], ids[l - 1]);
+      }
+      break;
+    case 3:
+      itemIds = search(prefixes.get(prefixes.size()-1), ENTITY.TOPIC);
+      for (int i = 0; i < itemIds.size(); i++) {
+        String[] ids = itemIds.get(i).split("/");
+        int l = ids.length;
+        forumService.removeTopic(ids[l - 3], ids[l - 2], ids[l - 1]);
+      }
+      break;
+    case 2:
+      itemIds = search(prefixes.get(prefixes.size()-1), ENTITY.FORUM);
+      for (int i = 0; i < itemIds.size(); i++) {
+        String[] ids = itemIds.get(i).split("/");
+        int l = ids.length;
+        forumService.removeForum(ids[l - 2], ids[l - 1]);
+      }
+      break;
+    case 1:
+      itemIds = search(prefixes.get(prefixes.size()-1), ENTITY.CATEGORY);
+      for (int i = 0; i < itemIds.size(); i++) {
+        String[] ids = itemIds.get(i).split("/");
+        int l = ids.length;
+        forumService.removeCategory(ids[l - 1]);
+      }
+      break;
+    default:
+      break;
+    }
+  }
+  
+  private List<Integer> readQuantities(HashMap<String, String> queryParams) {
+    String quantitiesString = queryParams.get("q");
+    List<Integer> quantities = new LinkedList<Integer>();
+    for (String s : quantitiesString.split(ARRAY_SPLIT)) {
+      if (s.length() > 0) {
+        int quantity = Integer.parseInt(s.trim());
+        quantities.add(quantity);
+      }
+    }
+    return quantities;
+  }
+  
+  private List<String> readPrefixes(HashMap<String, String> queryParams) {
+    String prefixesString = queryParams.get("pre");
+    List<String> prefixes = new LinkedList<String>();
+    for (String s : prefixesString.split(ARRAY_SPLIT)) {
+      if (s.length() > 0) {
+        prefixes.add(s);
+      }
+    }
+    return prefixes;
+  }
+
+  private List<Category> generatesCategories(String prefix, int cateQu) {
+    List<Category> result = new ArrayList<Category>();
+    try {
+      for (int i = 0; i < cateQu; i++) {
+        Category category = new Category();
+        String id = generateId(prefix, Utils.CATEGORY, i);
+        category.setId(id);
+        category.setCategoryName(id);
+        category.setCategoryOrder(i);
+        category.setCreatedDate(new Date());
+        category.setDescription(randomWords(10));
+        category.setModifiedBy(randomUser());
+        category.setModifiedDate(new Date());
+        category.setOwner(randomUser());
+        result.add(category);
+      }
+    } catch (Exception e) {
+      throw new RuntimeException(e);
+    }
+    return result;
+  }
+
+  private List<Forum> generateForums(String prefix, int forumQu) {
+    List<Forum> result = new ArrayList<Forum>();
+    try {
+      for (int i = 0; i < forumQu; i++) {
+        Forum forum = new Forum();
+        String id = generateId(prefix, Utils.FORUM, i);
+        forum.setId(id);
+        forum.setForumName(id);
+        forum.setCreatedDate(new Date());
+        forum.setDescription(randomWords(10));        
+        forum.setForumOrder(i);
+        forum.setOwner(randomUser());
+        result.add(forum);
+      }
+      return result;
+    } catch (Exception e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  private List<Topic> generateTopics(String prefix, int topicQu) {
+    List<Topic> result = new ArrayList<Topic>();
+    try {
+      for (int i = 0; i < topicQu; i++) {
+        Topic topic = new Topic();
+        String id = generateId(prefix, Utils.TOPIC,i);
+        topic.setId(id);
+        topic.setTopicName(id);
+        topic.setCreatedDate(new Date());
+        topic.setDescription(randomWords(10));
+        topic.setOwner("root");
+        String[] users = {"root"};
+        topic.setCanPost(users);
+        topic.setCanView(users);
+        topic.setIcon(ForumDataRandom.getClassIcon());
+        result.add(topic);
+      }
+      return result;
+    } catch (Exception e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  private List<Post> generatePosts(String prefix, int postQu) {
+    List<Post> result = new ArrayList<Post>();
+    for (int i = 0; i < postQu; i++) {
+
+      Post post = new Post();
+      String id = generateId(prefix, Utils.POST, i);
+      post.setId(id);
+      post.setName(id);
+      String content = randomParagraphs(5);
+      post.setMessage(content);
+      post.setOwner(randomUser());
+      post.setIcon(ForumDataRandom.getClassIcon());
+      result.add(post);
+    }
+    return result;
+  }
+  
+  private String generateId(String prefix, String entity, int order) {
+    StringBuilder sb = new StringBuilder();
+    sb.append(entity)
+      .append(UNDER_SCORE)
+      .append(prefix)
+      .append(UNDER_SCORE)
+      .append(SIXTEEN_CHARACTERS)
+      .append(UNDER_SCORE)
+      .append(order);
+    return sb.toString();
+  }
+  
+  private List<String> search(String prefix, ENTITY entity) {
+    StringBuffer sb = new StringBuffer();
+    String nodeType = "nt:base";
+    List<String> result = new ArrayList<String>();
+    switch (entity) {
+    case CATEGORY:
+      nodeType = "exo:forumCategory";
+      break;
+    case FORUM:
+      nodeType = "exo:forum";
+      break;
+    case TOPIC:
+      nodeType = "exo:topic";
+      break;
+    case POST:
+      nodeType = "exo:post";
+      break;
+    case ATTACHMENT:
+      nodeType = "exo:forumResource";
+      break;
+    default:
+      break;
+    }   
+    prefix = new StringBuilder().append("%").append(UNDER_SCORE).append(prefix).append(UNDER_SCORE).append("%").toString();
+    sb.append(dataLocation.getForumCategoriesLocation())
+      .append("//element(*,")
+      .append(nodeType)
+      .append(")[jcr:like(exo:name,'")
+      .append(prefix)
+      .append("') or jcr:like(exo:fileName,'")
+      .append(prefix)
+      .append("')]");
+    try {
+      NodeIterator iter = forumService.search(sb.toString());
+      while (iter.hasNext()) {
+        result.add(iter.nextNode().getPath().toString());
+      }
+    } catch (Exception e) {
+      log.debug("Failure when search for prefix", e);
+    }
+    return result;
+  }
+  
+//  private List<Integer> getTotalItemQu(List<String> preQu, List<Integer> itemQu) {
+//    List<Integer> result = new ArrayList<Integer>();
+//    List<String> addedCats = new ArrayList<String>();
+//    List<String> addedFors = new ArrayList<String>();
+//    List<String> addedTops = new ArrayList<String>();
+//    List<String> addedPoss = new ArrayList<String>();
+//    addedCats = search(preQu.get(0));
+//    if (addedCats.size() > 0) {
+//      addedFors = search(preQu.get(1), addedCats.get(0));
+//      if (addedFors.size() > 0) {
+//        addedTops = search(preQu.get(2), addedFors.get(0));
+//
+//        if (addedTops.size() > 0) {
+//          addedPoss = search(preQu.get(3), addedTops.get(0));
+//        }
+//      }
+//    }
+//    result.add(calculateItemQu(addedCats.size(), itemQu.get(0)));
+//    result.add(calculateItemQu(addedFors.size(), itemQu.get(1)));
+//    result.add(calculateItemQu(addedTops.size(), itemQu.get(2)));
+//    result.add(calculateItemQu(addedPoss.size(), itemQu.get(3)));
+//    return result;
+//  }
+  
+//  private int calculateItemQu(int existing, int input) {
+//    return (existing == input) ? existing : existing + input;
+//  }
+
+  private List<ForumAttachment> generateAttachments(String prefix, int quantity, int capacity) throws Exception {
+    List<ForumAttachment> listAttachments = new ArrayList<ForumAttachment>();
+    String rs = createTextResource(capacity);    
+    for (int i = 0; i < quantity; i++) {
+      String attId = generateId(prefix, Utils.ATTACHMENT, i);
+      BufferAttachment att = new BufferAttachment();
+      att.setId(attId);
+      att.setName(attId);
+      att.setInputStream(new ByteArrayInputStream(rs.getBytes("UTF-8")));
+      att.setMimeType("text/plain");
+      long fileSize = (long) capacity * 1024;
+      att.setSize(fileSize);
+      listAttachments.add(att);
+    }
+    return listAttachments;
+  }
+
+  @Override
+  public Object execute(HashMap<String, String> params) throws Exception {
+    return new Object();
+  }
+
+}
+
Index: component/injector/src/main/java/org/exoplatform/ks/bench/ForumDataRandom.java
===================================================================
--- component/injector/src/main/java/org/exoplatform/ks/bench/ForumDataRandom.java	(revision 0)
+++ component/injector/src/main/java/org/exoplatform/ks/bench/ForumDataRandom.java	(revision 0)
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2003-2011 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.ks.bench;
+
+import java.util.Random;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : Vu Duy Tu
+ *          tu.duy@exoplatform.com
+ * Aug 10, 2011  
+ */
+public class ForumDataRandom {
+  public static final String[] iconsClass = new String[] { "DefaultPageIcon", "AcrobatFile", "AdminView", "AllTags", "AmericanExpressCard",
+      "ApplicationGallery", "ApplicationLink", "ApplicationList", "ApplicationSize", "ApplicationTerminal", "ApplicationWorldWide", "BlueInfo",
+      "Bomb", "BookmarkPage", "BreakLink", "Brick", "CategoryList", "Checkout", "CheckPage", "ComponentsList", "Config", "CSS", "DiskDrive",
+      "DownloadApplication", "DreamweaverApplication", "DynamicContentPage", "Extension", "Factory", "Feature", "Flash", "FlashFile", "FolderLock",
+      "FontFile", "Glove", "Home", "HTML", "Humer", "IconsView", "ImageFrame", "Images", "ImagesFolder", "ImageSize", "ImagesList", "Info",
+      "InstallerProgress", "JavaPge", "Layout", "Link", "LockPage", "MasterCard", "Music", "MusicDownload", "New", "PackagesList", "PageCategory",
+      "PhotoshopFile", "Printer", "Puzzle", "QuicktimeMovieFile", "Rainbow", "RefeshPage", "RSS", "RSSFeed", "SearchFolder", "Security", "Software",
+      "Speaker", "Speaker2", "StarAward", "StarPage", "Stats", "TagPage", "TagSign", "Ticket", "TrueTypeFont", "Tux", "Vector", "Version",
+      "VisaCard", "WeatherClouds", "WeatherCloudy", "WeatherLightning", "WeatherRain", "WeatherSnow", "WeatherSun", "World", "XHTML", "YellowStar",
+      "BlackDownSolidArrow", "BlackLeftSolidArrow", "BlackRightSolidArrow", "BlackUpSolidArrow", "BlueAquaBallBullet", "BlueArrowIn",
+      "BlueArrowInOut", "BlueBallBullet", "BlueBranchArrow", "BlueDividedArrow", "BlueDownArrow", "BlueJoinArrow", "BlueRedoArrow",
+      "BlueRotateRightArrow", "BlueSquareBullet", "BlueSwitchArrow", "BlueTriangleBullet", "BlueUndoArrow", "BlueUpArrow", "Check", "Check2",
+      "Delete", "Forward", "GrassGreenBallBullet", "GreenBallBullet", "GreenSquareBullet", "GreenTriangleBullet", "GreyAquaBallBullet",
+      "GreyBallBullet", "GreyLeftShapeArrow", "GreySquareBullet", "GreyTriangleBullet", "RedAquaBallBullet", "RedBallBullet", "RedSquareBullet",
+      "RedTriangleBullet", "Reply", "RightShapeArrow", "YellowAquaBallBullet", "YellowBallBullet", "YellowSquareBullet", "YellowTriangleBullet",
+      "AddressBook", "ArticleDocument", "At", "Attachment", "Book", "Chair", "ChartBar", "ChartLine", "CoffeeCup", "CoinsCurency", "Computer",
+      "Conference", "Date", "DocumentBox", "Door", "DreamweaverFile", "Email", "Envelope", "ExeFile", "FloppyDisk", "Folder1", "Folder2", "Folder3",
+      "Folder4", "Folder5", "HomePage", "HotNews", "IDCard", "IllustratorFile", "IndesignFile", "Index", "Keyboard", "Letter", "MacOSXFolder",
+      "Mail", "Map", "Monitor", "Mouse", "Newspaper", "Newspaper2", "NotePage", "OpenBook", "OpenEmail", "OpenFolder", "Page", "PaperList",
+      "PastePalate", "Picture", "Purchase", "Script", "SearchPage", "ShoppingBag", "Sitemap", "Stats2", "Tag", "Telephone", "TextFile",
+      "YellowFolder", "YellowPen", "ZipFile", "Alarm", "Anchor", "Basketball", "Bell", "Billards", "BlueActionWheel", "BlueFlag", "Box", "BriefCase",
+      "Calculator", "Calendar", "Cart", "CD", "Clock", "Component", "CropTool", "DeskPhone", "EmptyBox", "Entertainment", "FileBox",
+      "FirefoxBrowser", "FolderExport", "FolderImport", "Football", "Gear", "Golf", "GrayWallet", "GreenFlag", "GreyFlag", "HardDisk", "HourGlass",
+      "Key", "Light", "Lock", "MacApplicationTool", "MacMonitor", "Magnifier", "MoveTool", "Movie", "Network", "Paste", "PCMonitor", "Pencil",
+      "Raquet", "RedFlag", "Ruler", "Search", "Shield", "Shuttlecock", "Soccer", "Sound", "Switcher", "Tennis", "ToolBoxOpen", "UnLock",
+      "VolumeControl", "Wand", "Warning", "Webcam", "Wrench", "YellowBulb", "YellowFlag", "Comment", "Contact", "Eye", "Finger", "FolderHolder",
+      "Hand", "HandPoint", "Help", "Personal", "Public", "User", "VIPCard"};
+  
+  private static int length = iconsClass.length;
+  private static Random random = new Random();
+  
+  public static String getClassIcon() {
+    return iconsClass[random.nextInt(length)];
+  }
+  
+}
Index: component/injector/src/main/java/org/exoplatform/ks/bench/AnswerDataInjector.java
===================================================================
--- component/injector/src/main/java/org/exoplatform/ks/bench/AnswerDataInjector.java	(revision 0)
+++ component/injector/src/main/java/org/exoplatform/ks/bench/AnswerDataInjector.java	(revision 0)
@@ -0,0 +1,435 @@
+/*
+ * Copyright (C) 2003-2011 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.ks.bench;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.exoplatform.faq.service.Answer;
+import org.exoplatform.faq.service.Category;
+import org.exoplatform.faq.service.Comment;
+import org.exoplatform.faq.service.FAQService;
+import org.exoplatform.faq.service.FAQSetting;
+import org.exoplatform.faq.service.FileAttachment;
+import org.exoplatform.faq.service.Question;
+import org.exoplatform.faq.service.Utils;
+import org.exoplatform.ks.common.jcr.KSDataLocation;
+import org.exoplatform.services.bench.DataInjector;
+import org.exoplatform.services.jcr.util.IdGenerator;
+import org.exoplatform.services.log.ExoLogger;
+import org.exoplatform.services.log.Log;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : Vu Duy Tu
+ *          tu.duy@exoplatform.com
+ * Aug 2, 2011  
+ */
+public class AnswerDataInjector extends DataInjector {
+  private static Log          log           = ExoLogger.getLogger(AnswerDataInjector.class);
+
+  private Map<String, String> fullNameData  = new HashMap<String, String>();
+
+  private int[]               infoIject     = new int[] { 0, 0, 0, 0 };
+
+  private Category            categoryRoot  = null;
+
+  private FAQService          faqService;
+
+  private FAQSetting          faqSetting    = new FAQSetting();
+
+  private List<String>        categoryIds   = new ArrayList<String>();
+  
+  public static final String SLASH         = "/".intern();
+  public static final String  ARRAY_SPLIT   = ",";
+
+  enum CONSTANTS {
+    TYPE("type"), DATA("data"), PERM("perm"), Q("q"), PRE("pre"), ANY("any"),
+    EDIT("edit"), VIEW("view"), ATT("att"), ATTCP("attCp"), TXTCP("txtCp");
+    private final String name;
+
+    CONSTANTS(String name) {
+      this.name = name;
+    }
+    
+    public String getName() {
+      return name;
+    }
+  };
+
+  public AnswerDataInjector(FAQService faqService) {
+    this.faqService = faqService;
+    initDatas();
+  }
+
+  private void initDatas() {
+    faqSetting.setDisplayMode("");
+    faqSetting.setEmailSettingSubject("eXo Answers Notification");
+    faqSetting.setEmailSettingContent("<p>We have a new question or answer by injector datas in category " +
+    		"<strong>&categoryName_</strong></p><p><em>&questionContent_</em></p>");
+    List<String> users = Arrays.asList(new String[] { "root", "demo", "mary", "john" });
+    List<String> userFullNames = Arrays.asList(new String[] { "Root Root", "Demo", "Mary Kelly", "John Anthony" });
+    for (int i = 0; i < users.size(); ++i) {
+      fullNameData.put(users.get(i), userFullNames.get(i));
+    }
+  }
+
+  @Override
+  public Log getLog() {
+    return log;
+  }
+
+  private Category getCategoryRoot(boolean isUpdate) {
+    try {
+      if (isUpdate || categoryRoot == null) {
+        categoryRoot = faqService.getCategoryById(KSDataLocation.Locations.FAQ_CATEGORIES_HOME);
+        if(categoryRoot.getModerators() == null || categoryRoot.getModerators().length == 0) {
+          categoryRoot.setModerators(new String[] { "root" });
+          faqService.saveCategory(null, categoryRoot, false);
+        }
+      }
+      return categoryRoot;
+    } catch (Exception e) {
+      return null;
+    }
+  }  
+  
+  private String makeName(String prefix, int leve, int order) {
+    return prefix + "_" + leve + "_" + order;
+  }
+
+  private String makeId(String prefix, String type, int leve, int order) {
+    return type + prefix + leve + order;
+  }
+
+
+  private List<Category> findCategories(int leve, InjectInfo info) {
+    List<Category> categories = new ArrayList<Category>();
+    if (info.getCategories() > 0) {
+      Category cat;
+      String catName = "", catId = "";
+      for (int i = 0; i < info.getCategories(); i++) {
+        catId = makeId(info.getPreCategories(), Category.CATEGORY_ID, leve, i + 1);
+        catName = makeName(info.getPreCategories(), leve, i + 1);
+        cat = newCategory(catId, catName, i + 1, info);
+        categories.add(cat);
+      }
+    }
+    return categories;
+  }
+
+  private List<Question> findQuestion(String catId, int leve, InjectInfo info) {
+    List<Question> questions = new ArrayList<Question>();
+    if (info.getQuestions() > 0) {
+      String queName = "", queId = "";
+      for (int i = 0; i < info.getQuestions(); i++) {
+        queId = makeId(info.getPreQuestions(), Question.QUESTION_ID, leve, i + 1);
+        queName = makeName(info.getPreQuestions(), leve, i + 1);
+        questions.add(newQuestion(catId, queId, queName, info));
+      }
+    }
+    return questions;
+  }
+
+  private List<Answer> findAnswers(InjectInfo info) {
+    List<Answer> answers = new ArrayList<Answer>();
+    if (info.getAnswers() > 0) {
+      String asId = "";
+      for (int i = 0; i < info.getAnswers(); i++) {
+        asId = makeId(info.getPreAnswers(), Answer.ANSWER_ID, 1, i);
+        answers.add(newAnswer(asId, info));
+      }
+    }
+    return answers;
+  }
+
+  private List<Comment> findComments(InjectInfo info) {
+    List<Comment> comments = new ArrayList<Comment>();
+    if (info.getComments() > 0) {
+      String cmId = "";
+      for (int i = 0; i < info.getComments(); i++) {
+        cmId = makeId(info.getPreComments(), Answer.ANSWER_ID, 1, i);
+        comments.add(newComment(cmId, info));
+      }
+    }
+    return comments;
+  }
+
+  private String getTabs(int currentDepth) {
+    String s = "";
+    for (int i = 0; i < currentDepth; i++) {
+      s += "    ";
+    }
+    return s;
+  }
+  
+  private void initDataForOneCategory(String parentId, Category cat, int currentDepth, int index, int size, InjectInfo info) throws Exception {
+    String catId = parentId + SLASH + cat.getId();
+    boolean isExist = faqService.isExisting(catId);
+    String questionId, stt = "Update";
+    String s = getTabs(currentDepth);
+    List<Question> questions = findQuestion(catId, currentDepth, info);
+    int index_ = 0, size_ = questions.size(), as = 0, cm = 0;
+    if (!isExist) {
+      stt = "Add new";
+      faqService.saveCategory(parentId, cat, true);
+      infoIject[0]++;
+    }
+    log.info(String.format(" %s %s Category %s/%s with %s questions...", s, stt, index, size, size_));
+    long t1;
+    for (Question question : questions) {
+      t1 = System.currentTimeMillis();
+      questionId = catId + SLASH + Utils.QUESTION_HOME + SLASH + question.getId();
+      isExist = faqService.isExisting(questionId);
+      stt = "Update";
+      if (!isExist) {
+        faqService.saveQuestion(question, true, faqSetting);
+        infoIject[1] += 1;
+        stt = "Add new";
+      } else {
+        try {
+          if(info.getMaxAtt() > faqService.getQuestionById(questionId).getAttachMent().size()){
+            question.setPath(questionId);
+            faqService.saveQuestion(question, false, faqSetting);
+          }
+        } catch (Exception e) {
+          log.info("Failed to get attachments.");
+        }
+      }
+      List<Answer> answers = findAnswers(info);
+      for (Answer answer : answers) {
+        isExist = faqService.isExisting(questionId + SLASH + Utils.ANSWER_HOME + SLASH + answer.getId());
+        if (!isExist) {
+          faqService.saveAnswer(questionId, answer, true);
+          infoIject[2] += 1;
+          as += 1;
+        }
+      }
+      List<Comment> comments = findComments(info);
+      for (Comment comment : comments) {
+        isExist = faqService.isExisting(questionId + SLASH + Utils.COMMENT_HOME + SLASH + comment.getId());
+        if (!isExist) {
+          faqService.saveComment(questionId, comment, true);
+          infoIject[3] += 1;
+          cm += 1;
+        }
+      }
+      log.info(String.format(" %s %s Question %s/%s  with %s new answer(s) and %s new comment(s) in %sms",
+                             s, stt,++index_, size_, as, cm, (System.currentTimeMillis() - t1)));
+    }
+  }
+
+  private void createCategory(String parentId, Category me, int currentDepth,int index, int size, InjectInfo info) throws Exception {
+    initDataForOneCategory(parentId, me, currentDepth, index, size, info);
+    List<Category> cats = findCategories(currentDepth+1, info);
+    int index_ = 1, size_ = cats.size();
+    for (Category cat : cats) {
+      if (currentDepth + 1 < info.getDepth()) {
+        createCategory(parentId + SLASH + me.getId(), cat, currentDepth + 1, index_, size_, info);
+        index_++;
+      }
+    }
+  }
+
+  private void injectData(InjectInfo info) throws Exception {
+    String parentId = KSDataLocation.Locations.FAQ_CATEGORIES_HOME;
+    infoIject = new int[] { 0, 0, 0, 0 };
+    log.info("Start inject data for answer ....");
+    long time = System.currentTimeMillis();
+    List<Category> cats = findCategories(0, info);
+    int size = cats.size(), index = 1;
+    for (Category cat : cats) {
+      categoryIds.add(parentId + SLASH + cat.getId());
+      createCategory(parentId, cat, 0, index, size, info);
+      index++;
+    }
+    time = System.currentTimeMillis() - time;
+    log.info(String.format("INJECTED : new categories=%s / new questions=%s / new answers=%s / new comments=%s / time=%sms", 
+                           infoIject[0], infoIject[1], infoIject[2], infoIject[3], time));
+    saveHistoryInject();
+  }
+  
+  @Override
+  public void inject(HashMap<String, String> queryParams) throws Exception {
+    InjectInfo info = new InjectInfo(queryParams, getCategoryRoot(true));
+    String type = info.getType();
+    if (CONSTANTS.DATA.getName().equalsIgnoreCase(type) || 
+        CONSTANTS.PERM.toString().equalsIgnoreCase(type)) {
+      log.info(String.format("Injecting by type: %s ...", type));
+      injectData(info);
+    } else {
+      log.info(String.format("Do not support type %s for injector...", type));
+    }
+  }
+
+  private void removeData() throws Exception {
+    try {
+      if (categoryIds.isEmpty()) {
+        categoryIds.addAll(getHistoryInject());
+      }
+      for (String categoryId : categoryIds) {
+        faqService.removeCategory(categoryId);
+      }
+      log.info("Completely remove the datas inject !");
+      categoryIds.clear();
+      Category category = getCategoryRoot(false);
+      category.setDescription("");
+      category.setModerators(new String[] { "root" });
+      faqService.saveCategory(null, category, false);
+    } catch (Exception e) {
+      log.warn("Failed to remove data injected....");
+    }
+  }
+
+  @Override
+  public void reject(HashMap<String, String> queryParams) throws Exception {
+    log.info("Start remove data injected....");
+    removeData();
+  }
+
+  private List<String> getHistoryInject() {
+    try {
+      return convertStringToList(getCategoryRoot(true).getDescription());
+    } catch (Exception e) {
+      return new ArrayList<String>();
+    }
+  }
+
+  private void saveHistoryInject() {
+    try {
+      String s = getCategoryRoot(true).getDescription();
+      if (s != null && s.trim().length() > 0) {
+        categoryIds.addAll(convertStringToList(s));
+      }
+      Category category = getCategoryRoot(false);
+      category.setDescription(categoryIds.toString());
+      faqService.saveCategory(null, category, false);
+    } catch (Exception e) {
+    }
+  }
+
+  public static List<String> convertStringToList(String s) {
+    s = s.replace("[", "").replace("]", "");
+    s = s.trim().replaceAll("(,\\s*)", ",").replaceAll("(\\s*,)", ",");
+    String[] strs = s.split(",");
+    return new ArrayList<String>(Arrays.asList(strs));
+  }
+
+  private Category newCategory(String catId, String catName, int order, InjectInfo info) {
+    Category category = new Category();
+    category.setId(catId);
+    category.setName(catName);
+    category.setDescription(randomWords(20));
+    category.setIndex(order);
+    category.setModerators(info.getPerCanEdit());
+    category.setUserPrivate(info.getPerCanView());
+    return category;
+  }
+
+  private Question newQuestion(String catId, String id, String name, InjectInfo info) {
+    Question question = new Question();
+    question.setId(id);
+    question.setQuestion(name);
+    question.setAuthor(randomUser());
+    question.setCategoryId(catId);
+    question.setDetail(getStringResource(info));
+    question.setEmail("noreply@exoplatform.com");
+    question.setLanguage("English");
+    question.setLink("");
+    question.setTopicIdDiscuss("");
+    question.setMarkVote(0.0);
+    question.setRelations(new String[] { "" });
+    question.setUsersWatch(new String[] { "" });
+    question.setEmailsWatch(new String[] { "" });
+    question.setCreatedDate(new Date());
+    if (info.getMaxAtt() > 0) {
+      try {
+        question.setAttachMent(getFileAttachment(info));
+      } catch (Exception e) {
+        log.warn("Failed to set attachment in question.");
+      }
+    }
+    return question;
+  }
+
+  private Answer newAnswer(String id, InjectInfo info) {
+    String other = randomUser();
+    Answer answer = new Answer(other, true);
+    answer.setId(id);
+    answer.setFullName(getFullName(other));
+    answer.setLanguage("English");
+    answer.setMarksVoteAnswer(0.0);
+    answer.setMarkVotes(0);
+    answer.setResponses(getStringResource(info));
+    answer.setNew(true);
+    return answer;
+  }
+
+  private Comment newComment(String id, InjectInfo info) {
+    String other = randomUser();
+    Comment comment = new Comment();
+    comment.setId(id);
+    comment.setCommentBy(other);
+    comment.setComments(getStringResource(info));
+    comment.setFullName(getFullName(other));
+    comment.setPostId("");
+    comment.setNew(true);
+    return comment;
+  }
+
+  private String getFullName(String userName) {
+    try {
+      return fullNameData.get(userName);
+    } catch (Exception e) {
+      return "No Name";
+    }
+  }
+
+  @Override
+  public Object execute(HashMap<String, String> arg0) throws Exception {
+    return new Object();
+  }
+  
+  private String getStringResource(InjectInfo info) {
+    if(info.getTxtCp() > 0) {
+      return createTextResource(info.getTxtCp());
+    }
+    return randomParagraphs(3);
+  }
+
+  private List<FileAttachment> getFileAttachment(InjectInfo info) throws Exception {
+    List<FileAttachment> listAttachments = new ArrayList<FileAttachment>();
+    String rs = createTextResource(info.getAttCp());
+    for (int i = 0; i < info.getMaxAtt(); i++) {
+      InputStream stream = new ByteArrayInputStream(rs.getBytes("UTF-8"));
+      FileAttachment fileAttachment = new FileAttachment();
+      fileAttachment.setInputStream(stream);
+      fileAttachment.setMimeType("text/plain");
+      fileAttachment.setName("Attch_" + (i + 1) + ".txt");
+      fileAttachment.setNodeName("Attch" + (i + 1) + ".txt");
+      listAttachments.add(fileAttachment);
+      stream.close();
+    }
+    return listAttachments;
+  }
+}
Index: component/injector/src/main/java/org/exoplatform/ks/bench/InjectInfo.java
===================================================================
--- component/injector/src/main/java/org/exoplatform/ks/bench/InjectInfo.java	(revision 0)
+++ component/injector/src/main/java/org/exoplatform/ks/bench/InjectInfo.java	(revision 0)
@@ -0,0 +1,275 @@
+/*
+ * Copyright (C) 2003-2011 eXo Platform SAS.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Affero General Public License
+ * as published by the Free Software Foundation; either version 3
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, see<http://www.gnu.org/licenses/>.
+ */
+package org.exoplatform.ks.bench;
+
+import java.util.HashMap;
+
+import org.exoplatform.ks.bench.AnswerDataInjector.CONSTANTS;
+import org.exoplatform.faq.service.Category;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : Vu Duy Tu
+ *          tu.duy@exoplatform.com
+ * Aug 29, 2011  
+ */
+public class InjectInfo {
+  public static final String ARRAY_SPLIT   = ",".intern();
+
+  private int                categories    = 3;
+
+  private int                depth         = 3;
+
+  private int                questions     = 4;
+
+  private int                answers       = 10;
+
+  private int                comments      = 10;
+
+  private int                maxAtt        = 0;
+
+  private int                attCp         = 100;
+
+  private int                txtCp         = 0;
+
+  private String             type          = "";
+
+  private String             preCategories = "";
+
+  private String             preQuestions  = "";
+
+  private String             preAnswers    = "";
+
+  private String             preComments   = "";
+
+  private String[]           perCanView    = new String[] { "" };
+
+  private String[]           perCanEdit    = new String[] { "root" };
+
+  private Category           rootCategory;
+
+  HashMap<String, String>    queryParams;
+
+  public InjectInfo() {
+  }
+
+  public InjectInfo(HashMap<String, String> queryParams, Category category) throws Exception {
+    this.queryParams = queryParams;
+    this.rootCategory = category;
+    this.perCanEdit    = new String[] { "root" };
+    setQueryParams(queryParams);
+  }
+
+  public String getType() {
+    return type;
+  }
+
+  public void setType(String type) {
+    this.type = type;
+  }
+
+  public int getCategories() {
+    return categories;
+  }
+
+  public void setCategories(int categories) {
+    this.categories = categories;
+  }
+
+  public int getDepth() {
+    return depth;
+  }
+
+  public void setDepth(int depth) {
+    this.depth = depth;
+  }
+
+  public int getQuestions() {
+    return questions;
+  }
+
+  public void setQuestions(int questions) {
+    this.questions = questions;
+  }
+
+  public int getAnswers() {
+    return answers;
+  }
+
+  public void setAnswers(int answers) {
+    this.answers = answers;
+  }
+
+  public int getComments() {
+    return comments;
+  }
+
+  public void setComments(int comments) {
+    this.comments = comments;
+  }
+
+  public int getMaxAtt() {
+    return maxAtt;
+  }
+
+  public void setMaxAtt(int maxAtt) {
+    this.maxAtt = maxAtt;
+  }
+
+  public int getAttCp() {
+    return attCp;
+  }
+
+  public void setAttCp(int attCp) {
+    this.attCp = attCp;
+  }
+
+  public int getTxtCp() {
+    return txtCp;
+  }
+
+  public void setTxtCp(int txtCp) {
+    this.txtCp = txtCp;
+  }
+
+  public String getPreCategories() {
+    return preCategories;
+  }
+
+  public void setPreCategories(String preCategories) {
+    this.preCategories = preCategories;
+  }
+
+  public String getPreQuestions() {
+    return preQuestions;
+  }
+
+  public void setPreQuestions(String preQuestions) {
+    this.preQuestions = preQuestions;
+  }
+
+  public String getPreAnswers() {
+    return preAnswers;
+  }
+
+  public void setPreAnswers(String preAnswers) {
+    this.preAnswers = preAnswers;
+  }
+
+  public String getPreComments() {
+    return preComments;
+  }
+
+  public void setPreComments(String preComments) {
+    this.preComments = preComments;
+  }
+
+  public String[] getPerCanView() {
+    return perCanView;
+  }
+
+  public void setPerCanView(String[] perCanView) {
+    this.perCanView = perCanView;
+  }
+
+  public String[] getPerCanEdit() {
+    return perCanEdit;
+  }
+
+  public void setPerCanEdit(String[] perCanEdit) {
+    this.perCanEdit = perCanEdit;
+  }
+
+  private void readPermissions(HashMap<String, String> queryParams) throws Exception {
+    String[] perCanEdit = getValues(queryParams, AnswerDataInjector.CONSTANTS.EDIT.getName());
+    String[] perCanView = getValues(queryParams, AnswerDataInjector.CONSTANTS.VIEW.getName());
+    String[] mods = rootCategory.getModerators();
+    if (mods == null || mods.length == 0 || mods[0].trim().length() == 0) {
+      mods = new String[] { "root" };
+    }
+    if (CONSTANTS.PERM.getName().equalsIgnoreCase(type) && perCanEdit.length > 0 && 
+        !perCanEdit[0].equals(AnswerDataInjector.CONSTANTS.ANY.getName())) {
+      this.perCanEdit = new String[perCanEdit.length + 1];
+      this.perCanEdit[0] = mods[0];
+      System.arraycopy(perCanEdit, 0, this.perCanEdit, 1, perCanEdit.length);
+    } else {
+      this.perCanEdit = mods;
+    }
+    if (CONSTANTS.PERM.getName().equalsIgnoreCase(type) && perCanView.length > 0 && 
+        !perCanView[0].equals(AnswerDataInjector.CONSTANTS.ANY.getName())) {
+      this.perCanView = new String[perCanView.length + 1];
+      this.perCanView[0] = mods[0];
+      System.arraycopy(perCanView, 0, this.perCanView, 1, perCanView.length);
+    } else {
+      this.perCanView = new String[] { "" };
+    }
+  }
+
+  public void setQueryParams(HashMap<String, String> queryParams) throws Exception {
+    String[] quantities = getValues(queryParams, AnswerDataInjector.CONSTANTS.Q.getName());
+    categories = getParam(quantities, 0, categories);
+    depth = getParam(quantities, 1, depth);
+    questions = getParam(quantities, 2, questions);
+    answers = getParam(quantities, 3, answers);
+    comments = getParam(quantities, 4, comments);
+    String[] prefixes = getValues(queryParams, AnswerDataInjector.CONSTANTS.PRE.getName());
+    preCategories = getParam(prefixes, 0);
+    preQuestions = getParam(prefixes, 1);
+    preAnswers = getParam(prefixes, 2);
+    preComments = getParam(prefixes, 3);
+    type = queryParams.get(AnswerDataInjector.CONSTANTS.TYPE.getName());
+    this.maxAtt = getParam(queryParams, AnswerDataInjector.CONSTANTS.ATT.getName(), 0);
+    if (maxAtt > 0) {
+      this.attCp = getParam(queryParams, AnswerDataInjector.CONSTANTS.ATTCP.getName(), 100);
+    }
+    this.txtCp = getParam(queryParams, AnswerDataInjector.CONSTANTS.TXTCP.getName(), 0);
+    readPermissions(queryParams);
+  }
+
+  private int getParam(String[] param, int index, int df) throws Exception {
+    try {
+      return Integer.parseInt(param[index].trim());
+    } catch (Exception e) {
+      return df;
+    }
+  }
+
+  private int getParam(HashMap<String, String> queryParams, String key, int df) throws Exception {
+    try {
+      return Integer.parseInt(queryParams.get(key));
+    } catch (Exception e) {
+      return df;
+    }
+  }
+
+  private String getParam(String[] param, int index) throws Exception {
+    try {
+      return param[index].trim();
+    } catch (Exception e) {
+      return "";
+    }
+  }
+
+  private String[] getValues(HashMap<String, String> queryParams, String key) throws Exception {
+    try {
+      return queryParams.get(key).split(ARRAY_SPLIT);
+    } catch (Exception e) {
+      return new String[] {};
+    }
+  }
+
+}
Index: component/injector/src/main/resources/conf/portal/configuration.xml
===================================================================
--- component/injector/src/main/resources/conf/portal/configuration.xml	(revision 0)
+++ component/injector/src/main/resources/conf/portal/configuration.xml	(revision 0)
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_2.xsd http://www.exoplaform.org/xml/ns/kernel_1_2.xsd"
+  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_2.xsd">
+
+
+
+  <!-- This component initializes forum with random data -->
+
+  <component>
+    <type>org.exoplatform.services.bench.DataInjectorService</type>
+  </component>
+  
+  <external-component-plugins>
+    <target-component>org.exoplatform.services.bench.DataInjectorService</target-component>
+    <component-plugin>
+      <name>ForumDataInjector</name>
+      <set-method>addInjector</set-method>
+      <type>org.exoplatform.ks.bench.ForumDataInjector</type>
+      <description>inject data for Forum</description>
+    </component-plugin>
+    
+    <component-plugin>
+      <name>AnswerDataInjector</name>
+      <set-method>addInjector</set-method>
+      <type>org.exoplatform.ks.bench.AnswerDataInjector</type>
+      <description>inject data for Answer</description>
+    </component-plugin>
+    
+  </external-component-plugins>
+</configuration>
+  
\ No newline at end of file
Index: component/injector/pom.xml
===================================================================
--- component/injector/pom.xml	(revision 0)
+++ component/injector/pom.xml	(revision 0)
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>org.exoplatform.ks</groupId>
+    <artifactId>exo.ks.component</artifactId>
+    <version>2.1.7-SNAPSHOT</version>
+  </parent>
+  <artifactId>exo.ks.component.injector</artifactId>
+  <name>eXo KS Data Injector</name>
+  <dependencies>
+    <dependency>
+      <groupId>org.exoplatform.kernel</groupId>
+      <artifactId>exo.kernel.commons</artifactId>
+      <version>${org.exoplatform.kernel.version}</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.kernel</groupId>
+      <artifactId>exo.kernel.container</artifactId>
+      <version>${org.exoplatform.kernel.version}</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.jcr</groupId>
+      <artifactId>exo.jcr.component.core</artifactId>
+      <version>${org.exoplatform.jcr.version}</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.ks</groupId>
+      <artifactId>exo.ks.eXoApplication.faq.service</artifactId>
+      <version>${project.version}</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.ks</groupId>
+      <artifactId>exo.ks.eXoApplication.forum.service</artifactId>
+      <version>${project.version}</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.exoplatform.commons</groupId>
+      <artifactId>exo.platform.commons.component</artifactId>
+      <version>${org.exoplatform.commons.version}</version>
+      <scope>provided</scope>
+    </dependency>
+  </dependencies>
+</project>
Index: demo/war/src/main/webapp/WEB-INF/conf/ksdemo/ks/bench-configuration.xml
===================================================================
--- demo/war/src/main/webapp/WEB-INF/conf/ksdemo/ks/bench-configuration.xml	(revision 79503)
+++ demo/war/src/main/webapp/WEB-INF/conf/ksdemo/ks/bench-configuration.xml	(working copy)
@@ -1,42 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-
-<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd http://www.exoplaform.org/xml/ns/kernel_1_0.xsd"
-  xmlns="http://www.exoplaform.org/xml/ns/kernel_1_0.xsd">
-
-
-
-  <!-- This component initializes forum with random data -->
-
-  <component>
-    <key>org.exoplatform.forum.bench.ForumDataInitializer</key>
-    <type>org.exoplatform.forum.bench.ForumDataInitializer</type>
-  </component>
-  <component>
-    <key>org.exoplatform.forum.bench.ForumDataProvider</key>
-    <type>org.exoplatform.forum.bench.RandomForumDataProvider</type>
-    <init-params>
-      <value-param>
-        <name>maxCategories</name>
-        <value>10</value>
-      </value-param>
-      <value-param>
-        <name>maxForums</name>
-        <value>3</value>
-      </value-param>
-      <value-param>
-        <name>maxTopics</name>
-        <value>50</value>
-      </value-param>
-      <value-param>
-        <name>maxPosts</name>
-        <value>50</value>
-      </value-param>
-      <value-param>
-        <name>randomize</name>
-        <value>true</value>
-      </value-param>
-    </init-params>
-  </component>
-</configuration>
-  
\ No newline at end of file
Index: packaging/pkg/pom.xml
===================================================================
--- packaging/pkg/pom.xml	(revision 79503)
+++ packaging/pkg/pom.xml	(working copy)
@@ -161,6 +161,11 @@
     <version>${org.exoplatform.commons.version}</version>
     <type>war</type>
     </dependency>
+    <dependency>
+      <groupId>org.exoplatform.commons</groupId>
+      <artifactId>exo.platform.commons.component</artifactId>
+      <version>${org.exoplatform.commons.version}</version>
+    </dependency>
 	  <dependency>
 		<groupId>org.exoplatform.commons</groupId>
 		<artifactId>exo.platform.commons.fck</artifactId>
Index: packaging/module/src/main/javascript/ks.packaging.module.js
===================================================================
--- packaging/module/src/main/javascript/ks.packaging.module.js	(revision 79503)
+++ packaging/module/src/main/javascript/ks.packaging.module.js	(working copy)
@@ -81,6 +81,8 @@
   module.demo.portal =
     new Project("org.exoplatform.ks", "exo.ks.demo.webapp", "war", module.version).
     addDependency(new Project("org.exoplatform.ks", "exo.ks.demo.config", "jar", module.version)).
+    addDependency(new Project("org.exoplatform.ks", "exo.ks.component.injector", "jar", module.version)).
+    addDependency(new Project("org.exoplatform.commons", "exo.platform.commons.component", "jar", "${org.exoplatform.commons.version}")).
     addDependency(new Project("org.apache.pdfbox", "fontbox", "jar",  "${org.apache.pdfbox.fontbox.version}"));
   module.demo.portal.deployName = "ksdemo";  
 	
