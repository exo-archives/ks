Index: eXoApplication/poll/webapp/src/main/java/org/exoplatform/poll/webui/UIForumCheckBoxInput.java
===================================================================
--- eXoApplication/poll/webapp/src/main/java/org/exoplatform/poll/webui/UIForumCheckBoxInput.java	(revision 67741)
+++ eXoApplication/poll/webapp/src/main/java/org/exoplatform/poll/webui/UIForumCheckBoxInput.java	(working copy)
@@ -8,7 +8,7 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
@@ -19,90 +19,74 @@
 import java.io.Writer;
 
 import org.exoplatform.webui.application.WebuiRequestContext;
-import org.exoplatform.webui.form.UIForm;
+import org.exoplatform.webui.form.UIFormCheckBoxInput;
 import org.exoplatform.webui.form.UIFormInput;
-import org.exoplatform.webui.form.UIFormInputBase;
 
 /**
  * Created by The eXo Platform SAS
  * Author : Vu Duy Tu
- *          tu.duy@exoplatform.com
+ *					tu.duy@exoplatform.com
  * 24 Mar 2008, 08:00:59
  */
-public class UIForumCheckBoxInput<T> extends UIFormInputBase<T>{
-	 /**
-   * Whether this checkbox is checked
-   */
+public class UIForumCheckBoxInput<T> extends UIFormCheckBoxInput<T> {
+  /**
+  * Whether this checkbox is checked
+  */
   private boolean checked = false;
+
   /**
    * A javascript expression that will be fired when the value changes (JS onChange event)
    */
-  private String onchange_;
-  private String componentEvent_ = null;
 
   @SuppressWarnings("unchecked")
   public UIForumCheckBoxInput(String name, String bindingExpression, T value) {
     super(name, bindingExpression, null);
-    if(value != null) typeValue_ = (Class<T>)value.getClass();
+    if (value != null)
+      typeValue_ = (Class<T>) value.getClass();
     value_ = value;
     setId(name);
   }
-  
-  @SuppressWarnings("unchecked")
-  public UIFormInput setValue(T value){
-    if(value == null) return super.setValue(value);
-    if(value instanceof Boolean){
-      checked = ((Boolean)value).booleanValue();
-    } else if(boolean.class.isInstance(value)){
+
+  public UIFormInput setValue(T value) {
+    if (value == null)
+      return super.setValue(value);
+    if (value instanceof Boolean) {
+      checked = ((Boolean) value).booleanValue();
+    } else if (boolean.class.isInstance(value)) {
       checked = boolean.class.cast(value);
     }
-    typeValue_ = (Class<T>)value.getClass();
+    typeValue_ = (Class<T>) value.getClass();
     return super.setValue(value);
   }
-  
-  public void setOnChange(String onchange){ onchange_ = onchange; }  
- 
-  public void setComponentEvent(String com){ componentEvent_ = com; }
-  
-  public void setOnChange(String event, String com){
-    this.onchange_ = event; 
-    this.componentEvent_ = com;
-  } 
-  
-  public String renderOnChangeEvent(UIForm uiForm) throws Exception {
-    if(componentEvent_ == null)  return uiForm.event(onchange_, null);
-    return  uiForm.event(onchange_, componentEvent_ , (String)null);
+
+  final public boolean isCheckedBox() {
+    checked = isChecked();
+    return checked;
   }
-  
-  final public boolean isChecked() { return checked; }  
-  
-  @SuppressWarnings("unchecked")
-  final public UIForumCheckBoxInput setChecked(boolean check) { 
+
+  final public UIForumCheckBoxInput setCheckedBox(boolean check) {
     checked = check;
-    return this ;
-  } 
-  
-  public void decode(Object input, WebuiRequestContext context)  throws Exception {
-    if (!isEnable()) return ;    
-    if (input == null) checked = false; else checked = true;
-    if(typeValue_ == Boolean.class || typeValue_ == boolean.class) {
-      value_ = typeValue_.cast(checked);
-    }
+    setChecked(check);
+    return this;
   }
-  
+
   public void processRender(WebuiRequestContext context) throws Exception {
-    Writer w =  context.getWriter() ;    
-    w.write("<input type='checkbox' name='"); w.write(name); w.write("'") ;
-    w.write(" value='"); 
-    if(value_ != null)  w.write(String.valueOf(value_));
+    Writer w = context.getWriter();
+    w.write("<input type='checkbox' name='");
+    w.write(name);
+    w.write("'");
+    w.write(" value='");
+    if (value_ != null)
+      w.write(String.valueOf(value_));
     w.write("' ");
-    if(onchange_ != null) {
-      UIForm uiForm = getAncestorOfType(UIForm.class) ;
-      w.append(" onclick=\"").append(renderOnChangeEvent(uiForm)).append("\"");
-    }
-    if(checked) w.write(" checked ") ;
-    if (!enable_)  w.write(" disabled ");    
-    w.write(" class='checkbox'/> ") ;
-    w.write(name + "<br/>") ;
+    if (isChecked())
+      w.write(" checked ");
+    if (!enable_)
+      w.write(" disabled ");
+    w.write(" class='checkbox'/>");
+    w.write("<span> " + name + "</span><br/>");
+    if (this.isMandatory())
+      w.write(" *");
   }
 }
+
Index: eXoApplication/poll/webapp/src/main/resources/locale/portlet/poll/PollPortlet_fr.properties
===================================================================
--- eXoApplication/poll/webapp/src/main/resources/locale/portlet/poll/PollPortlet_fr.properties	(revision 67741)
+++ eXoApplication/poll/webapp/src/main/resources/locale/portlet/poll/PollPortlet_fr.properties	(working copy)
@@ -26,8 +26,9 @@
 #############################################################################
 #								 UIPollForm																					  			#
 #############################################################################
-UIPollPopupWindow.title.UIPollForm=Sondage
-UIPollPopupWindow.title.PollForm=Sondage
+UIPopupWindow.title.UIPollForm=Sondage
+UIPopupWindow.title.UIAddPollForm=#{UIPopupWindow.title.UIPollForm}
+UIPopupWindow.title.UIEditPollForm=#{UIPopupWindow.title.UIPollForm}
 UIPollForm.action.Cancel=Annuler
 UIPollForm.action.Refresh=Réinitialiser
 UIPollForm.action.Save=Soumettre le sondage
@@ -35,6 +36,7 @@
 UIPollForm.label.Question=Question du sondage
 UIPollForm.label.LimitOption=options
 UIPollForm.label.Option=Option
+UIPollForm.label.PublicData=Données publiques
 UIPollForm.label.TimeOut=Fermer le sondage après
 UIPollForm.label.DayAfter=jours après
 UIPollForm.label.MultiVote=Autoriser les choix multiples
@@ -45,6 +47,9 @@
 
 UIPollPortlet.label.Expand=Expand
 UIPollPortlet.label.Collapse=Collapse
+UIPollPortlet.label.RemoveItem=Supprimer cet élément
+UIPollPortlet.label.AddItem=Ajouter un élément
+
 UIPollManagement.header.lastVote=Last Vote
 UIPollManagement.header.question=Question
 UIPollManagement.header.votes=Votes
Index: eXoApplication/poll/webapp/src/main/resources/locale/portlet/poll/PollPortlet.properties
===================================================================
--- eXoApplication/poll/webapp/src/main/resources/locale/portlet/poll/PollPortlet.properties	(revision 67741)
+++ eXoApplication/poll/webapp/src/main/resources/locale/portlet/poll/PollPortlet.properties	(working copy)
@@ -67,6 +67,9 @@
 
 UIPollPortlet.label.Expand=Expand
 UIPollPortlet.label.Collapse=Collapse
+UIPollPortlet.label.RemoveItem=Remove Item
+UIPollPortlet.label.AddItem=Add Item
+
 UIPollManagement.header.lastVote=Last Vote
 UIPollManagement.header.question=Question
 UIPollManagement.header.votes=Votes
Index: eXoApplication/poll/webapp/src/main/resources/locale/portlet/poll/PollPortlet_en.properties
===================================================================
--- eXoApplication/poll/webapp/src/main/resources/locale/portlet/poll/PollPortlet_en.properties	(revision 67741)
+++ eXoApplication/poll/webapp/src/main/resources/locale/portlet/poll/PollPortlet_en.properties	(working copy)
@@ -42,7 +42,7 @@
 #############################################################################
 UIPopupWindow.title.UIAddPollForm=Add New Poll
 UIPopupWindow.title.UIEditPollForm=Edit Poll
-UIPollPopupWindow.title.UIPollForm=Poll
+UIPopupWindow.title.UIPollForm=Poll
 UIPollForm.action.Cancel=Cancel
 UIPollForm.action.Refresh=Reset fields
 UIPollForm.action.Save=Submit poll
@@ -67,6 +67,9 @@
 
 UIPollPortlet.label.Expand=Expand
 UIPollPortlet.label.Collapse=Collapse
+UIPollPortlet.label.RemoveItem=Remove Item
+UIPollPortlet.label.AddItem=Add Item
+
 UIPollManagement.header.lastVote=Last Vote
 UIPollManagement.header.question=Question
 UIPollManagement.header.votes=Votes
Index: eXoApplication/faq/webapp/src/main/resources/locale/portlet/faq/AnswersPortlet.properties
===================================================================
--- eXoApplication/faq/webapp/src/main/resources/locale/portlet/faq/AnswersPortlet.properties	(revision 67741)
+++ eXoApplication/faq/webapp/src/main/resources/locale/portlet/faq/AnswersPortlet.properties	(working copy)
@@ -12,6 +12,8 @@
 UIAnswersPortlet.action.Close=#{word.close}
 UIAnswersPortlet.action.Cancel=#{word.cancel}
 UIAnswersPortlet.label.deny-access-edit-mode=You can not see this feature because you are not a moderator !
+UIAnswersPortlet.label.RemoveItem=Remove Item
+UIAnswersPortlet.label.AddItem=Add Item
 
 #############################################################################
 #							UICategoryForm																							 #
Index: eXoApplication/faq/webapp/src/main/resources/locale/portlet/faq/AnswersPortlet_en.properties
===================================================================
--- eXoApplication/faq/webapp/src/main/resources/locale/portlet/faq/AnswersPortlet_en.properties	(revision 67741)
+++ eXoApplication/faq/webapp/src/main/resources/locale/portlet/faq/AnswersPortlet_en.properties	(working copy)
@@ -12,6 +12,8 @@
 UIAnswersPortlet.action.Close=#{word.close}
 UIAnswersPortlet.action.Cancel=#{word.cancel}
 UIAnswersPortlet.label.deny-access-edit-mode=You can not see this feature because you are not a moderator !
+UIAnswersPortlet.label.RemoveItem=Remove Item
+UIAnswersPortlet.label.AddItem=Add Item
 
 #############################################################################
 #							UICategoryForm																							 #
Index: eXoApplication/faq/webapp/src/main/resources/locale/portlet/faq/AnswersPortlet_fr.properties
===================================================================
--- eXoApplication/faq/webapp/src/main/resources/locale/portlet/faq/AnswersPortlet_fr.properties	(revision 67741)
+++ eXoApplication/faq/webapp/src/main/resources/locale/portlet/faq/AnswersPortlet_fr.properties	(working copy)
@@ -12,6 +12,8 @@
 UIAnswersPortlet.action.Close=#{word.close}
 UIAnswersPortlet.action.Cancel=#{word.cancel}
 UIAnswersPortlet.label.deny-access-edit-mode=Vous ne pouvez pas voir cette fonctionnalité car vous n'êtes pas un modérateur!
+UIAnswersPortlet.label.RemoveItem=Supprimer cet élément
+UIAnswersPortlet.label.AddItem=Ajouter un élément
 
 #############################################################################
 #							UICategoryForm																							 #
Index: eXoApplication/common/src/main/java/org/exoplatform/ks/common/webui/UIFormMultiValueInputSet.java
===================================================================
--- eXoApplication/common/src/main/java/org/exoplatform/ks/common/webui/UIFormMultiValueInputSet.java	(revision 67741)
+++ eXoApplication/common/src/main/java/org/exoplatform/ks/common/webui/UIFormMultiValueInputSet.java	(working copy)
@@ -23,11 +23,15 @@
 import java.lang.reflect.Constructor;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.ResourceBundle;
 
+import org.exoplatform.services.log.ExoLogger;
+import org.exoplatform.services.log.Log;
 import org.exoplatform.webui.application.WebuiRequestContext;
 import org.exoplatform.webui.config.annotation.ComponentConfig;
 import org.exoplatform.webui.config.annotation.EventConfig;
 import org.exoplatform.webui.core.UIComponent;
+import org.exoplatform.webui.core.UIPortletApplication;
 import org.exoplatform.webui.event.Event;
 import org.exoplatform.webui.event.EventListener;
 import org.exoplatform.webui.event.Event.Phase;
@@ -44,250 +48,235 @@
  * 
  * Represents a multi value selector
  */
-@ComponentConfig(events = {
-   @EventConfig(listeners = UIFormMultiValueInputSet.AddActionListener.class, phase = Phase.DECODE),
-   @EventConfig(listeners = UIFormMultiValueInputSet.RemoveActionListener.class, phase = Phase.DECODE)})
-public class UIFormMultiValueInputSet extends UIFormInputContainer<List>
-{
-   /**
-    * A list of validators
-    */
-   protected List<Validator> validators;
+@ComponentConfig(
+    events = { 
+        @EventConfig(listeners = UIFormMultiValueInputSet.AddActionListener.class, phase = Phase.DECODE), 
+        @EventConfig(listeners = UIFormMultiValueInputSet.RemoveActionListener.class, phase = Phase.DECODE) 
+    }
+)
+@SuppressWarnings("unchecked")
+public class UIFormMultiValueInputSet extends UIFormInputContainer<List> {
+  protected Log log = ExoLogger.getLogger(this.getClass());
+  /**
+   * A list of validators
+   */
+  protected List<Validator>            validators;
 
-   /**
-    * The type of items in the selector
-    */
-   private Class<? extends UIFormInput> clazz_;
+  /**
+   * The type of items in the selector
+   */
+  private Class<? extends UIFormInput> clazz_;
 
-   private Constructor constructor_ = null;
+  private Constructor                  constructor_         = null;
 
-   private List<Integer> listIndexItemRemoved = new ArrayList<Integer>();
-   
-   private int maxOld = 0;
-   /**
-    * Whether this field is enabled
-    */
-   protected boolean enable_ = true;
+  private List<Integer>                listIndexItemRemoved = new ArrayList<Integer>();
 
-   /**
-    * Whether this field is in read only mode
-    */
-   protected boolean readonly_ = false;
+  private int                          maxOld               = 0;
 
-   public UIFormMultiValueInputSet() throws Exception
-   {
-      super(null, null);
-   }
+  /**
+   * Whether this field is enabled
+   */
+  protected boolean                    enable_              = true;
 
-   public UIFormMultiValueInputSet(String name, String bindingField) throws Exception
-   {
-      super(name, bindingField);
-      setComponentConfig(getClass(), null);
-   }
+  /**
+   * Whether this field is in read only mode
+   */
+  protected boolean                    readonly_            = false;
 
-   public Class<List> getTypeValue()
-   {
-      return List.class;
-   }
+  public UIFormMultiValueInputSet() throws Exception {
+    super(null, null);
+  }
 
-   public void setType(Class<? extends UIFormInput> clazz)
-   {
-      this.clazz_ = clazz;
-      Constructor[] constructors = clazz_.getConstructors();
-      if (constructors.length > 0) {
-         constructor_ = constructors[0];
-         if (constructor_.getParameterTypes().length == 0)
-           constructor_ = constructors[constructors.length - 1]; 
-      }
-   }
+  public UIFormMultiValueInputSet(String name, String bindingField) throws Exception {
+    super(name, bindingField);
+    setComponentConfig(getClass(), null);
+  }
 
-   public Class<? extends UIFormInput> getUIFormInputBase()
-   {
-      return clazz_;
-   }
+  public Class<List> getTypeValue() {
+    return List.class;
+  }
 
-   /**
-    * @return the selected items in the selector
-    */
-   public List<?> getValue()
-   {
-      List<Object> values = new ArrayList<Object>();
-      for (UIComponent child : getChildren())
-      {
-         UIFormInputBase uiInput = (UIFormInputBase)child;
-         if (uiInput.getValue() == null)
-            continue;
-         values.add(uiInput.getValue());
-      }
-      return values;
-   }
+  public void setType(Class<? extends UIFormInput> clazz) {
+    this.clazz_ = clazz;
+    Constructor[] constructors = clazz_.getConstructors();
+    if (constructors.length > 0) {
+      constructor_ = constructors[0];
+      if (constructor_.getParameterTypes().length == 0)
+        constructor_ = constructors[constructors.length - 1];
+    }
+  }
 
-   @SuppressWarnings("unchecked")
-   public UIFormInput setValue(List<?> values) throws Exception
-   {
-      getChildren().clear();
-      for (int i = 0; i < values.size(); i++)
-      {
-         UIFormInputBase uiInput = createUIFormInput(i);
-         uiInput.setValue(values.get(i));
-      }
-      return this;
-   }
+  public Class<? extends UIFormInput> getUIFormInputBase() {
+    return clazz_;
+  }
 
-   public boolean isEnable()
-   {
-      return enable_;
-   }
+  /**
+   * @return the selected items in the selector
+   */
+  public List<?> getValue() {
+    List<Object> values = new ArrayList<Object>();
+    for (UIComponent child : getChildren()) {
+      UIFormInputBase uiInput = (UIFormInputBase) child;
+      if (uiInput.getValue() == null)
+        continue;
+      values.add(uiInput.getValue());
+    }
+    return values;
+  }
 
-   public UIFormMultiValueInputSet setEnable(boolean enable)
-   {
-      enable_ = enable;
-      return this;
-   }
+  public UIFormInput setValue(List<?> values) throws Exception {
+    getChildren().clear();
+    for (int i = 0; i < values.size(); i++) {
+      UIFormInputBase uiInput = createUIFormInput(i);
+      uiInput.setValue(values.get(i));
+    }
+    return this;
+  }
 
-   public boolean isEditable()
-   {
-      return !readonly_;
-   }
+  public boolean isEnable() {
+    return enable_;
+  }
 
-   public UIFormMultiValueInputSet setEditable(boolean editable)
-   {
-      readonly_ = !editable;
-      return this;
-   }
+  public UIFormMultiValueInputSet setEnable(boolean enable) {
+    enable_ = enable;
+    return this;
+  }
 
-   public void processDecode(WebuiRequestContext context) throws Exception
-   {
-      super.processDecode(context);
-      UIForm uiForm = getAncestorOfType(UIForm.class);
-      String action = uiForm.getSubmitAction();
-      Event<UIComponent> event = createEvent(action, Event.Phase.DECODE, context);
-      if (event == null)
-         return;
-      event.broadcast();
-   }
+  public boolean isEditable() {
+    return !readonly_;
+  }
 
-   public void processRender(WebuiRequestContext context) throws Exception
-   {
-      if (getChildren() == null || getChildren().size() < 1)
-         createUIFormInput(0);
+  public UIFormMultiValueInputSet setEditable(boolean editable) {
+    readonly_ = !editable;
+    return this;
+  }
 
-      Writer writer = context.getWriter();
+  public void processDecode(WebuiRequestContext context) throws Exception {
+    super.processDecode(context);
+    UIForm uiForm = getAncestorOfType(UIForm.class);
+    String action = uiForm.getSubmitAction();
+    Event<UIComponent> event = createEvent(action, Event.Phase.DECODE, context);
+    if (event == null)
+      return;
+    event.broadcast();
+  }
+  
+  private String getResourceBundle(WebuiRequestContext context, String key, String dfValue) throws Exception {
+    ResourceBundle res = context.getApplicationResourceBundle();
+    UIPortletApplication app = getAncestorOfType(UIPortletApplication.class);
+    try {
+      dfValue = res.getString(app.getId() + key);
+    } catch (Exception e) {
+      log.warn("Can not find resource bundle for key : " + app.getId() + key);
+    }
+    return dfValue;
+  }
 
-      UIForm uiForm = getAncestorOfType(UIForm.class);
-      int size = getChildren().size();
-      //    ResourceBundle res = context.getApplicationResourceBundle() ;
+  public void processRender(WebuiRequestContext context) throws Exception {
+    if (getChildren() == null || getChildren().size() < 1)
+      createUIFormInput(0);
 
-      for (int i = 0; i < size; i++)
-      {
-         UIFormInputBase uiInput = getChild(i);
-         writer.append("<div class=\"MultiValueContainer\">");
+    Writer writer = context.getWriter();
 
-         uiInput.setEditable(!readonly_);
-         uiInput.setEnable(enable_);
+    UIForm uiForm = getAncestorOfType(UIForm.class);
+    int size = getChildren().size();
+    String rmItem = getResourceBundle(context, ".label.RemoveItem", "Remove Item") ;
+    String addItem =  getResourceBundle(context, ".label.AddItem", "Add Item") ;
 
-         uiInput.processRender(context);
+    for (int i = 0; i < size; i++) {
+      UIFormInputBase uiInput = getChild(i);
+      writer.append("<div class=\"MultiValueContainer\">");
 
-         if ((size >= 2) || ((size == 1) && (uiInput.getValue() != null)))
-         {
-            writer.append("<img onclick=\"");
-            writer.append(uiForm.event("Remove", uiInput.getId())).append("\" title=\"Remove Item\" alt=\"\"");
-            writer
-               .append(" class=\"MultiFieldAction Remove16x16Icon\" src=\"/eXoResources/skin/sharedImages/Blank.gif\" />");
-         }
-         if (i == size - 1)
-         {
+      uiInput.setEditable(!readonly_);
+      uiInput.setEnable(enable_);
 
-            writer.append("<img onclick=\"");
-            writer.append(uiForm.event("Add", getId())).append("\" title=\"Add Item\" alt=\"\"");
-            writer
-               .append(" class=\"MultiFieldAction AddNewNodeIcon\" src=\"/eXoResources/skin/sharedImages/Blank.gif\" />");
-         }
-         writer.append("</div>");
+      uiInput.processRender(context);
+
+      if ((size >= 2) || ((size == 1) && (uiInput.getValue() != null))) {
+        writer.append("<img onclick=\"");
+        writer.append(uiForm.event("Remove", uiInput.getId())).append("\" title=\"").append(rmItem).append("\" alt=\"").append(rmItem).append("\"");
+        writer.append(" class=\"MultiFieldAction Remove16x16Icon\" src=\"/eXoResources/skin/sharedImages/Blank.gif\" />");
       }
-   }
+      if (i == size - 1) {
 
-   public UIFormInputBase createUIFormInput(int idx) throws Exception
-   {
-      Class[] classes = constructor_.getParameterTypes();
-      Object[] params = new Object[classes.length];
-      for (int i = 0; i < classes.length; i++)
-      {
-         if (classes[i].isPrimitive())
-         {
-            if (classes[i] == boolean.class)
-               params[i] = false;
-            else
-               params[i] = 0;
-         }
+        writer.append("<img onclick=\"");
+        writer.append(uiForm.event("Add", getId())).append("\" title=\"").append(addItem).append("\" alt=\"").append(addItem).append("\"");
+        writer.append(" class=\"MultiFieldAction AddNewNodeIcon\" src=\"/eXoResources/skin/sharedImages/Blank.gif\" />");
       }
-      params[0] = getId() + String.valueOf(idx);
-      UIFormInputBase inputBase = (UIFormInputBase)constructor_.newInstance(params);
-      List<Validator> validators = this.getValidators();
-      if (validators != null)
-      {
-         for (Validator validator : validators)
-         {
-            inputBase.addValidator(validator.getClass());
-         }
+      writer.append("</div>");
+    }
+  }
+
+  public UIFormInputBase createUIFormInput(int idx) throws Exception {
+    Class[] classes = constructor_.getParameterTypes();
+    Object[] params = new Object[classes.length];
+    for (int i = 0; i < classes.length; i++) {
+      if (classes[i].isPrimitive()) {
+        if (classes[i] == boolean.class)
+          params[i] = false;
+        else
+          params[i] = 0;
       }
-      addChild(inputBase);
-      return inputBase;
-   }
+    }
+    params[0] = getId() + String.valueOf(idx);
+    UIFormInputBase inputBase = (UIFormInputBase) constructor_.newInstance(params);
+    List<Validator> validators = this.getValidators();
+    if (validators != null) {
+      for (Validator validator : validators) {
+        inputBase.addValidator(validator.getClass());
+      }
+    }
+    addChild(inputBase);
+    return inputBase;
+  }
 
   public void resetListIndexItemRemoved() {
-		this.listIndexItemRemoved = new ArrayList<Integer>();
-	}
+    this.listIndexItemRemoved = new ArrayList<Integer>();
+  }
 
-	public List<Integer> getListIndexItemRemoved() {
-		return listIndexItemRemoved;
-	}
+  public List<Integer> getListIndexItemRemoved() {
+    return listIndexItemRemoved;
+  }
 
-	public void setMaxOld(int maxOld) {
-		this.maxOld = maxOld;
-	}
+  public void setMaxOld(int maxOld) {
+    this.maxOld = maxOld;
+  }
 
-	public int getMaxOld() {
-		return maxOld;
-	}
+  public int getMaxOld() {
+    return maxOld;
+  }
 
-	static public class AddActionListener extends EventListener<UIFormMultiValueInputSet>
-   {
-      public void execute(Event<UIFormMultiValueInputSet> event) throws Exception
-      {
-         UIFormMultiValueInputSet uiSet = event.getSource();
-         String id = event.getRequestContext().getRequestParameter(OBJECTID);
-         if (uiSet.getId().equals(id))
-         {
-            	List<UIComponent> children = uiSet.getChildren();
-	            if (children.size() > 0)
-	            {
-	               UIFormInputBase uiInput = (UIFormInputBase)children.get(children.size() - 1);
-	               String index = uiInput.getId();
-	               int maxIndex = Integer.parseInt(index.replaceAll(id, ""));
-	               if(maxIndex < uiSet.maxOld) {
-	              	 maxIndex = uiSet.maxOld;
-	              	 while(uiSet.getChildById(id + String.valueOf(maxIndex)) != null){
-	              		 maxIndex = maxIndex + 1;
-	                 }
-	               }
-	               uiSet.createUIFormInput(maxIndex + 1);
-	            }
-         }
-         event.getRequestContext().addUIComponentToUpdateByAjax(uiSet.getParent());
+  static public class AddActionListener extends EventListener<UIFormMultiValueInputSet> {
+    public void execute(Event<UIFormMultiValueInputSet> event) throws Exception {
+      UIFormMultiValueInputSet uiSet = event.getSource();
+      String id = event.getRequestContext().getRequestParameter(OBJECTID);
+      if (uiSet.getId().equals(id)) {
+        List<UIComponent> children = uiSet.getChildren();
+        if (children.size() > 0) {
+          UIFormInputBase uiInput = (UIFormInputBase) children.get(children.size() - 1);
+          String index = uiInput.getId();
+          int maxIndex = Integer.parseInt(index.replaceAll(id, ""));
+          if (maxIndex < uiSet.maxOld) {
+            maxIndex = uiSet.maxOld;
+            while (uiSet.getChildById(id + String.valueOf(maxIndex)) != null) {
+              maxIndex = maxIndex + 1;
+            }
+          }
+          uiSet.createUIFormInput(maxIndex + 1);
+        }
       }
-   }
+      event.getRequestContext().addUIComponentToUpdateByAjax(uiSet.getParent());
+    }
+  }
 
-   static public class RemoveActionListener extends EventListener<UIFormMultiValueInputSet>
-   {
-      public void execute(Event<UIFormMultiValueInputSet> event) throws Exception
-      {
-         UIFormMultiValueInputSet uiSet = event.getSource();
-         String id = event.getRequestContext().getRequestParameter(OBJECTID);
-         uiSet.removeChildById(id);
-         uiSet.listIndexItemRemoved.add(Integer.parseInt(id.replaceAll(uiSet.getId(), "")));
-         event.getRequestContext().addUIComponentToUpdateByAjax(uiSet.getParent());
-      }
-   }
+  static public class RemoveActionListener extends EventListener<UIFormMultiValueInputSet> {
+    public void execute(Event<UIFormMultiValueInputSet> event) throws Exception {
+      UIFormMultiValueInputSet uiSet = event.getSource();
+      String id = event.getRequestContext().getRequestParameter(OBJECTID);
+      uiSet.removeChildById(id);
+      uiSet.listIndexItemRemoved.add(Integer.parseInt(id.replaceAll(uiSet.getId(), "")));
+      event.getRequestContext().addUIComponentToUpdateByAjax(uiSet.getParent());
+    }
+  }
 
 }
Index: eXoApplication/forum/webapp/src/main/java/org/exoplatform/forum/webui/UIForumCheckBoxInput.java
===================================================================
--- eXoApplication/forum/webapp/src/main/java/org/exoplatform/forum/webui/UIForumCheckBoxInput.java	(revision 67741)
+++ eXoApplication/forum/webapp/src/main/java/org/exoplatform/forum/webui/UIForumCheckBoxInput.java	(working copy)
@@ -8,7 +8,7 @@
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
@@ -19,90 +19,74 @@
 import java.io.Writer;
 
 import org.exoplatform.webui.application.WebuiRequestContext;
-import org.exoplatform.webui.form.UIForm;
+import org.exoplatform.webui.form.UIFormCheckBoxInput;
 import org.exoplatform.webui.form.UIFormInput;
-import org.exoplatform.webui.form.UIFormInputBase;
 
 /**
  * Created by The eXo Platform SAS
  * Author : Vu Duy Tu
- *          tu.duy@exoplatform.com
+ *					tu.duy@exoplatform.com
  * 24 Mar 2008, 08:00:59
  */
-public class UIForumCheckBoxInput<T> extends UIFormInputBase<T>{
-	 /**
-   * Whether this checkbox is checked
-   */
+public class UIForumCheckBoxInput<T> extends UIFormCheckBoxInput<T> {
+  /**
+  * Whether this checkbox is checked
+  */
   private boolean checked = false;
+
   /**
    * A javascript expression that will be fired when the value changes (JS onChange event)
    */
-  private String onchange_;
-  private String componentEvent_ = null;
 
   @SuppressWarnings("unchecked")
   public UIForumCheckBoxInput(String name, String bindingExpression, T value) {
     super(name, bindingExpression, null);
-    if(value != null) typeValue_ = (Class<T>)value.getClass();
+    if (value != null)
+      typeValue_ = (Class<T>) value.getClass();
     value_ = value;
     setId(name);
   }
-  
-  @SuppressWarnings("unchecked")
-  public UIFormInput setValue(T value){
-    if(value == null) return super.setValue(value);
-    if(value instanceof Boolean){
-      checked = ((Boolean)value).booleanValue();
-    } else if(boolean.class.isInstance(value)){
+
+  public UIFormInput setValue(T value) {
+    if (value == null)
+      return super.setValue(value);
+    if (value instanceof Boolean) {
+      checked = ((Boolean) value).booleanValue();
+    } else if (boolean.class.isInstance(value)) {
       checked = boolean.class.cast(value);
     }
-    typeValue_ = (Class<T>)value.getClass();
+    typeValue_ = (Class<T>) value.getClass();
     return super.setValue(value);
   }
-  
-  public void setOnChange(String onchange){ onchange_ = onchange; }  
- 
-  public void setComponentEvent(String com){ componentEvent_ = com; }
-  
-  public void setOnChange(String event, String com){
-    this.onchange_ = event; 
-    this.componentEvent_ = com;
-  } 
-  
-  public String renderOnChangeEvent(UIForm uiForm) throws Exception {
-    if(componentEvent_ == null)  return uiForm.event(onchange_, null);
-    return  uiForm.event(onchange_, componentEvent_ , (String)null);
+
+  final public boolean isCheckedBox() {
+    checked = isChecked();
+    return checked;
   }
-  
-  final public boolean isChecked() { return checked; }  
-  
-  @SuppressWarnings("unchecked")
-  final public UIForumCheckBoxInput setChecked(boolean check) { 
+
+  final public UIForumCheckBoxInput setCheckedBox(boolean check) {
     checked = check;
-    return this ;
-  } 
-  
-  public void decode(Object input, WebuiRequestContext context)  throws Exception {
-    if (!isEnable()) return ;    
-    if (input == null) checked = false; else checked = true;
-    if(typeValue_ == Boolean.class || typeValue_ == boolean.class) {
-      value_ = typeValue_.cast(checked);
-    }
+    setChecked(check);
+    return this;
   }
-  
+
   public void processRender(WebuiRequestContext context) throws Exception {
-    Writer w =  context.getWriter() ;    
-    w.write("<input type='checkbox' name='"); w.write(name); w.write("'") ;
-    w.write(" value='"); 
-    if(value_ != null)  w.write(String.valueOf(value_));
+    Writer w = context.getWriter();
+    w.write("<input type='checkbox' name='");
+    w.write(name);
+    w.write("'");
+    w.write(" value='");
+    if (value_ != null)
+      w.write(String.valueOf(value_));
     w.write("' ");
-    if(onchange_ != null) {
-      UIForm uiForm = getAncestorOfType(UIForm.class) ;
-      w.append(" onclick=\"").append(renderOnChangeEvent(uiForm)).append("\"");
-    }
-    if(checked) w.write(" checked ") ;
-    if (!enable_)  w.write(" disabled ");    
-    w.write(" class='checkbox'/> ") ;
-    w.write(name + "<br/>") ;
+    if (isChecked())
+      w.write(" checked ");
+    if (!enable_)
+      w.write(" disabled ");
+    w.write(" class='checkbox'/>");
+    w.write("<span> " + name + "</span><br/>");
+    if (this.isMandatory())
+      w.write(" *");
   }
 }
+
Index: eXoApplication/forum/webapp/src/main/resources/locale/portlet/forum/ForumPortlet_en.properties
===================================================================
--- eXoApplication/forum/webapp/src/main/resources/locale/portlet/forum/ForumPortlet_en.properties	(revision 67741)
+++ eXoApplication/forum/webapp/src/main/resources/locale/portlet/forum/ForumPortlet_en.properties	(working copy)
@@ -33,6 +33,8 @@
 UIForumPortlet.label.AdvancedSearch=Advanced Search
 UIForumPortlet.label.GoLastRead=Go to last read post.
 UIForumPortlet.label.TopicRatingVotes=Rated <keyWord>/5.
+UIForumPortlet.label.RemoveItem=Remove Item
+UIForumPortlet.label.AddItem=Add Item
 
 UIForumPortlet.msg.topicEmpty=This topic no longer exists.
 UIForumPortlet.msg.do-not-permission=This link is not visible anymore.
Index: eXoApplication/forum/webapp/src/main/resources/locale/portlet/forum/ForumPortlet_fr.properties
===================================================================
--- eXoApplication/forum/webapp/src/main/resources/locale/portlet/forum/ForumPortlet_fr.properties	(revision 67741)
+++ eXoApplication/forum/webapp/src/main/resources/locale/portlet/forum/ForumPortlet_fr.properties	(working copy)
@@ -33,6 +33,8 @@
 UIForumPortlet.label.AdvancedSearch=Recherche avancée
 UIForumPortlet.label.GoLastRead=Aller au dernier message lu.
 UIForumPortlet.label.TopicRatingVotes=Noté <keyWord>/5.
+UIForumPortlet.label.RemoveItem=Supprimer cet élément
+UIForumPortlet.label.AddItem=Ajouter un élément
 
 UIForumPortlet.msg.topicEmpty=Cette discussion n'existe plus.
 UIForumPortlet.msg.do-not-permission=La cible de ce lien n'est plus visible.
Index: eXoApplication/forum/webapp/src/main/resources/locale/portlet/forum/ForumPortlet.properties
===================================================================
--- eXoApplication/forum/webapp/src/main/resources/locale/portlet/forum/ForumPortlet.properties	(revision 67741)
+++ eXoApplication/forum/webapp/src/main/resources/locale/portlet/forum/ForumPortlet.properties	(working copy)
@@ -33,6 +33,8 @@
 UIForumPortlet.label.AdvancedSearch=Advanced Search
 UIForumPortlet.label.GoLastRead=Go to last read post.
 UIForumPortlet.label.TopicRatingVotes=Rated <keyWord>/5.
+UIForumPortlet.label.RemoveItem=Remove Item
+UIForumPortlet.label.AddItem=Add Item
 
 UIForumPortlet.msg.topicEmpty=This topic no longer exists.
 UIForumPortlet.msg.do-not-permission=This link is not visible anymore.
