Index: eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/impl/JCRDataStorage.java
===================================================================
--- eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/impl/JCRDataStorage.java	(revision 65325)
+++ eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/impl/JCRDataStorage.java	(working copy)
@@ -336,21 +336,21 @@
   /* (non-Javadoc)
    * @see org.exoplatform.faq.service.impl.DataStorage#getQuestionsIterator()
    */
-	public NodeIterator getQuestionsIterator() throws Exception {
+  public NodeIterator getQuestionsIterator() throws Exception {
 		SessionProvider sProvider = SessionProvider.createSystemProvider();
 		try {
 			Node faqHome = getFAQServiceHome(sProvider);
-			return getQuestionsIterator(faqHome);
+			return getQuestionsIterator(faqHome, "", true);
 		} catch (Exception e) {
 			log.error("Failed to get question iterator: ", e);
 		} finally {
 			sProvider.close();
 		}
 		return null;
-	}	
+	}
 
-	private NodeIterator getQuestionsIterator(Node parentNode) throws Exception {
-		StringBuffer queryString = new StringBuffer("/jcr:root").append(parentNode.getPath()).append("//element(*,exo:faqQuestion)");
+	private NodeIterator getQuestionsIterator(Node parentNode, String strQuery, boolean isAll) throws Exception {
+		StringBuffer queryString = new StringBuffer("/jcr:root").append(parentNode.getPath()).append((isAll)?"//":"/").append("element(*,exo:faqQuestion)").append(strQuery);
 		QueryManager qm = parentNode.getSession().getWorkspace().getQueryManager();
 		Query query = qm.createQuery(queryString.toString(), Query.XPATH);
 		QueryResult result = query.execute();
@@ -3218,7 +3218,7 @@
 			}
 			for (String string : patchNodeImport) {
 				Node nodeParentQuestion = categoryNode.getNode(string);
-				iter = getQuestionsIterator(nodeParentQuestion);
+				iter = getQuestionsIterator(nodeParentQuestion, "", true);
 				// Update number answers and regeister question node listener
 				while (iter.hasNext()) {
 					Node node = iter.nextNode();
@@ -3726,36 +3726,45 @@
     }
     return subList ;
   }
+  
+  private NodeIterator getNodeIteratorAnswerAccess(Node answerHome) throws Exception {
+		StringBuffer queryString = new StringBuffer("/jcr:root").append(answerHome.getPath()).append("/element(*,exo:answer)[@exo:approveResponses='true' and @exo:activateResponses='true']");
+		QueryManager qm = answerHome.getSession().getWorkspace().getQueryManager();
+		Query query = qm.createQuery(queryString.toString(), Query.XPATH);
+		QueryResult result = query.execute();
+		return result.getNodes();
+	}
 
   private List<QuestionInfo> getQuestionInfo(Node categoryNode) throws Exception {
-    List<QuestionInfo> questionInfoList = new ArrayList<QuestionInfo>() ;
-    if(categoryNode.hasNode(Utils.QUESTION_HOME)) {			
-      QuestionInfo questionInfo ;
-      NodeIterator iter = categoryNode.getNode(Utils.QUESTION_HOME).getNodes() ;
-      Node question ;
-      while(iter.hasNext()) {
-        question = iter.nextNode() ;
-        questionInfo = new QuestionInfo() ;
-        try{
-          questionInfo.setQuestion(question.getProperty("exo:title").getString()) ;
-          questionInfo.setDetail(question.getProperty("exo:name").getString());
-          questionInfo.setId(question.getName()) ;
-          if(question.hasNode(Utils.ANSWER_HOME)) {
-            List<String> answers = new ArrayList<String> () ;
-            NodeIterator ansIter = question.getNode(Utils.ANSWER_HOME).getNodes() ;
-            while(ansIter.hasNext()) {
-              answers.add(ansIter.nextNode().getProperty("exo:responses").getString()) ;
-            }
-            questionInfo.setAnswers(answers) ;
-          }
-          questionInfoList.add(questionInfo) ;
-        }catch(Exception e) {
-          log.error("Failed to add answer by question node: " + question.getName(), e);
-        }
-      }
-    }
-    return questionInfoList ;
-  }
+		List<QuestionInfo> questionInfoList = new ArrayList<QuestionInfo>();
+		if (categoryNode.hasNode(Utils.QUESTION_HOME)) {
+			QuestionInfo questionInfo;
+			String strQuery = "[@exo:isActivated='true' and @exo:isApproved='true']";
+			NodeIterator iter = getQuestionsIterator(categoryNode.getNode(Utils.QUESTION_HOME), strQuery, false);
+			Node question;
+			while (iter.hasNext()) {
+				question = iter.nextNode();
+				questionInfo = new QuestionInfo();
+				try {
+					questionInfo.setQuestion(question.getProperty("exo:title").getString());
+					questionInfo.setDetail(question.getProperty("exo:name").getString());
+					questionInfo.setId(question.getName());
+					if (question.hasNode(Utils.ANSWER_HOME)) {
+						List<String> answers = new ArrayList<String>();
+						NodeIterator ansIter = getNodeIteratorAnswerAccess(question.getNode(Utils.ANSWER_HOME));
+						while (ansIter.hasNext()) {
+							answers.add(ansIter.nextNode().getProperty("exo:responses").getString());
+						}
+						questionInfo.setAnswers(answers);
+					}
+					questionInfoList.add(questionInfo);
+				} catch (Exception e) {
+					log.error("Failed to add answer by question node: " + question.getName(), e);
+				}
+			}
+		}
+		return questionInfoList;
+	}
 
   /* (non-Javadoc)
    * @see org.exoplatform.faq.service.impl.DataStorage#updateQuestionRelatives(java.lang.String, java.lang.String[])
