Index: eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/FAQServiceUtils.java
===================================================================
--- eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/FAQServiceUtils.java	(revision 67771)
+++ eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/FAQServiceUtils.java	(working copy)
@@ -18,24 +18,19 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 
 import javax.jcr.Node;
 
 import org.exoplatform.commons.utils.PageList;
 import org.exoplatform.container.ExoContainerContext;
-import org.exoplatform.container.PortalContainer;
 import org.exoplatform.ks.common.UserHelper;
-import org.exoplatform.ks.common.jcr.JCRSessionManager;
 import org.exoplatform.ks.common.jcr.KSDataLocation;
 import org.exoplatform.ks.common.jcr.SessionManager;
 import org.exoplatform.services.jcr.access.AccessControlEntry;
 import org.exoplatform.services.jcr.access.PermissionType;
 import org.exoplatform.services.jcr.core.ExtendedNode;
 import org.exoplatform.services.organization.Membership;
-import org.exoplatform.services.organization.OrganizationService;
 import org.exoplatform.services.organization.User;
 
 /**
@@ -58,14 +53,12 @@
   	List<String> users = new ArrayList<String> () ;
 		if(userGroupMembership == null || userGroupMembership.length <= 0 || 
 				(userGroupMembership.length == 1 && userGroupMembership[0].equals(" "))) return users ; 
-		OrganizationService organizationService = (OrganizationService) PortalContainer.getComponent(OrganizationService.class);
 		for(String str : userGroupMembership) {
 			str = str.trim();
 			if(str.indexOf("/") >= 0) {
 				if(str.indexOf(":") >= 0) { //membership
 					String[] array = str.split(":") ;
-					PageList userPageList = organizationService.getUserHandler().findUsersByGroup(array[1]) ;					
-					//List<User> userList = organizationService.getUserHandler().findUsersByGroup(array[1]).getAll() ;
+					PageList userPageList = UserHelper.getUserPageListByGroupId(array[1]);					
 					if(array[0].length() > 1){
 					  List<User> userList = new ArrayList<User>() ;
 					  for(int i = 1; i <= userPageList.getAvailablePage(); i++) {
@@ -73,7 +66,7 @@
 					    userList.addAll(userPageList.getPage(i)) ;
 				      for (User user : userList) {
 				        if(!users.contains(user.getUserName())){
-	                Collection<Membership> memberships = organizationService.getMembershipHandler().findMembershipsByUser(user.getUserName()) ;
+				          Collection<Membership> memberships = UserHelper.findMembershipsByUser(user.getUserName());
 	                for(Membership member : memberships){
 	                  if(member.getMembershipType().equals(array[0])) {
 	                    users.add(user.getUserName()) ;
@@ -114,8 +107,7 @@
 						}
 					}
 				}else { //group
-					//List<User> userList = organizationService.getUserHandler().findUsersByGroup(str).getAll() ;
-				  PageList userPageList = organizationService.getUserHandler().findUsersByGroup(str) ;
+				  PageList userPageList = UserHelper.getUserPageListByGroupId(str);
 				  List<User> userList = new ArrayList<User>() ;
           for(int i = 1; i <= userPageList.getAvailablePage(); i++) {
             userList.clear() ;
Index: eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/impl/JCRDataStorage.java
===================================================================
--- eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/impl/JCRDataStorage.java	(revision 67771)
+++ eXoApplication/faq/service/src/main/java/org/exoplatform/faq/service/impl/JCRDataStorage.java	(working copy)
@@ -95,8 +95,6 @@
 import org.exoplatform.services.log.Log;
 import org.exoplatform.services.mail.MailService;
 import org.exoplatform.services.mail.Message;
-import org.exoplatform.services.organization.Membership;
-import org.exoplatform.services.organization.OrganizationService;
 
 import com.sun.syndication.feed.synd.SyndContent;
 import com.sun.syndication.feed.synd.SyndContentImpl;
@@ -168,25 +166,6 @@
 		}*/		
   }
 
-  private List<String> getAllGroupAndMembershipOfUser(String userId) throws Exception{
-    List<String> listOfUser = new ArrayList<String>();
-    listOfUser.add(userId);
-    String value = "";
-    String id = "";
-    Membership membership = null;
-    OrganizationService organizationService_ = (OrganizationService) PortalContainer.getComponent(OrganizationService.class);
-    for(Object object : organizationService_.getMembershipHandler().findMembershipsByUser(userId).toArray()){
-      id = object.toString();
-      id = id.replace("Membership[", "").replace("]", "");
-      membership = organizationService_.getMembershipHandler().findMembership(id);
-      value = membership.getGroupId();
-      listOfUser.add(value);
-      value = membership.getMembershipType() + ":" + value;
-      listOfUser.add(value);
-    }
-    return listOfUser;
-  }
-
   /* (non-Javadoc)
    * @see org.exoplatform.faq.service.impl.DataStorage#isAdminRole(java.lang.String)
    */
@@ -200,7 +179,7 @@
         if(cateHomeNode.hasProperty("exo:moderators")) 
           list.addAll(Utils.valuesToList(cateHomeNode.getProperty("exo:moderators").getValues())) ;
         if(list.contains(userName)) return true;
-        if(Utils.hasPermission(list, getAllGroupAndMembershipOfUser(userName))) return true;
+        if(Utils.hasPermission(list, UserHelper.getAllGroupAndMembershipOfUser(userName))) return true;
       }
     } catch (Exception e) {
       log.debug("Check user whether is admin: ", e);
Index: eXoApplication/faq/webapp/src/main/java/org/exoplatform/faq/webui/popup/UIAddressEmailsForm.java
===================================================================
--- eXoApplication/faq/webapp/src/main/java/org/exoplatform/faq/webui/popup/UIAddressEmailsForm.java	(revision 67771)
+++ eXoApplication/faq/webapp/src/main/java/org/exoplatform/faq/webui/popup/UIAddressEmailsForm.java	(working copy)
@@ -26,7 +26,6 @@
 
 import org.exoplatform.commons.utils.ObjectPageList;
 import org.exoplatform.commons.utils.PageList;
-import org.exoplatform.container.PortalContainer;
 import org.exoplatform.faq.webui.SelectItem;
 import org.exoplatform.faq.webui.SelectOption;
 import org.exoplatform.faq.webui.UIAnswersPortlet;
@@ -37,7 +36,6 @@
 import org.exoplatform.services.organization.OrganizationService;
 import org.exoplatform.services.organization.Query;
 import org.exoplatform.services.organization.User;
-import org.exoplatform.services.organization.idm.ExtGroup;
 import org.exoplatform.webui.config.annotation.ComponentConfig;
 import org.exoplatform.webui.config.annotation.EventConfig;
 import org.exoplatform.webui.core.UIPageIterator;
@@ -101,13 +99,8 @@
 	public List<SelectItem> getOptions() throws Exception {
 		List<SelectItem> options = new ArrayList<SelectItem>() ;
 		options.add(new SelectOption(FILED_ALL_GROUP, FILED_ALL_GROUP));
-		OrganizationService organizationService =(OrganizationService)PortalContainer.getComponent(OrganizationService.class) ;
-		Object[] objGroupIds = organizationService.getGroupHandler().getAllGroups().toArray() ;
 		try {
-			List<String> groupIds = new ArrayList<String>() ;
-			for (Object object : objGroupIds) {
-				groupIds.add(((ExtGroup)object).getId()) ;
-			}
+			List<String> groupIds = UserHelper.getAllGroupId();
 			if(!groupIds.isEmpty()){
 				for(String publicCg : groupIds) {
 					options.add(new SelectOption(publicCg, publicCg));
Index: eXoApplication/faq/webapp/src/main/java/org/exoplatform/faq/webui/popup/UIGroupSelector.java
===================================================================
--- eXoApplication/faq/webapp/src/main/java/org/exoplatform/faq/webui/popup/UIGroupSelector.java	(revision 67771)
+++ eXoApplication/faq/webapp/src/main/java/org/exoplatform/faq/webui/popup/UIGroupSelector.java	(working copy)
@@ -21,12 +21,12 @@
 import java.util.List;
 
 import org.exoplatform.commons.utils.PageList;
+import org.exoplatform.ks.common.UserHelper;
 import org.exoplatform.ks.common.webui.UIPopupAction;
 import org.exoplatform.ks.common.webui.UIPopupContainer;
 import org.exoplatform.ks.common.webui.UISelectComponent;
 import org.exoplatform.ks.common.webui.UISelector;
 import org.exoplatform.services.organization.Group;
-import org.exoplatform.services.organization.OrganizationService;
 import org.exoplatform.services.organization.User;
 import org.exoplatform.webui.config.annotation.ComponentConfig;
 import org.exoplatform.webui.config.annotation.ComponentConfigs;
@@ -94,11 +94,7 @@
 
   @SuppressWarnings({ "unchecked", "cast" })
   public List getChildGroup() throws Exception {
-    List children = new ArrayList() ;    
-    OrganizationService service = getApplicationComponent(OrganizationService.class) ;
-    for (Object child : service.getGroupHandler().findGroups(this.getCurrentGroup())) {
-      children.add((Group)child) ;
-    }
+    List children = UserHelper.findGroups(getCurrentGroup());
     return children ;
   }
   public boolean isSelectGroup() {return TYPE_GROUP.equals(type_);}
@@ -107,9 +103,8 @@
   @SuppressWarnings({ "unchecked", "cast" })
   public List<String> getList() throws Exception {
     List<String> children = new ArrayList<String>() ; 
-    OrganizationService service = getApplicationComponent(OrganizationService.class) ;
     if(TYPE_USER.equals(type_)){
-      PageList userPageList = service.getUserHandler().findUsersByGroup(this.getCurrentGroup().getId()) ;
+      PageList<User> userPageList = UserHelper.getUserPageListByGroupId(this.getCurrentGroup().getId());
       List<User> userList = new ArrayList<User>() ;
       for(int i = 1; i <= userPageList.getAvailablePage(); i++) {
         userList.clear() ;
@@ -127,7 +122,7 @@
         children.add(child) ;
       } 
     } else if(TYPE_GROUP.equals(type_)) {
-      Collection  groups = service.getGroupHandler().findGroups(this.getCurrentGroup()) ;    
+      Collection groups = UserHelper.findGroups(getCurrentGroup());    
       for(Object child : groups){
         children.add(((Group)child).getGroupName()) ;
       }
Index: eXoApplication/common/src/main/java/org/exoplatform/ks/common/UserHelper.java
===================================================================
--- eXoApplication/common/src/main/java/org/exoplatform/ks/common/UserHelper.java	(revision 67771)
+++ eXoApplication/common/src/main/java/org/exoplatform/ks/common/UserHelper.java	(working copy)
@@ -19,9 +19,6 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import java.util.regex.PatternSyntaxException;
 
 import org.exoplatform.commons.utils.PageList;
 import org.exoplatform.container.PortalContainer;
@@ -39,169 +36,187 @@
  * @version $Revision$
  */
 public class UserHelper {
-  
-  private static OrganizationService getOrganizationService() {
+
+  public static OrganizationService getOrganizationService() {
     OrganizationService organizationService = (OrganizationService) PortalContainer.getComponent(OrganizationService.class);
     return organizationService;
   }
-  
+
   private static UserHandler getUserHandler() {
     return getOrganizationService().getUserHandler();
   }
-  
+
   private static GroupHandler getGroupHandler() {
     return getOrganizationService().getGroupHandler();
   }
 
   public static List<Group> getAllGroup() throws Exception {
-    PageList pageList = (PageList) getGroupHandler().getAllGroups() ;
-    List<Group> list = pageList.getAll() ;
+    Collection<Group> pageList = getGroupHandler().getAllGroups();
+    List<Group> list = new ArrayList<Group>(pageList);
     return list;
   }
 
   public static String checkValueUser(String values) throws Exception {
-  	String errorUser = null;
-  	if(values != null && values.trim().length() > 0) {
-  		String[] userIds = values.split(",");
-  		for (String str : userIds) {
-  			str = str.trim() ;
-  			if(str.indexOf("$") >= 0) str = str.replace("$", "&#36");
-  			  
-  			if(str.indexOf("/") >= 0) {
-  				if(!UserHelper.hasGroupIdAndMembershipId(str)){
-  					if(errorUser == null) errorUser = str ;
-  					else errorUser = errorUser + ", " + str;
-  				}
-  			}else {//user
-  				if((getUserHandler().findUserByName(str) == null)) {
-  					if(errorUser == null) errorUser = str ;
-  					else errorUser = errorUser + ", " + str;
-  				}
-  			}
-  		}
-  	}
-  	return errorUser;
+    String errorUser = null;
+    if (values != null && values.trim().length() > 0) {
+      String[] userIds = values.split(",");
+      for (String str : userIds) {
+        str = str.trim();
+        if (str.indexOf("$") >= 0)
+          str = str.replace("$", "&#36");
+
+        if (str.indexOf("/") >= 0) {
+          if (!UserHelper.hasGroupIdAndMembershipId(str)) {
+            if (errorUser == null)
+              errorUser = str;
+            else
+              errorUser = errorUser + ", " + str;
+          }
+        } else {// user
+          if ((getUserHandler().findUserByName(str) == null)) {
+            if (errorUser == null)
+              errorUser = str;
+            else
+              errorUser = errorUser + ", " + str;
+          }
+        }
+      }
+    }
+    return errorUser;
   }
 
   public static boolean hasGroupIdAndMembershipId(String str) throws Exception {
-  	if(str.indexOf(":") >= 0) { //membership
-  		String[] array = str.split(":") ;
-  		try {
-  		  getGroupHandler().findGroupById(array[1]).getId() ;
-  		}catch (Exception e) {
-  			return false ;
-  		}
-  		if(array[0].length() == 1 && array[0].charAt(0) == '*') {
-  			return true ;
-  		}else if(array[0].length() > 0){
-  			if(getOrganizationService().getMembershipTypeHandler().findMembershipType(array[0])== null) return false ;
-  		}else return false ;
-  	}else { //group
-  		try {
-  		  getGroupHandler().findGroupById(str).getId() ;
-  		}catch (Exception e) {
-  			return false ;
-  		}
-  	}
-  	return true ;
+    if (str.indexOf(":") >= 0) { // membership
+      String[] array = str.split(":");
+      try {
+        getGroupHandler().findGroupById(array[1]).getId();
+      } catch (Exception e) {
+        return false;
+      }
+      if (array[0].length() == 1 && array[0].charAt(0) == '*') {
+        return true;
+      } else if (array[0].length() > 0) {
+        if (getOrganizationService().getMembershipTypeHandler().findMembershipType(array[0]) == null)
+          return false;
+      } else
+        return false;
+    } else { // group
+      try {
+        getGroupHandler().findGroupById(str).getId();
+      } catch (Exception e) {
+        return false;
+      }
+    }
+    return true;
   }
 
-
-
   @SuppressWarnings("unchecked")
   public static boolean hasUserInGroup(String groupId, String userId) throws Exception {
-    List<User> userList = new ArrayList<User>() ;
-  	PageList pageList = getUserHandler().findUsersByGroup(groupId) ;
-  	for(int i = 1; i <= pageList.getAvailablePage(); i++) {
-  	  userList.clear() ;
-  	  userList.addAll(pageList.getPage(i)) ;
-  	  for (User user : userList) {
-        if(user.getUserName().equals(userId)) return true ;
+    List<User> userList = new ArrayList<User>();
+    PageList pageList = getUserHandler().findUsersByGroup(groupId);
+    for (int i = 1; i <= pageList.getAvailablePage(); i++) {
+      userList.clear();
+      userList.addAll(pageList.getPage(i));
+      for (User user : userList) {
+        if (user.getUserName().equals(userId))
+          return true;
       }
-  	}
-  	
-  	return false ;
+    }
+
+    return false;
   }
 
-  //@SuppressWarnings("unchecked")
-  /*public static List<User> getUserByGroupId(String groupId) throws Exception {
-  	return getUserHandler().findUsersByGroup(groupId).getAll() ;
-  }*/
+  // @SuppressWarnings("unchecked")
+  /*
+   * public static List<User> getUserByGroupId(String groupId) throws Exception { return getUserHandler().findUsersByGroup(groupId).getAll() ; }
+   */
 
   @SuppressWarnings("unchecked")
   public static PageList getUserPageListByGroupId(String groupId) throws Exception {
-    return getUserHandler().findUsersByGroup(groupId) ;
+    return getUserHandler().findUsersByGroup(groupId);
   }
-  
+
   public static User getUserByUserId(String userId) throws Exception {
-  	return getUserHandler().findUserByName(userId) ;
+    return getUserHandler().findUserByName(userId);
   }
 
-  /*@SuppressWarnings("unchecked")
-  **
-   * @deprecated this method is danngerous and may not work with all OrganizationService impl
-   *
-  public static List<User> getAllUser() throws Exception {
-  	PageList pageList = getUserHandler().getUserPageList(10) ;
-  	List<User>list = pageList.getAll() ;
-  	return list;
-  }*/
-  
-  /*public static PageList getAllUserPageList() throws Exception {
-    return getUserHandler().getUserPageList(10);
-  }*/
-  
+  /*
+   * @SuppressWarnings("unchecked")*
+   * @deprecated this method is danngerous and may not work with all OrganizationService impl public static List<User> getAllUser() throws Exception { PageList pageList = getUserHandler().getUserPageList(10) ; List<User>list = pageList.getAll() ; return list; }
+   */
+
+  /*
+   * public static PageList getAllUserPageList() throws Exception { return getUserHandler().getUserPageList(10); }
+   */
+
   public static String[] getUserGroups() throws Exception {
-  	Object[] objGroupIds = getGroupHandler().findGroupsOfUser(UserHelper.getCurrentUser()).toArray();
-  	String[] groupIds = new String[objGroupIds.length];
-  	for (int i = 0; i < groupIds.length; i++) {
-  		groupIds[i] = ((GroupImpl) objGroupIds[i]).getId();
-  	}
-  	return groupIds;
+    Object[] objGroupIds = getGroupHandler().findGroupsOfUser(UserHelper.getCurrentUser()).toArray();
+    String[] groupIds = new String[objGroupIds.length];
+    for (int i = 0; i < groupIds.length; i++) {
+      groupIds[i] = ((GroupImpl) objGroupIds[i]).getId();
+    }
+    return groupIds;
   }
 
+  public static List<String> getAllGroupId() throws Exception {
+    List<String> grIds = new ArrayList<String>();
+    for (Group gr : getAllGroup()) {
+      grIds.add(gr.getId());
+    }
+    return grIds;
+  }
+
+  public static List<Group> findGroups(Group group) throws Exception {
+    return (List<Group>) getGroupHandler().findGroups(group);
+  }
+
+  @SuppressWarnings("unchecked")
   public static PageList getPageListUser() throws Exception {
-  	return getUserHandler().getUserPageList(10);
+    return getUserHandler().getUserPageList(10);
   }
 
   public static boolean isAnonim() throws Exception {
-  	String userId = UserHelper.getCurrentUser();
-  	if (userId == null)
-  		return true;
-  	return false;
+    String userId = UserHelper.getCurrentUser();
+    if (userId == null)
+      return true;
+    return false;
   }
 
+  public static Collection findMembershipsByUser(String userId) throws Exception {
+    return getOrganizationService().getMembershipHandler().findMembershipsByUser(userId);
+  }
+
   @SuppressWarnings("unchecked")
-  public static List<String> getAllGroupAndMembershipOfUser(String userId) throws Exception{
+  public static List<String> getAllGroupAndMembershipOfUser(String userId) throws Exception {
     List<String> listOfUser = new ArrayList<String>();
     if (userId == null) {
       return listOfUser; // should we throw an IllegalArgumentException instead ?
     }
 
-  	listOfUser.add(userId); //himself
-  	String value = "";
-  	Collection<Membership> memberships = getOrganizationService().getMembershipHandler().findMembershipsByUser(userId);
-  	for (Membership membership : memberships) {
-       value = membership.getGroupId();
-        listOfUser.add(value); // its groups
-        value = membership.getMembershipType() + ":" + value;
-        listOfUser.add(value);  // its memberships
+    listOfUser.add(userId); // himself
+    String value = "";
+    Collection<Membership> memberships = findMembershipsByUser(userId);
+    for (Membership membership : memberships) {
+      value = membership.getGroupId();
+      listOfUser.add(value); // its groups
+      value = membership.getMembershipType() + ":" + value;
+      listOfUser.add(value); // its memberships
     }
-  	
-  	return listOfUser;
+
+    return listOfUser;
   }
 
   static public String getEmailUser(String userName) throws Exception {
-  	User user = getUserHandler().findUserByName(userName) ;
-  	String email = user.getEmail() ;
-  	return email;
+    User user = getUserHandler().findUserByName(userName);
+    String email = user.getEmail();
+    return email;
   }
 
   static public String getCurrentUser() throws Exception {
-  	try {
-  		return Util.getPortalRequestContext().getRemoteUser();
+    try {
+      return Util.getPortalRequestContext().getRemoteUser();
     } catch (Exception e) {
-	    return null;
+      return null;
     }
   }
 
